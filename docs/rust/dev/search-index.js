var searchIndex = JSON.parse('{\
"polars":{"doc":"Polars: <em>DataFrames in Rust</em>","t":"","n":["VERSION","apply_method_all_arrow_series","chunked_array","datatypes","df","docs","enable_string_cache","error","frame","functions","io","lazy","prelude","series","testing","time","using_string_cache","ChunkIdIter","ChunkedArray","ChunkedArrayLayout","FAST_EXPLODE_LIST","Multi","MultiNoNull","SORTED_ASC","SORTED_DSC","Settings","Single","SingleNoNull","__clone_box","__clone_box","_can_fast_explode","abs","add","add","add","add","add","add","add","add","add","add","add","add","add_to","agg_list","agg_list","agg_list","agg_list","agg_list","agg_list","agg_list","all","all","all_kleene","amortized_iter","amortized_iter","amortized_iter_with_name","amortized_iter_with_name","any","any_kleene","append","apply","apply","apply","apply","apply","apply","apply_amortized","apply_amortized_generic","apply_as_ints","apply_as_ints","apply_generic","apply_in_place","apply_kernel","apply_kernel","apply_kernel","apply_kernel","apply_kernel_cast","apply_kernel_cast","apply_kernel_cast","apply_kernel_cast","apply_mut","apply_mut","apply_mut","apply_nonnull_values_generic","apply_to_buffer","apply_to_inner","apply_to_inner","apply_to_slice","apply_to_slice","apply_to_slice","apply_to_slice","apply_to_slice","apply_to_slice","apply_values","apply_values","apply_values","apply_values","apply_values","apply_values","apply_values_generic","arg_sort","arg_sort","arg_sort","arg_sort","arg_sort","arg_sort","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_unique","arg_unique","arg_unique","arg_unique","arg_unique","arg_unique","arg_unique","arithmetic","as_array","as_binary","as_binary","as_list","as_ref","as_ref_dtype","as_utf8","as_utf8","bitand","bitand","bitand","bitand","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","cast","cast","cast","cast","cast","cast","cast","cast_and_apply_in_place","cast_unchecked","cast_unchecked","cast_unchecked","cast_unchecked","cast_unchecked","cast_unchecked","checked_div","checked_div_num","chunk_id","chunks","chunks_mut","clone","clone","clone_into","clone_into","collect","comparison","complement","cont_slice","contains","cummax","cummin","cumprod","cumsum","data_views","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","difference","div","div","div","div","divide","drop","drop","drop","drop","dtype","empty","eq","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","explode","explode_and_offsets","explode_and_offsets","explode_and_offsets","extend","extend","fill_null_with_values","fill_null_with_values","fill_null_with_values","filter","filter","filter","filter","filter","filter","filter","first_non_null","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each_amortized","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_chunk_iter","from_chunk_iter_like","from_chunks","from_chunks_and_dtype","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_options","from_iter_options","from_iter_options","from_iter_options","from_iter_options","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_name","from_par_iter","from_par_iter","from_par_iter","from_par_iter","from_par_iter","from_par_iter","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_options","from_slice_options","from_slice_options","from_slice_options","from_slice_options","from_trusted_len_iter_rev","from_trusted_len_iter_rev","from_vec","full","full","full","full","full","full","full","full_null","full_null","full_null","full_null","full_null","full_null","full_null","full_null_with_dtype","full_null_with_dtype","gather_skip_nulls","gather_skip_nulls","get","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_as_series","get_as_series","get_flags","get_inner","get_inner","get_object","get_object_unchecked","get_sorted_flag","get_unchecked","get_values_size","get_values_size","get_values_size","get_values_size","group_tuples","group_tuples","group_tuples","group_tuples","group_tuples","group_tuples","group_tuples","group_tuples_perfect","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","has_validity","head","init","init","init","init_rand","inner_dtype","inner_dtype","insert","intersection","intersects","into","into","into","into_date","into_datetime","into_decimal","into_decimal_unchecked","into_duration","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_no_null_iter","into_series","into_series","into_time","is_all","is_empty","is_empty","is_finite","is_infinite","is_nan","is_not_nan","is_not_null","is_null","is_optimal_aligned","is_sorted_flag","iter","iter_names","iter_validities","iterator","last","last_non_null","layout","len","lhs_div","lhs_rem","lhs_sub","limit","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","max","max","max_as_series","max_as_series","max_as_series","max_as_series","max_as_series","max_as_series","mean","mean","median","median","median","median_as_series","median_as_series","median_as_series","min","min","min_as_series","min_as_series","min_as_series","min_as_series","min_as_series","min_as_series","mmap_slice","mmap_slice","mul","mul","mul","mul","multiply","n_unique","n_unique","n_unique","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_from_index","new_from_index","new_from_index","new_from_index","new_from_index","new_from_index","new_from_index","new_from_owned_with_null_bitmap","new_from_vec","new_vec","none_to_nan","not","not","not","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal_and_validity","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","null_count","object","ops","par_iter","par_iter","par_iter_indexed","par_iter_indexed","prod_as_series","quantile","quantile","quantile","quantile_as_series","quantile_as_series","quantile_as_series","rand_bernoulli","rand_normal","rand_standard_normal","rand_uniform","rechunk","ref_field","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_signed","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","reinterpret_unsigned","rem","rem","rem","rem","remainder","remove","rename","reverse","reverse","reverse","reverse","reverse","reverse","reverse","rolling_map","rolling_map_float","sample_frac","sample_n","set","set","set","set","set","set_at_idx","set_at_idx","set_at_idx","set_at_idx","set_at_idx2","set_at_idx2","set_at_idx2","set_at_idx_with","set_at_idx_with","set_at_idx_with","set_at_idx_with","set_fast_explode","set_inner_dtype","set_sorted_flag","set_sorted_flag","shift","shift","shift","shift","shift","shift","shift","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","shrink_to_fit","slice","sort","sort","sort","sort","sort","sort","sort_with","sort_with","sort_with","sort_with","sort_with","sort_with","std","std_as_series","std_as_series","std_as_series","sub","sub","sub","sub","sub","sub_assign","subtract","sum","sum","sum_as_series","sum_as_series","sum_as_series","sum_as_series","sum_as_series","sum_as_series","symmetric_difference","tail","take","take","take_unchecked","take_unchecked","temporal","tile","to_decimal","to_logical","to_ndarray","to_ndarray","to_owned","to_owned","to_physical","to_utf8","to_vec","to_vec_null_aware","toggle","try_apply","try_apply","try_apply","try_apply","try_apply","try_apply","try_apply_amortized","try_apply_amortized","try_apply_generic","try_apply_nonnull_values_generic","try_apply_values_generic","try_from","try_from","try_from","try_from_chunk_iter","try_into","try_into","try_into","type_id","type_id","type_id","union","unique","unique","unique","unique","unique","unique","unique","unpack_series_matching_type","unset_fast_explode_list","upstream_traits","value_unchecked","var","var_as_series","var_as_series","var_as_series","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vzip","vzip","vzip","width","with_chunk","with_chunks","with_name","zip_and_apply_amortized","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","ArrayArithmetics","add","div","div_scalar","mul","rem","rem_scalar","sub","AnonymousListBuilder","AnonymousOwnedListBuilder","BinaryChunkedBuilder","BinaryChunkedBuilderCow","BooleanChunkedBuilder","ChunkedBuilder","ListBinaryChunkedBuilder","ListBooleanChunkedBuilder","ListBuilderTrait","ListPrimitiveChunkedBuilder","ListUtf8ChunkedBuilder","NewChunkedArray","PrimitiveChunkedBuilder","Utf8ChunkedBuilder","Utf8ChunkedBuilderCow","__clone_box","__clone_box","__clone_box","append_array","append_empty","append_empty","append_iter","append_iter","append_iter_values","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_opt_array","append_opt_series","append_opt_series","append_opt_slice","append_option","append_option","append_option","append_series","append_series","append_series","append_series","append_series","append_series","append_series","append_slice","append_trusted_len_iter","append_trusted_len_iter","append_value","append_value","append_value","append_value","append_value","append_value","append_value","append_values_iter","append_values_iter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","capacity","capacity","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fast_explode","fast_explode","fast_explode","fast_explode","fast_explode","field","field","field","field","field","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","fixed_size_list","from","from","from","from","from","from","from","from","from","from","from","from","from_iter_options","from_iter_values","from_slice","from_slice_options","get_list_builder","init","init","init","init","init","init","init","init","init","init","init","init","inner_array","inner_array","inner_array","inner_array","inner_array","into","into","into","into","into","into","into","into","into","into","into","into","list","new","new","new","new","new","new","new","new","new","new","new","new","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AnonymousListBuilder","AnonymousOwnedListBuilder","ListBinaryChunkedBuilder","ListBooleanChunkedBuilder","ListBuilderTrait","ListPrimitiveChunkedBuilder","ListUtf8ChunkedBuilder","append_null","append_opt_series","append_series","builder","fast_explode","field","finish","get_list_builder","inner_array","ChunkedCollectInferIterExt","ChunkedCollectIterExt","collect_ca","collect_ca_like","collect_ca_trusted","collect_ca_trusted_like","collect_ca_trusted_with_dtype","collect_ca_with_dtype","try_collect_ca","try_collect_ca_like","try_collect_ca_trusted","try_collect_ca_trusted_like","try_collect_ca_trusted_with_dtype","try_collect_ca_with_dtype","BinaryIterNoNull","BoolIterNoNull","FixedSizeListIterNoNull","ListIterNoNull","PolarsIterator","SomeIterator","StructIter","Utf8IterNoNull","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","into_vec","new","new","new","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","par","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","list","utf8","ObjectArray","ObjectValueIter","PolarsObject","PolarsObjectSafe","__clone_box","arr_from_iter_with_dtype","arr_from_iter_with_dtype","as_any","as_any","as_any_mut","borrow","borrow_mut","builder","clone","clone_into","data_type","deref","deref_mut","drop","fmt","from","get","init","into","into_iter","is_null_unchecked","is_valid_unchecked","is_valid_unchecked","iter","iter","len","null_count","registry","set_validity","slice","slice_typed","slice_typed_unchecked","slice_unchecked","to_boxed","to_boxed","to_owned","try_arr_from_iter_with_dtype","try_arr_from_iter_with_dtype","try_from","try_into","type_id","type_name","type_name","validity","value","value_unchecked","value_unchecked","values","values_iter","values_iter","vzip","with_validity","with_validity","with_validity_typed","ObjectChunkedBuilder","append_null","append_null","append_option","append_value","append_value","append_value_from_any","borrow","borrow_mut","default","deref","deref_mut","drop","finish","from","init","into","new","to_series","try_from","try_into","type_id","vzip","AnonymousObjectBuilder","BuilderConstructor","ObjectConverter","append_null","append_value","get_object_builder","get_object_converter","is_object_builder_registered","register_object_builder","to_series","Backward","ChunkAgg","ChunkAnyValue","ChunkApply","ChunkApplyKernel","ChunkBytes","ChunkCast","ChunkCompare","ChunkCumAgg","ChunkExpandAtIndex","ChunkExplode","ChunkFillNullValue","ChunkFilter","ChunkFull","ChunkFullNull","ChunkQuantile","ChunkReverse","ChunkRollApply","ChunkSet","ChunkShift","ChunkShiftFill","ChunkSort","ChunkTake","ChunkTakeUnchecked","ChunkUnique","ChunkVar","ChunkZip","FillNullLimit","FillNullStrategy","Forward","FuncRet","IsFirstDistinct","IsLastDistinct","Item","Max","MaxBound","Mean","Min","MinBound","None","One","Reinterpret","Some","SortMultipleOptions","SortOptions","Zero","__clone_box","__clone_box","__clone_box","apply","apply_kernel","apply_kernel_cast","apply_to_slice","apply_values","arg_sort","arg_sort_multiple","arg_unique","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast_unchecked","clone","clone","clone","clone_into","clone_into","clone_into","cummax","cummin","cumprod","cumsum","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","descending","descending","drop","drop","drop","eq","equal","equal_missing","equivalent","equivalent","equivalent","equivalent","explode","explode_and_offsets","fill_null","fill_null_with_values","filter","fmt","fmt","from","from","from","full","full","full_null","gather","get_any_value","get_any_value_unchecked","gt","gt_eq","hash","init","init","init","into","into","into","is_first_distinct","is_last_distinct","lt","lt_eq","maintain_order","max","mean","median","min","multithreaded","multithreaded","n_unique","new_from_index","not_equal","not_equal_missing","nulls_last","other","quantile","reinterpret_signed","reinterpret_unsigned","reverse","rolling_map","set","set_at_idx","set_at_idx_with","shift","shift_and_fill","sort","sort","sort_with","std","sum","take","take_unchecked","to_byte_slices","to_owned","to_owned","to_owned","try_apply","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique","var","vzip","vzip","vzip","zip","zip_with","BinaryFnMut","Ret","Ret","TernaryFnMut","binary","binary_elementwise","binary_elementwise_for_each","binary_elementwise_values","binary_mut_with_options","binary_unchecked_same_type","ternary_elementwise","try_binary","try_binary_elementwise","try_binary_elementwise_values","try_binary_unchecked_same_type","try_ternary_elementwise","check_bounds_ca","check_bounds_nulls","_broadcast_descending","arg_sort_multiple","arg_sort_no_nulls","sort_slice_ascending","sort_slice_descending","_get_rows_encoded","_get_rows_encoded_ca","_get_rows_encoded_compat_array","conversion","datetime_to_timestamp_ms","datetime_to_timestamp_ns","datetime_to_timestamp_us","time_to_time64ns","unix_time","datetime_to_timestamp_ms","datetime_to_timestamp_ns","datetime_to_timestamp_us","PolarsAsRef","AnyValue","Array","Array","Array","ArrayChunked","ArrayCollectIterExt","ArrayFromIter","ArrayFromIterDtype","ArrowDataType","ArrowTimeUnit","AsRefDataType","Binary","Binary","Binary","BinaryChunked","BinaryOwned","BinaryType","Boolean","Boolean","Boolean","BooleanChunked","BooleanType","CatIter","Categorical","Categorical","CategoricalChunked","CategoricalChunkedBuilder","CategoricalType","ChunkId","DataType","Date","Date","Date32","Date64","DateChunked","DateType","Datetime","Datetime","DatetimeChunked","DatetimeType","Decimal","Decimal","Decimal","Decimal256","DecimalChunked","DecimalType","Dictionary","Duration","Duration","Duration","DurationChunked","DurationType","Extension","Field","FixedSizeBinary","FixedSizeList","FixedSizeListType","Flat","Float16","Float32","Float32","Float32","Float32Chunked","Float32Type","Float64","Float64","Float64","Float64Chunked","Float64Type","GetAnyValue","Global","GlobalFinished","HashMap","IDX_DTYPE","IdxArr","IdxCa","IdxSize","IdxType","InitHashMaps","Int128Chunked","Int128Type","Int16","Int16","Int16","Int16Chunked","Int16Type","Int32","Int32","Int32","Int32Chunked","Int32Type","Int64","Int64","Int64","Int64Chunked","Int64Type","Int8","Int8","Int8","Int8Chunked","Int8Type","Interval","LargeBinary","LargeList","LargeUtf8","List","List","List","ListChunked","ListType","Local","Local","Logical","LogicalType","Map","Microsecond","Microseconds","Millisecond","Milliseconds","Nanosecond","Nanoseconds","Native","Nested","Null","Null","Null","NumericNative","Object","Object","ObjectChunked","ObjectOwned","ObjectType","OwnedObject","Physical","PlHashMap","PlHashSet","PlIdHashMap","PlIndexMap","PlIndexSet","PolarsDataType","PolarsFloatType","PolarsIntegerType","PolarsNumericType","PolarsType","RevMapping","RevMappingBuilder","Second","StaticArray","StrHashLocal","Struct","Struct","Struct","StructChunked","StructOwned","Structure","Time","Time","Time32","Time64","TimeChunked","TimeType","TimeUnit","TimeZone","Timestamp","UInt16","UInt16","UInt16","UInt16Chunked","UInt16Type","UInt32","UInt32","UInt32","UInt32Chunked","UInt32Type","UInt64","UInt64","UInt64","UInt64Chunked","UInt64Type","UInt8","UInt8","UInt8","UInt8Chunked","UInt8Type","Union","Unknown","Utf8","Utf8","Utf8","Utf8Chunked","Utf8Owned","Utf8Type","ValueIterT","ValueT","ZeroablePhysical","ZeroableValueT","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_iter_struct_av","_materialize_struct_av","_merge_categorical_map","add","add","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","agg_list","append","append_null","append_value","arg_sort","arr_from_iter","arr_from_iter_trusted","arr_from_iter_trusted_with_dtype","arr_from_iter_with_dtype","as_borrowed","as_date_iter","as_datetime_iter","as_ref_dtype","as_slice","as_time_iter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_time_unit","cast_time_unit","categorical","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coerce","collect_arr","collect_arr_trusted","collect_arr_trusted_with_dtype","collect_arr_with_dtype","convert_time_zone","data_type","days","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","drain_iter","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dtype","dtype","dtype","dtype","dtype","dtype","dtype","dtype","dtype","dtype","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal_missing","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exits","field","field_by_name","fields","fields_mut","find","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cats_and_rev_map_unchecked","from_duration","from_duration_options","from_global_indices_unchecked","from_naive_date","from_naive_date_options","from_naive_datetime","from_naive_datetime_options","from_naive_time","from_naive_time_options","from_owned","from_vec","from_zeroable_vec","full_null","full_null","get","get","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_categories","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_optional","get_rev_map","get_str","get_unchecked","get_unchecked","gt","gt_eq","hash","hash","hash","hash","hash","hash","hash_impl","hour","hours","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_dtype","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_series","into_series","into_series","into_series","into_series","into_series","into_series","into_static","is_empty","is_empty","is_float","is_global","is_integer","is_local","is_logical","is_nested_null","is_nested_null","is_numeric","is_primitive","is_signed","is_signed","is_temporal","is_unsigned","is_unsigned","iter","iter_str","last","len","len","len","logical","lt","lt_eq","merge_dtypes","microseconds","milliseconds","minute","minutes","month_end","month_end","month_start","month_start","mul","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","n_unique","name","name","name","name","nanosecond","nanoseconds","new","new","new","new","new","new","new","new","new","new","new","new","next","not_equal","not_equal_missing","null_count","parse_from_str_slice","parse_from_str_slice","partial_cmp","partial_cmp","precision","rechunk","ref_field","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","rename","round","round","same_src","scale","second","seconds","set_lexical_ordering","set_name","set_time_unit","set_time_unit","set_time_zone","size_hint","sort","sort_with","strftime","strftime","strftime","sub","subtract","subtract","subtract","subtract","subtract","subtract","subtract","subtract","subtract","subtract","subtract","time_unit","time_unit","time_zone","to_arrow","to_arrow","to_arrow","to_ascii","to_local","to_logical_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical_type","to_string","to_string","to_string","to_string","to_string","to_string","total_null_count","truncate","truncate","try_arr_from_iter","try_arr_from_iter_trusted","try_arr_from_iter_trusted_with_dtype","try_arr_from_iter_with_dtype","try_collect_arr","try_collect_arr_trusted","try_collect_arr_trusted_with_dtype","try_collect_arr_with_dtype","try_extract","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unnest","uses_lexical_ordering","value","value_counts","value_unchecked","value_within_range","values_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","with_validity_typed","CatIter","CategoricalChunked","CategoricalChunkedBuilder","Global","GlobalFinished","Local","Local","RevMapping","RevMappingBuilder","StrHashLocal","string_cache","StringCacheHolder","borrow","borrow_mut","default","deref","deref_mut","disable_string_cache","drop","drop","enable_string_cache","from","hold","init","into","try_from","try_into","type_id","using_string_cache","vzip","eager","lazy","performance","ArrowError","ArrowError","ColumnNotFound","ComputeError","Duplicate","Err","ErrString","External","ExternalFormat","InvalidArgumentError","InvalidOperation","Io","Io","NoData","NotYetImplemented","Ok","OutOfBounds","OutOfSpec","Overflow","PolarsError","PolarsResult","SchemaFieldNotFound","SchemaMismatch","ShapeMismatch","StringCacheMismatch","StructFieldNotFound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","constants","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","feature_gated","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_external_error","get_warning_function","init","init","init","into","into","into","map_err","polars_bail","polars_ensure","polars_err","polars_warn","set_warning_function","source","to_compute_err","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wrap_msg","FALSE","LENGTH_LIMIT_MSG","TRUE","Any","ArrowChunk","DataFrame","First","Ignore","Last","None","NullStrategy","PhysRecordBatchIter","Propagate","RecordBatchIter","UniqueKeepStrategy","__clone_box","__clone_box","__clone_box","_add_columns","_filter_seq","_select_impl","_select_impl_unchecked","_slice_and_realloc","agg_chunks","align_chunks","apply","apply_at_idx","as_single_chunk","as_single_chunk_par","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone_into","clone_into","clone_into","column","columns","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","drop","drop","drop","drop","drop","drop","drop_in_place","drop_many","drop_many_amortized","drop_nulls","dtypes","empty","eq","eq","equivalent","equivalent","equivalent","equivalent","estimated_size","explode","explode","explode_impl","extend","fields","fill_null","filter","find_idx_by_name","fmt","fmt","fmt","fmt","frame_equal","frame_equal_missing","frame_equal_schema","from","from","from","from","from","from","from","from_iter","from_rows","from_rows_and_schema","from_rows_iter_and_schema","get","get_column_names","get_column_names_owned","get_columns","get_columns_mut","get_row","get_row_amortized","get_row_amortized_unchecked","get_supertype","group_by","group_by","group_by_dynamic","group_by_rolling","group_by_stable","group_by_with_series","head","height","hmax","hmean","hmin","hstack","hstack_mut","hstack_mut_unchecked","hsum","index","index","index","index","index","index","index","index","init","init","init","init","init","insert_at_idx","into","into","into","into","into","into_iter","into_iter","into_struct","is_duplicated","is_empty","is_unique","iter","iter_chunks","iter_chunks_physical","lazy","max","mean","median","melt","melt2","min","n_chunks","new","new_no_checks","next","next","null_count","pipe","pipe_mut","pipe_with_args","pop","ptr_equal","quantile","rename","replace","replace_at_idx","replace_or_add","reverse","row","sample_frac","sample_n","sample_n_literal","schema","select","select_at_idx","select_by_range","select_physical","select_series","select_with_schema","select_with_schema_unchecked","set_column_names","shape","shift","should_rechunk","shrink_to_fit","size_hint","size_hint","slice","slice_par","sort","sort_impl","sort_in_place","sort_with_options","std","sum","tail","take","take_unchecked","to_df","to_ndarray","to_owned","to_owned","to_owned","to_string","top_k","transpose","try_apply","try_apply_at_idx","try_find_idx_by_name","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_rows_iter_and_schema","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unique","unique_impl","unique_stable","unnest","upsample","upsample_stable","var","vstack","vstack_mut","vzip","vzip","vzip","vzip","vzip","width","with_column","with_column_and_schema","with_column_unchecked","with_row_count","with_row_count_mut","MeltArgs","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","id_vars","init","into","streamable","to_owned","try_from","try_into","type_id","value_name","value_vars","variable_name","vzip","BorrowIdxItem","Count","First","GroupBy","GroupByMethod","Groups","GroupsIdx","GroupsIndicator","GroupsProxy","GroupsProxyIter","GroupsProxyParIter","GroupsSlice","Idx","Idx","IdxItem","Implode","IntoGroupsProxy","Last","Max","Mean","Median","Min","NUnique","NanMax","NanMin","Quantile","Slice","Slice","SlicedGroups","Std","Sum","Var","__clone_box","__clone_box","__clone_box","__clone_box","agg_list","aggregations","all","apply","as_list_chunked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","df","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expr","first","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt_group_by_column","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_par_iter","get","get_groups","get_groups_mut","group_count","group_lengths","group_tuples","groups","idx_mut","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_idx","into_iter","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","is_empty","is_empty","is_sorted_flag","iter","iter","keys","keys_sliced","last","len","len","max","mean","median","min","n_unique","new","new","next","nth","par_apply","par_iter","par_iter","quantile","select","slice","sort","sort","std","sum","take_group_firsts","take_group_lasts","take_groups","take_groups_mut","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","unwrap_idx","unwrap_slice","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","groups","rolling","AggList","TakeExtremum","_agg_helper_idx","_agg_helper_idx_no_null","_agg_helper_slice","_agg_helper_slice_no_null","_rolling_apply_agg_window_no_nulls","_rolling_apply_agg_window_nulls","_slice_from_offsets","_use_rolling_kernels","agg_list","take_max","take_min","PhysicalAggExpr","evaluate","root_name","All","All","AnyValueBuffer","AnyValueBufferTrusted","Boolean","Boolean","Date","Datetime","Duration","Float32","Float32","Float64","Float64","Int16","Int16","Int32","Int32","Int64","Int64","Int8","Int8","Row","Struct","Time","UInt16","UInt16","UInt32","UInt32","UInt64","UInt64","UInt8","UInt8","Utf8","Utf8","__clone_box","__clone_box","__clone_box","add","add_unchecked_borrowed_physical","add_unchecked_owned_physical","any_values_to_dtype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coerce_data_type","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","from","from","infer_schema","init","init","init","into","into","into","into_series","into_series","new","new","new","reset","reset","rows_to_schema_first_non_null","rows_to_schema_supertypes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","concat_df_diagonal","concat_df_horizontal","cov","pearson_corr","Abs","Agg","AggExpr","AggGroups","Aggregate","AggregationContext","Alias","All","AllColumns","AllColumnsSingle","AllHorizontal","AllowedOptimizations","Always","And","AnonymousFunction","AnonymousScan","AnonymousScanOptions","Any","Any","AnyHorizontal","AnyValue","Arc","ArgAgg","ArgWhere","Array","Array","Array","ArrayChunked","ArrayCollectIterExt","ArrayExpr","ArrayFromIter","ArrayFromIterDtype","ArrayNameSpace","ArrayRef","ArrowDataType","ArrowError","ArrowField","ArrowResult","ArrowSchema","ArrowTimeUnit","AsBinary","AsList","AsOf","AsOfOptions","AsRefDataType","AsStruct","AsUtf8","AsofJoin","AsofStrategy","Auto","Average","BOOLEAN_RE","Backward","Backward","BackwardFill","BatchedParquetReader","Binary","Binary","Binary","Binary","BinaryChunked","BinaryChunkedBuilder","BinaryExpr","BinaryExpr","BinaryNameSpaceImpl","BinaryOwned","BinaryType","BinaryUdfOutputField","Boolean","Boolean","Boolean","Boolean","Boolean","BooleanChunked","BooleanChunkedBuilder","BooleanFunction","BooleanType","BorrowIdxItem","Both","Bounds","BoundsIter","Brotli","BrotliLevel","C","Cache","Cast","CatIter","Categorical","Categorical","Categorical","CategoricalChunked","CategoricalChunkedBuilder","CategoricalNameSpace","CategoricalOrdering","CategoricalType","Ceil","ChainedThen","ChainedWhen","ChunkAgg","ChunkAggSeries","ChunkAnyValue","ChunkApply","ChunkApplyKernel","ChunkBytes","ChunkCast","ChunkCompare","ChunkCumAgg","ChunkExpandAtIndex","ChunkExplode","ChunkFillNullValue","ChunkFilter","ChunkFull","ChunkFullNull","ChunkId","ChunkJoinIds","ChunkJoinOptIds","ChunkQuantile","ChunkReverse","ChunkRollApply","ChunkSet","ChunkShift","ChunkShiftFill","ChunkSort","ChunkTake","ChunkTakeUnchecked","ChunkUnique","ChunkVar","ChunkZip","ChunkedArray","ChunkedBuilder","ChunkedCollectInferIterExt","ChunkedCollectIterExt","ChunkedSet","Clip","ClosedWindow","Coalesce","Column","ColumnNotFound","Columns","Columns","ComputeError","ConcatExpr","Correlation","Count","Count","Count","Cross","CrossJoin","CsvEncoding","CsvReader","CsvWriter","CsvWriterOptions","Cumcount","Cummax","Cummin","Cumprod","Cumsum","DataFrame","DataFrameJoinOps","DataFrameOps","DataFrameScan","DataPoint","DataPoint","DataType","Date","Date","Date","Date32","Date64","DateChunked","DateMethods","DateTime","DateType","Datetime","Datetime","DatetimeArgs","DatetimeChunked","DatetimeMethods","DatetimeType","Decimal","Decimal","Decimal","Decimal256","DecimalChunked","DecimalType","Dense","Dictionary","Diff","Distinct","Divide","DropNans","Dtype","DtypeColumn","Duplicate","Duration","Duration","Duration","Duration","Duration","DurationArgs","DurationChunked","DurationMethods","DurationType","DynArgs","DynamicGroupOptions","Eq","EqValidity","Err","Err","Error","Exclude","Excluded","Explode","Explode","Expr","ExprEvalExtension","ExtContext","Extension","FLOAT_RE","Field","FieldsMapper","FileMetaDataRef","FillNull","FillNullLimit","FillNullStrategy","Filter","First","First","First","FixedSizeBinary","FixedSizeList","FixedSizeListType","Flat","Float16","Float32","Float32","Float32","Float32","Float32Chunked","Float32Type","Float64","Float64","Float64","Float64","Float64Chunked","Float64Type","Floor","FloorDivide","Fortran","Forward","Forward","ForwardFill","Friday","FromData","FromDataBinary","FromDataUtf8","FuncRet","Function","FunctionExpr","FunctionOutputField","FxHash","GetAnyValue","GetOutput","Global","GlobalFinished","GroupBy","GroupByMethod","Groups","GroupsIdx","GroupsIndicator","GroupsProxy","GroupsProxyIter","GroupsProxyParIter","GroupsSlice","GroupsToRows","Gt","GtEq","Gzip","GzipLevel","HStack","HashMap","Higher","IDX_DTYPE","INTEGER_RE","Idx","Idx","IdxArr","IdxCa","IdxItem","IdxSize","IdxType","Implode","Implode","IndexOfSchema","IndexOrder","IndexToUsize","InitHashMaps","Inner","InnerJoinIds","Int128Chunked","Int128Type","Int16","Int16","Int16","Int16","Int16Chunked","Int16Type","Int32","Int32","Int32","Int32","Int32Chunked","Int32Type","Int64","Int64","Int64","Int64","Int64Chunked","Int64Type","Int8","Int8","Int8","Int8","Int8Chunked","Int8Type","Interpolate","InterpolationMethod","Interval","IntoGroupsProxy","IntoLazy","IntoListNameSpace","IntoSeries","IntoVec","InvalidOperation","Io","IpcCompression","IpcReader","IpcStreamReader","IpcStreamWriter","IpcStreamWriterOption","IpcWriter","IpcWriterOption","IpcWriterOptions","IsFinite","IsFirstDistinct","IsFirstDistinct","IsFloat","IsIn","IsInfinite","IsLastDistinct","IsLastDistinct","IsNan","IsNotNan","IsNotNull","IsNull","Item","Join","Join","JoinArgs","JoinBuilder","JoinDispatch","JoinOptions","JoinType","JoinValidation","Json","JsonFormat","JsonLineReader","JsonLines","JsonReader","JsonWriter","KeepName","LZ4","Label","LargeBinary","LargeBinaryArray","LargeList","LargeListArray","LargeStringArray","LargeUtf8","Last","Last","Last","LazyCsvReader","LazyFileListReader","LazyFrame","LazyGroupBy","LazyJsonLineReader","Left","Left","Left","LeftJoinIds","Lexical","LhsNumOps","Linear","Linear","List","List","List","ListBinaryChunkedBuilder","ListBooleanChunkedBuilder","ListBuilderTrait","ListChunked","ListExpr","ListFromIter","ListNameSpace","ListNameSpaceExtension","ListNameSpaceImpl","ListPrimitiveChunkedBuilder","ListType","ListUtf8ChunkedBuilder","Literal","Literal","LiteralValue","Local","Local","Logical","LogicalPlan","LogicalType","LossyUtf8","Lower","LowerBound","Lt","LtEq","Lz4Raw","Lzo","ManyToMany","ManyToOne","Map","MapFunction","Max","Max","Max","Max","MaxBound","MaxHorizontal","Mean","Mean","Mean","Median","Median","MeltArgs","Microsecond","Microseconds","Midpoint","Millisecond","Milliseconds","Min","Min","Min","Min","MinBound","MinHorizontal","Minus","Modulus","Monday","Multiply","MutableBitmapExtension","NULL","NUnique","NUnique","Name","Named","NamedFrom","NamedFromOwned","NanMax","NanMin","Nanosecond","Nanoseconds","Native","Nearest","Nearest","Nearest","Necessary","Nested","Never","NewChunkedArray","NoData","NoNull","NonNumeric","None","None","None","None","None","Not","NotEq","NotEqValidity","Nth","Null","Null","Null","Null","Null","NullCount","NullValues","NumOpsDispatch","NumOpsDispatchChecked","NumericNative","Object","Object","ObjectChunked","ObjectOwned","ObjectType","Ok","Ok","One","OneToMany","OneToOne","Operator","OptState","Or","Ordinal","OutOfBounds","Outer","Output","Over","OwnedObject","ParallelStrategy","ParquetCompression","ParquetReader","ParquetWriteOptions","ParquetWriter","PartitionedAggregation","PathIterator","Physical","Physical","PhysicalExpr","PhysicalIoHelper","PlHashMap","PlHashSet","PlIdHashMap","PlIndexMap","PlIndexSet","Plus","PolarsArray","PolarsDataType","PolarsError","PolarsFloatType","PolarsIntegerType","PolarsIterator","PolarsMonthEnd","PolarsMonthStart","PolarsNumericType","PolarsObject","PolarsResult","PolarsRound","PolarsTemporalGroupby","PolarsTruncate","PolarsType","PolarsUpsample","Pow","PrimitiveChunkedBuilder","Projection","Quantile","Quantile","QuantileAggSeries","QuantileInterpolOptions","QuoteStyle","Random","Random","Range","Range","RankMethod","RankOptions","Reinterpret","RenameAlias","RenameAliasFn","RevMapping","RevMappingBuilder","Reverse","Right","Right","Rolling","RollingCovOptions","RollingGroupOptions","RollingOptions","RollingOptionsFixedWindow","RollingOptionsImpl","RollingQuantileParams","RollingSeries","RollingVarParams","Round","RowGroups","Saturday","Scan","ScanArgsAnonymous","ScanArgsIpc","ScanArgsParquet","Schema","SchemaFieldNotFound","SchemaMismatch","SchemaRef","Second","Selection","Selector","SerReader","SerWriter","SerializeOptions","Series","Series","SeriesBinaryUdf","SeriesJoin","SeriesMethods","SeriesOpsTime","SeriesRank","SeriesSealed","SeriesTrait","SeriesUdf","SetSortedFlag","ShapeMismatch","Shift","ShiftAndFill","ShrinkType","Sink","Slice","Slice","Slice","Slice","SlicedArray","SlicedGroups","Snappy","Some","Some","Sort","Sort","SortBy","SortMultipleOptions","SortOptions","SpecialEq","StartBy","StaticArray","Std","Std","StrHashLocal","StringCacheMismatch","StringExpr","StrptimeOptions","Struct","Struct","Struct","StructArray","StructChunked","StructExpr","StructFieldNotFound","StructNameSpace","StructOwned","Structure","SubPlan","Sum","Sum","SumHorizontal","Sunday","Take","TemporalExpr","TemporalMethods","Ternary","Then","Thursday","Time","Time","Time","Time32","Time64","TimeChunked","TimeMethods","TimeType","TimeUnit","TimeZone","Timestamp","ToDummies","ToPhysical","TrueDivide","Tuesday","UInt16","UInt16","UInt16","UInt16","UInt16Chunked","UInt16Type","UInt32","UInt32","UInt32","UInt32","UInt32Chunked","UInt32Type","UInt64","UInt64","UInt64","UInt64","UInt64Chunked","UInt64Type","UInt8","UInt8","UInt8","UInt8","UInt8Chunked","UInt8Type","UdfSchema","Uncompressed","Union","Union","UnionArgs","Unique","UniqueKeepStrategy","Unknown","UpperBound","UserDefinedFunction","Utf8","Utf8","Utf8","Utf8","Utf8","Utf8Chunked","Utf8ChunkedBuilder","Utf8Methods","Utf8NameSpaceImpl","Utf8Owned","Utf8Type","ValueCounts","ValueIterT","ValueSize","ValueT","Var","Var","VarAggSeries","VecHash","Wednesday","When","Wildcard","Window","Window","WindowBound","WindowMapping","WindowType","Xor","ZSTD","Zero","ZeroablePhysical","ZeroableValueT","Zstd","ZstdLevel","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_create_left_df_from_slice","_finish_left_join","_finish_with_scan_ops","_fx_hash","_join_suffix_name","_left_join_from_series","_outer_join_from_series","_sort_or_hash_inner","_sum_as_series","_to_dummies","_with_eager","abs","add","add","add_ms","add_ns","add_to","add_us","agg","agg_groups","aggregations","alias","all","all","all_horizontal","allocator","allow_parallel","allow_parallel","allows_predicate_pushdown","allows_projection_pushdown","allows_projection_pushdown","allows_slice_pushdown","ambiguous","and","anonymous_scan","any","any_horizontal","append","append_null","append_null","append_opt_series","append_option","append_series","append_value","apply","apply","apply","apply_binary","apply_children","apply_kernel","apply_kernel_cast","apply_many","apply_many_private","apply_multiple","apply_to_slice","apply_values","arange","arced","arg_max","arg_max","arg_max","arg_min","arg_min","arg_min","arg_sort","arg_sort","arg_sort","arg_sort_by","arg_sort_multiple","arg_unique","arg_unique","arg_unique","arg_where","args","arity","arr","arr_from_iter","arr_from_iter_trusted","arr_from_iter_trusted_with_dtype","arr_from_iter_with_dtype","array","arrow_schema","arrow_schema","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_binary","as_date","as_date_not_exact","as_datetime","as_datetime_not_exact","as_expression","as_fd","as_list","as_partitioned_aggregator","as_ptr","as_raw_fd","as_ref","as_ref","as_ref_dtype","as_series","as_single_ptr","as_slice","as_slice_mut","as_stats_evaluator","as_stats_evaluator","as_struct","as_time","as_utf8","assume_init","assume_init","avg","backward_fill","base64_decode","base64_encode","base_utc_offset","batch_size","batched","batched","batched","batched","batched_borrowed_mmap","batched_borrowed_read","batched_mmap","batched_read","binary","binary","binary_expr","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_k","boxed","builder","by","by","cache","cache","cache","cache","call","call","call_udf","call_udf","call_unchecked","capacity","capacity","cast","cast","cast","cast","cast","cast","cast_all","cast_unchecked","cat","cat","cause","cbrt","ceil","center","center","center","check_sorted","check_sorted","checked_div","checked_div","checked_div_num","chunk_lengths","chunkedarray","chunks","chunks_mut","clip","clip","clip_max","clip_max","clip_min","clip_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closed_window","closed_window","closed_window","closed_window","cloud","cloud_options","cloud_options","cmp","cmp","coalesce","col","collect","collect_all","collect_arr","collect_arr_trusted","collect_arr_trusted_with_dtype","collect_arr_with_dtype","collect_ca","collect_ca_like","collect_ca_trusted","collect_ca_trusted_like","collect_ca_trusted_with_dtype","collect_ca_with_dtype","cols","columns_to_dummies","compare","compare","compression","compression","concat","concat","concat_expr","concat_impl","concat_impl","concat_lf_diagonal","concat_list","concat_str","contains","contains","contains","contains","contains_chunked","contains_chunked","contains_literal","count","count","count_matches","count_matches_many","cov","create_writer","create_writer","cross_join","cross_join","cross_join_dfs","cumcount","cumfold_exprs","cummax","cummax","cummin","cummin","cumprod","cumprod","cumreduce_exprs","cumsum","cumsum","cumulative_eval","data_pagesize_limit","data_type","data_type","data_type","datatypes","date_format","date_ranges","datetime","datetime","datetime_format","datetime_range","datetime_ranges","datetime_to_timestamp_ms","datetime_to_timestamp_ns","datetime_to_timestamp_us","day","day","day","day","days","days","days","days_only","ddof","ddof","decrement_strong_count","decrement_strong_count_in","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_arrays","default_join_ids","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","descending","descending","descending","describe","describe_optimized_plan","describe_plan","description","df","df","diff","diff","div","div","divide","dot","dot","downcast","downcast_unchecked","downgrade","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_columns","drop_nans","drop_nulls","drop_nulls","drop_nulls","dst_offset","dt","dt","dtype","dtype","dtype","dtype_col","dtype_cols","duration","eager","eager","encode_hex","encode_hex_upper","ends_with","ends_with_chunked","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_missing","equal","equal_missing","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","evaluate","evaluate","evaluate_on_groups","evaluate_partitioned","every","exact","exclude","exclude_dtype","execute","explain","explode","explode","explode","explode_and_offsets","expr","expr","extension","extension","extract","extract_all","extract_all_many","extract_groups","fast_explode","fast_projection","fast_projection","fetch","field","field","field_by_index","field_by_name","fields","fields","file_caching","file_caching","fill_nan","fill_nan","fill_null","fill_null","fill_null","fill_null_with_values","filter","filter","filter","filter","filter","finalize","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish_no_glob","finish_no_glob","finish_no_glob","finish_with_scan_ops","first","first","first","first","fixed_size_list","flatten","float_precision","float_type","floor","floor_div","floor_div_series","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_group_by_column","fmt_str","fn_params","fn_params","fn_params","fold_exprs","force_parallel","force_parallel","format","format_str","forward_fill","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data_default","from_data_unchecked_default","from_data_unchecked_default","from_iter","from_iter","from_iter","from_iter","from_iter_binary_trusted_len","from_iter_bool_trusted_len","from_iter_options","from_iter_primitive_trusted_len","from_iter_trusted_length","from_iter_trusted_length","from_iter_utf8_trusted_len","from_iter_values","from_par_iter","from_par_iter","from_path","from_path","from_raw","from_raw_in","from_slice","from_slice_options","from_trusted_len_iter_rev","from_trusted_len_iter_rev","from_type","from_vec","from_vec","from_zeroable_vec","full","full","full_null","fun","function_with_options","gather","gather_skip_nulls","ge","get","get","get","get","get_any_value","get_any_value","get_any_value_unchecked","get_any_value_unchecked","get_at_index","get_at_index_mut","get_categories","get_current_optimizations","get_datatype","get_dtype","get_earliest_bounds_ms","get_earliest_bounds_ns","get_earliest_bounds_us","get_field","get_field","get_field","get_fields","get_fields_lens","get_full","get_k","get_metadata","get_mut","get_mut_unchecked","get_names","get_names","get_names","get_object","get_output","get_overlapping_bounds_iter","get_reader_bytes","get_schema","get_unchecked","get_unchecked","get_unchecked","get_values_size","group_by","group_by_dynamic","group_by_dynamic","group_by_rolling","group_by_rolling","group_by_stable","group_by_values","group_by_windows","group_tuples","gt","gt","gt","gt_eq","gt_eq","has_header","has_header","has_header","has_header","has_validity","has_validity","has_window_function","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash_join_inner","hash_join_outer","head","head","head","hex_decode","hex_encode","hive_partitioning","hor_str_concat","hour","hour","hour","hour","hours","hours","how","how","id_vars","implode","in_nanoseconds_window","include_boundaries","increment_strong_count","increment_strong_count_in","index_column","index_column","index_of","index_of","index_of","indexes_to_usizes","infer_schema","infer_schema_len","infer_schema_len","infer_schema_length","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_array","inner_join","inner_join","input_fields","insert_at_index","int_range","int_ranges","interpol","interpolate","interpolate","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_data","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_list_name_space","into_list_name_space","into_raw","into_series","into_series","into_vec","is_constant_duration","is_empty","is_empty","is_f32","is_f64","is_finite","is_first_distinct","is_first_distinct","is_first_distinct","is_float","is_full_days","is_in","is_in","is_infinite","is_last_distinct","is_last_distinct","is_last_distinct","is_leap_year","is_leap_year","is_leap_year","is_literal","is_nan","is_nan","is_not_nan","is_not_null","is_not_null","is_not_null","is_null","is_null","is_null","is_nullable","is_read_vectored","is_series","is_sorted","is_tty","is_valid_aggregation","is_valid_join","is_write_vectored","is_zero","iso_year","iso_year","iso_year","iter","iter","iter","iter_dtypes","iter_fields","iter_names","iter_paths","join","join","join","join_asof","join_builder","join_literal","join_many","keep_name","known_schema","label","last","last","last","last","last","lazy","le","left_by","left_join","left_join","left_on","len","len","len","len","limit","limit","line_terminator","list","lit","lit","lit","lit","logical_plan","logical_plan","low_memory","low_memory","low_memory","low_memory","low_memory","lower_bound","lst_arg_max","lst_arg_min","lst_concat","lst_diff","lst_get","lst_join","lst_lengths","lst_max","lst_mean","lst_min","lst_reverse","lst_shift","lst_slice","lst_sort","lst_sum","lst_unique","lst_unique_stable","lt","lt","lt","lt_eq","lt_eq","maintain_order","maintain_order","maintain_order","maintain_order","make_mut","map","map","map_alias","map_binary","map_children","map_datetime_dtype_timezone","map_dtype","map_dtype","map_dtypes","map_field","map_fields","map_list","map_list_multiple","map_many","map_many_private","map_multiple","map_numeric_to_float_dtype","map_to_float_dtype","map_to_list_inner_dtype","map_to_list_supertype","map_to_supertype","materialize_projection","max","max","max","max","max","max","max_as_series","max_as_series","max_horizontal","mean","mean","mean","mean","mean","mean","median","median","median","median","median","median_as_series","median_as_series","melt","memmap","memory_mapped","merge","merge_dtypes","metadata","metadata","method","microsecond","microseconds","microseconds","milliseconds","milliseconds","min","min","min","min","min","min","min_as_series","min_as_series","min_horizontal","min_periods","min_periods","min_periods","min_periods","minute","minute","minute","minute","minutes","minutes","mode","mode","month","month","month","month","month_end","month_start","months","months_only","mul","mul","mul","multiply","multithreaded","multithreaded","mutate","n_chunks","n_rows","n_rows","n_rows","n_rows","n_rows","n_rows","n_unique","n_unique","n_unique","name","name","name","name","name","names","nan_max","nan_min","nan_propagating_aggregate","nanosecond","nanosecond","nanosecond","nanoseconds","nanoseconds","nanoseconds","ne","needs_checks","negative_to_usize","neq","neq_missing","nested_sum_type","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_cyclic","new_empty","new_from_index","new_from_index","new_in","new_inserting_at_index","new_null","new_paths","new_paths","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_batches","nodes","nodes_mut","not","not","not_equal","not_equal_missing","null","null","null_count","null_count","null_count","nulls_last","num_rows","offset","offset","offset","on","optimize","options","or","ordinal","ordinal","ordinal_day","ordinal_year","other","otherwise","otherwise","outer_join","outer_join","over","over_with_options","parallel","parallel","parse","parse_from_str_slice","parse_from_str_slice","parse_from_str_slice","parse_int","parsed_int","partial_cmp","partial_cmp","path","path","path","paths","paths","paths","pearson_corr","period","period","pi","pin","pin_in","polars_bail","polars_ensure","polars_err","polars_warn","pow","predicate_pushdown","predicate_pushdown","predicates","prefix","private_left_join_multiple_keys","prob","prod_as_series","product","profile","projection_pushdown","projection_pushdown","provide","ptr_eq","quantile","quantile","quantile","quantile","quantile_as_series","quantile_as_series","quarter","quarter","quarter","queue","quote_char","quote_style","raise_if_empty","raise_if_empty","rank","rank","read","read_buf","read_impl","read_parallel","read_to_end","read_to_string","read_varint","read_vectored","rechunk","rechunk","rechunk","rechunk","rechunk","rechunk","rechunk","reduce_exprs","reinterpret_signed","reinterpret_unsigned","rem","rem","remainder","remove","rename","rename","rename","rename_fields","repeat","repeat_by","repeat_by","replace","replace_all","replace_literal","replace_literal_all","replace_time_zone","reshape","resolve_homedir","return_type","reverse","reverse","reverse","reverse","reverse","right_by","right_on","rolling","rolling_corr","rolling_cov","rolling_map","rolling_map","rolling_map","rolling_map_float","rolling_max","rolling_max","rolling_mean","rolling_mean","rolling_median","rolling_median","rolling_min","rolling_min","rolling_quantile","rolling_quantile","rolling_std","rolling_std","rolling_sum","rolling_sum","rolling_var","rolling_var","round","round","round_ms","round_ns","round_us","row_count","row_count","row_count","row_count","row_count","row_count","row_group_size","rows_left","rows_right","same_type","same_type","sample_frac","sample_n","sample_size","scan","scan","scan_ipc","scan_ipc_files","scan_parquet","scan_parquet_files","schema","schema","schema","schema","schema","schema","schema","schema","second","second","second","second","seconds","seconds","seek","select","select_seq","separator","serialize_options","series","set","set_at_idx","set_at_idx2","set_at_idx_with","set_bit_unchecked","set_dtype","set_dtype_at_index","set_known_schema","set_low_memory","set_ordering","set_parallel","set_rechunk","set_rechunk","set_rechunk","set_rechunk","set_rechunk","set_sorted_flag","set_validity","shift","shift","shift","shift","shift","shift_and_fill","shift_and_fill","shift_and_fill","shift_remove","shift_remove_index","shrink_dtype","shrink_to_fit","shrink_to_fit","shuffle","simplify_expr","simplify_expr","sink_csv","sink_ipc","sink_parquet","skip_rows","skip_rows","slice","slice","slice","slice","slice","slice","slice","slice","slice_pushdown","slice_pushdown","slice_typed","slice_typed","slice_typed_unchecked","slice_typed_unchecked","slice_unchecked","slice_unchecked","sliced","sliced_unchecked","sort","sort","sort","sort","sort","sort_by","sort_by_exprs","sort_with","sort_with","sort_with","source","spawn_local_obj","spawn_obj","spearman_rank_corr","split","split_exact","split_exact_inclusive","split_helper","split_inclusive","split_to_struct","splitn","sqrt","start_by","starts_with","starts_with_chunked","statistics","status","status_local","std","std","std","std_as_series","std_as_series","str","str_concat","str_len_bytes","str_len_chars","str_slice","strategy","streamable","streaming","streaming","strftime","strict","strict_cast","string","strip_chars","strip_chars","strip_chars_end","strip_chars_end","strip_chars_start","strip_chars_start","strip_prefix","strip_prefix","strip_suffix","strip_suffix","strong_count","struct_","sub","sub","subtract","suffix","suffix","suffix","suffix","sum","sum","sum","sum","sum","sum","sum_as_series","sum_horizontal","super_type","sync_update","tail","tail","tail","tail","take","take","take","take_slice","take_slice_unchecked","take_unchecked","take_unchecked","ternary_expr","then","then","tile","time_format","time_ranges","time_unit","time_unit","time_zone","timestamp","to_alp","to_alp","to_alp_optimized","to_anyvalue","to_arrow","to_boxed","to_byte_slices","to_dot","to_dot","to_dummies","to_dummies","to_field","to_field","to_lowercase","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical_type","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_supertype","to_supertypes","to_titlecase","to_uppercase","tolerance","tolerance_str","top_k","truncate","truncate_impl","truncate_ms","truncate_ms","truncate_no_offset_ms","truncate_no_offset_ns","truncate_no_offset_us","truncate_ns","truncate_ns","truncate_ragged_lines","truncate_ragged_lines","truncate_us","truncate_us","try_apply","try_arr_from_iter","try_arr_from_iter_trusted","try_arr_from_iter_trusted_with_dtype","try_arr_from_iter_with_dtype","try_collect_arr","try_collect_arr_trusted","try_collect_arr_trusted_with_dtype","try_collect_arr_with_dtype","try_collect_ca","try_collect_ca_like","try_collect_ca_trusted","try_collect_ca_trusted_like","try_collect_ca_trusted_with_dtype","try_collect_ca_with_dtype","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get_at_index","try_get_field","try_get_full","try_get_mut","try_index_of","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map_dtype","try_map_dtypes","try_map_field","try_new","try_new","try_new","try_new","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_pin","try_pin_in","try_serialize","try_unwrap","tu","type_coercion","type_coercion","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","tz","udf","unique","unique","unique","unique","unique","unique","unique_stable","unique_stable","unique_stable","unique_stable","unix_time","unnest","unwrap","unwrap_or_clone","upper_bound","upsample","upsample_stable","use_statistics","use_statistics","utils","validate","validation","validity","validity","value","value_counts","value_counts","value_name","value_unchecked","value_vars","values","values_iter","values_iter","var","var","var","var_as_series","var_as_series","variable_name","vec_hash","vec_hash_combine","view","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weak_count","week","week","week","weekday","weekday","weekday","weekday","weeks","weeks","weeks_only","weights","weights","weights","when","when","when","window_size","window_size","window_size","window_size","with","with_ambiguous","with_batch_size","with_batch_size","with_batch_size","with_cache","with_capacity","with_capacity","with_chunk_size","with_chunk_size","with_column","with_column","with_columns","with_columns","with_columns","with_columns","with_columns","with_columns_seq","with_comment_char","with_comment_char","with_compression","with_compression","with_compression","with_compression","with_compression","with_context","with_data_pagesize_limit","with_date_format","with_datetime_format","with_day","with_days","with_dtype","with_dtype_overwrite","with_dtypes","with_dtypes_slice","with_encoding","with_encoding","with_end_of_line_char","with_end_of_line_char","with_extension","with_extension","with_float_precision","with_fractional_seconds","with_hive_partition_columns","with_hms","with_hms","with_hour","with_hours","with_ignore_errors","with_ignore_errors","with_ignore_errors","with_infer_schema_length","with_infer_schema_length","with_json_format","with_json_format","with_line_terminator","with_metadata","with_metadata","with_microsecond","with_microseconds","with_milliseconds","with_minute","with_minutes","with_missing_is_null","with_missing_is_null","with_month","with_n_rows","with_n_rows","with_n_rows","with_n_rows","with_n_rows","with_n_rows","with_n_rows","with_n_threads","with_n_threads","with_nanoseconds","with_null_value","with_null_values","with_null_values","with_optimizations","with_path","with_path","with_path","with_path","with_path","with_paths","with_paths","with_paths","with_predicate","with_predicate_pushdown","with_projection","with_projection","with_projection","with_projection","with_projection","with_projection_pushdown","with_quote_char","with_quote_char","with_quote_char","with_quote_style","with_rechunk","with_rechunk","with_rechunk","with_rechunk","with_rechunk","with_row_count","with_row_count","with_row_count","with_row_count","with_row_count","with_row_count","with_row_count","with_row_group_size","with_same_dtype","with_schema","with_schema","with_schema","with_schema","with_schema","with_schema_modify","with_schema_overwrite","with_schema_overwrite","with_second","with_seconds","with_separator","with_separator","with_separator","with_simplify_expr","with_skip_rows","with_skip_rows","with_skip_rows_after_header","with_skip_rows_after_header","with_slice_pushdown","with_statistics","with_streaming","with_time_format","with_time_unit","with_time_zone","with_try_parse_dates","with_try_parse_dates","with_type_coercion","with_validity","with_validity","with_validity_typed","with_weeks","with_year","without_optimizations","write","write_varint","write_vectored","xor","year","year","year","year","zip","zip_with","expr","input","input","interpol","propagate_nans","propagate_nans","quantile","ignore_nulls","ignore_nulls","by","by","data_type","descending","expr","expr","expr","expr","expr","falsy","function","function","function","function","idx","input","input","input","input","left","length","offset","op","options","options","options","options","output_type","partition_by","predicate","right","strict","truthy","ddof","decimals","has_max","has_min","limit","limit","method","method","parallel","periods","reverse","reverse","reverse","reverse","reverse","seed","sort","super_type","groups","rolling","data_type","high","low","aggs","apply","args","by_column","contexts","count","df","err","expr","exprs","file_info","file_options","function","id","input","input","input","input","input","input","input","input","input","input","input","input","input_left","input_right","inputs","keys","left_on","len","maintain_order","offset","options","options","options","options","options","options","output_schema","path","payload","predicate","predicate","projection","right_on","scan_type","schema","schema","schema","schema","schema","schema","selection","AggList","TakeExtremum","_agg_helper_idx","_agg_helper_idx_no_null","_agg_helper_slice","_agg_helper_slice_no_null","_rolling_apply_agg_window_no_nulls","_rolling_apply_agg_window_nulls","_slice_from_offsets","_use_rolling_kernels","agg_list","take_max","take_min","BinaryFnMut","Ret","Ret","TernaryFnMut","binary","binary_elementwise","binary_elementwise_for_each","binary_elementwise_values","binary_mut_with_options","binary_unchecked_same_type","ternary_elementwise","try_binary","try_binary_elementwise","try_binary_elementwise_values","try_binary_unchecked_same_type","try_ternary_elementwise","ArrayNameSpace","AsArray","array_max","array_min","array_sum","array_unique","array_unique_stable","as_array","BinaryNameSpace","borrow","borrow_mut","contains_literal","deref","deref_mut","drop","ends_with","from","init","into","starts_with","try_from","try_into","type_id","vzip","CategoricalNameSpace","CategoricalOrdering","Lexical","Physical","DateMethods","DatetimeMethods","DurationMethods","RollingOptions","RollingOptionsImpl","SeriesOpsTime","TimeMethods","Utf8Methods","__clone_box","as_date","as_date_not_exact","as_datetime","as_datetime_not_exact","as_time","borrow","borrow_mut","by","by","center","center","clone","clone_into","closed_window","closed_window","day","day","days","default","deref","deref_mut","drop","fn_params","fn_params","from","hour","hour","hours","init","into","is_leap_year","is_leap_year","iso_year","iso_year","microseconds","milliseconds","min_periods","min_periods","minute","minute","minutes","month","month","nanosecond","nanosecond","nanoseconds","ordinal","ordinal","parse_from_str_slice","parse_from_str_slice","parse_from_str_slice","quarter","quarter","rolling_max","rolling_mean","rolling_median","rolling_min","rolling_quantile","rolling_std","rolling_sum","rolling_var","second","second","seconds","to_owned","try_from","try_into","tu","type_id","tz","unix_time","utf8","vzip","week","week","weekday","weekday","weights","weights","window_size","window_size","year","year","AsUtf8","DateDMY","DateYMD","DatetimeDMY","DatetimeYMD","DatetimeYMDZ","Pattern","Utf8Methods","__clone_box","as_date","as_date_not_exact","as_datetime","as_datetime_not_exact","as_time","as_utf8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash","infer","init","into","is_inferable","to_owned","try_from","try_into","type_id","vzip","DatetimeInfer","Error","StrpTimeParser","TryFromWithUnit","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","infer_pattern_single","init","into","logical_type","parse","parse_bytes","parse_bytes","parse_bytes","pattern","to_owned","try_from","try_from_with_unit","try_from_with_unit","try_from_with_unit","try_into","type_id","vzip","Aws","Azure","CloudOptions","CloudType","File","Gcp","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","from","from","from_str","from_untyped_config","init","init","into","into","max_retries","options","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Aws","Azure","CloudOptions","CloudType","File","Gcp","max_retries","AnyValue","Array","Array","Array","ArrayChunked","ArrayCollectIterExt","ArrayFromIter","ArrayFromIterDtype","ArrowDataType","ArrowTimeUnit","AsRefDataType","Binary","Binary","Binary","BinaryChunked","BinaryOwned","BinaryType","Boolean","Boolean","Boolean","BooleanChunked","BooleanType","CatIter","Categorical","Categorical","CategoricalChunked","CategoricalChunkedBuilder","CategoricalType","ChunkId","DataType","Date","Date","Date32","Date64","DateChunked","DateType","Datetime","Datetime","DatetimeChunked","DatetimeType","Decimal","Decimal","Decimal","Decimal256","DecimalChunked","DecimalType","Dictionary","Duration","Duration","Duration","DurationChunked","DurationType","Extension","Field","FixedSizeBinary","FixedSizeList","FixedSizeListType","Flat","Float16","Float32","Float32","Float32","Float32Chunked","Float32Type","Float64","Float64","Float64","Float64Chunked","Float64Type","GetAnyValue","Global","GlobalFinished","HashMap","IDX_DTYPE","IdxArr","IdxCa","IdxSize","IdxType","InitHashMaps","Int128Chunked","Int128Type","Int16","Int16","Int16","Int16Chunked","Int16Type","Int32","Int32","Int32","Int32Chunked","Int32Type","Int64","Int64","Int64","Int64Chunked","Int64Type","Int8","Int8","Int8","Int8Chunked","Int8Type","Interval","LargeBinary","LargeList","LargeUtf8","List","List","List","ListChunked","ListType","Local","Local","Logical","LogicalType","Map","Microsecond","Microseconds","Millisecond","Milliseconds","Nanosecond","Nanoseconds","Native","Nested","Null","Null","Null","NumericNative","Object","Object","ObjectChunked","ObjectOwned","ObjectType","OwnedObject","Physical","PlHashMap","PlHashSet","PlIdHashMap","PlIndexMap","PlIndexSet","PolarsDataType","PolarsFloatType","PolarsIntegerType","PolarsNumericType","PolarsType","RevMapping","RevMappingBuilder","Second","StaticArray","StrHashLocal","Struct","Struct","Struct","StructChunked","StructOwned","Structure","Time","Time","Time32","Time64","TimeChunked","TimeType","TimeUnit","TimeZone","Timestamp","UInt16","UInt16","UInt16","UInt16Chunked","UInt16Type","UInt32","UInt32","UInt32","UInt32Chunked","UInt32Type","UInt64","UInt64","UInt64","UInt64Chunked","UInt64Type","UInt8","UInt8","UInt8","UInt8Chunked","UInt8Type","Union","Unknown","Utf8","Utf8","Utf8","Utf8Chunked","Utf8Owned","Utf8Type","ValueIterT","ValueT","ZeroablePhysical","ZeroableValueT","arr_from_iter","arr_from_iter_trusted","arr_from_iter_trusted_with_dtype","arr_from_iter_with_dtype","as_ref_dtype","as_slice","cast","categorical","collect_arr","collect_arr_trusted","collect_arr_trusted_with_dtype","collect_arr_with_dtype","dtype","dtype","from_vec","from_zeroable_vec","get","get_any_value","get_any_value_unchecked","get_dtype","get_unchecked","get_unchecked","iter","last","merge_dtypes","name","new","try_arr_from_iter","try_arr_from_iter_trusted","try_arr_from_iter_trusted_with_dtype","try_arr_from_iter_with_dtype","try_collect_arr","try_collect_arr_trusted","try_collect_arr_trusted_with_dtype","try_collect_arr_with_dtype","value","value_unchecked","values_iter","with_capacity","with_validity_typed","CatIter","CategoricalChunked","CategoricalChunkedBuilder","Global","GlobalFinished","Local","Local","RevMapping","RevMappingBuilder","StrHashLocal","string_cache","StringCacheHolder","disable_string_cache","enable_string_cache","using_string_cache","replace_time_zone","FromData","FromDataBinary","FromDataUtf8","from_data_default","from_data_unchecked_default","from_data_unchecked_default","DateLikeNameSpace","base_utc_offset","borrow","borrow_mut","cast_time_unit","combine","convert_time_zone","date","datetime","day","deref","deref_mut","drop","dst_offset","from","hour","init","into","is_leap_year","iso_year","microsecond","millisecond","minute","month","nanosecond","ordinal_day","quarter","replace_time_zone","round","second","strftime","time","timestamp","to_string","truncate","try_from","try_into","type_id","vzip","week","weekday","with_time_unit","year","PhysicalAggExpr","evaluate","root_name","AnonymousBuilder","borrow","borrow_mut","default","deref","deref_mut","drop","finish","from","init","into","is_empty","new","push","push_null","try_from","try_into","type_id","vzip","width","check_bounds_ca","check_bounds_nulls","ChunkGatherSkipNulls","gather_skip_nulls","mode","COUNT","group_agg_nan_max_s","group_agg_nan_min_s","nan_max_s","nan_min_s","MutableNullArray","as_any","as_box","as_mut_any","borrow","borrow_mut","data_type","default","deref","deref_mut","drop","extend_nulls","fmt","from","init","into","len","push_null","reserve","shrink_to_fit","try_from","try_into","type_id","validity","vzip","BatchedCsvReaderMmap","BatchedCsvReaderRead","OwnedBatchedCsvReader","OwnedBatchedCsvReaderMmap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","next_batches","next_batches","next_batches","next_batches","to_batched_owned_mmap","to_batched_owned_read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AsSeries","TemporalMethods","as_series","day","hour","is_leap_year","iso_year","minute","month","nanosecond","ordinal_day","ordinal_year","quarter","second","strftime","timestamp","to_string","week","weekday","year","SlicedArray","slice_typed","slice_typed_unchecked","_broadcast_descending","arg_sort_multiple","arg_sort_no_nulls","sort_slice_ascending","sort_slice_descending","_get_rows_encoded","_get_rows_encoded_ca","_get_rows_encoded_compat_array","StringNameSpace","borrow","borrow_mut","concat","contains","contains_literal","count_matches","deref","deref_mut","drop","ends_with","explode","extract","extract_all","extract_groups","from","from_radix","init","into","len_bytes","len_chars","replace","replace_all","replace_n","slice","split","split_exact","split_exact_inclusive","split_inclusive","splitn","starts_with","strip_chars","strip_chars_end","strip_chars_start","strip_prefix","strip_suffix","strptime","to_date","to_datetime","to_decimal","to_lowercase","to_time","to_titlecase","to_uppercase","try_from","try_into","type_id","vzip","UserDefinedFunction","fun","input_fields","name","options","return_type","infer_file_schema","infer_file_schema_inner","is_compressed","Ascending","ChunkCompare","Descending","IntoSeries","IsSorted","Item","Not","Series","SeriesIter","SeriesPhysIter","SeriesTrait","__clone_box","__clone_box","_sum_as_series","_try_from_arrow_unchecked","abs","add","add","add","add","append","arg_max","arg_min","arg_sort","arg_unique","arithmetic","array","array_ref","as_any","as_any_mut","as_list","as_mut","as_ref","as_ref","as_series","as_series","as_single_ptr","as_single_ptr","binary","bitand","bitor","bitxor","bool","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast_unchecked","categorical","ceil","checked_div","checked_div","checked_div_num","chunk_lengths","chunks","chunks_mut","chunks_mut","clear","clone","clone","clone_inner","clone_into","clone_into","cummax","cummin","cumprod","cumsum","date","datetime","decimal","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","diff","div","div","div","div","drop","drop","drop","drop_nulls","dtype","duration","eq","eq","equal","equal","equal","equal","equal_missing","equal_missing","equal_missing","equal_missing","equivalent","equivalent","equivalent","equivalent","estimated_size","explode","extend","extend_constant","f32","f64","field","fill_null","filter","filter_threaded","floor","fmt","fmt","fmt","fmt_list","from","from","from","from","from","from","from","from","from_any_values","from_any_values_and_dtype","from_arrow","from_chunks_and_dtype_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","full_null","get","get_data_ptr","get_flags","get_object","get_unchecked","gt","gt","gt","gt","gt_eq","gt_eq","gt_eq","gt_eq","has_validity","head","i16","i32","i64","i8","idx","implementations","implode","init","init","init","into","into","into","into_frame","into_iter","into_series","into_series","is_empty","is_finite","is_infinite","is_nan","is_not_nan","is_not_null","is_null","is_series","is_series","is_sorted_flag","iter","len","limit","list","lit","lt","lt","lt","lt","lt_eq","lt_eq","lt_eq","lt_eq","max","max_as_series","mean","mean_as_series","median","median_as_series","min","min_as_series","mul","mul","mul","mul","n_chunks","n_unique","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_from_index","new_null","next","not_equal","not_equal","not_equal","not_equal","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","null","null_count","ops","phys_iter","product","quantile_as_series","rechunk","rem","rem","rem","rename","rename","reshape","reverse","rolling_map","round","sample_frac","sample_n","series_equal","series_equal_missing","set_sorted_flag","shift","shrink_to_fit","shrink_to_fit","shuffle","size_hint","slice","sort","sort_with","std_as_series","str_value","strict_cast","struct_","sub","sub","sub","sub","sum","sum_as_series","tail","take","take_every","take_slice","take_slice_unchecked","take_slice_unchecked_threaded","take_threaded","take_unchecked","take_unchecked_from_slice","take_unchecked_threaded","tile","time","to_arrow","to_dummies","to_float","to_owned","to_owned","to_physical_repr","to_string","try_add","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u16","u32","u64","u8","unique","unique_stable","unpack","unstable","utf8","var_as_series","vzip","vzip","vzip","with_name","zip_with","LhsNumOps","NumOpsDispatch","NumOpsDispatchInner","Output","_struct_arithmetic","add","add_to","add_to","checked","div","divide","divide","mul","multiply","multiply","rem","remainder","remainder","sub","subtract","subtract","NumOpsDispatchChecked","NumOpsDispatchCheckedInner","checked_div","checked_div","checked_div_num","checked_div_num","Drop","Ignore","NullBehavior","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","diff","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash","init","into","to_owned","try_from","try_into","type_id","vzip","ArrayBox","UnstableSeries","__clone_box","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","deep_clone","deref","deref_mut","drop","from","init","into","new","swap","to_owned","try_from","try_into","type_id","vzip","with_array"],"q":[[0,"polars"],[17,"polars::chunked_array"],[802,"polars::chunked_array::arithmetic"],[810,"polars::chunked_array::builder"],[1081,"polars::chunked_array::builder::list"],[1097,"polars::chunked_array::collect"],[1111,"polars::chunked_array::iterator"],[1237,"polars::chunked_array::iterator::par"],[1239,"polars::chunked_array::object"],[1298,"polars::chunked_array::object::builder"],[1321,"polars::chunked_array::object::registry"],[1331,"polars::chunked_array::ops"],[1506,"polars::chunked_array::ops::arity"],[1522,"polars::chunked_array::ops::gather"],[1524,"polars::chunked_array::ops::sort"],[1529,"polars::chunked_array::ops::sort::arg_sort_multiple"],[1532,"polars::chunked_array::temporal"],[1538,"polars::chunked_array::temporal::conversion"],[1541,"polars::chunked_array::upstream_traits"],[1542,"polars::datatypes"],[2745,"polars::datatypes::categorical"],[2756,"polars::datatypes::categorical::string_cache"],[2775,"polars::docs"],[2778,"polars::error"],[2875,"polars::error::constants"],[2878,"polars::frame"],[3136,"polars::frame::explode"],[3161,"polars::frame::group_by"],[3398,"polars::frame::group_by::GroupsProxy"],[3400,"polars::frame::group_by::aggregations"],[3413,"polars::frame::group_by::expr"],[3416,"polars::frame::row"],[3522,"polars::functions"],[3526,"polars::prelude"],[7661,"polars::prelude::AggExpr"],[7668,"polars::prelude::BooleanFunction"],[7670,"polars::prelude::Expr"],[7703,"polars::prelude::FunctionExpr"],[7721,"polars::prelude::GroupsProxy"],[7723,"polars::prelude::LiteralValue"],[7726,"polars::prelude::LogicalPlan"],[7781,"polars::prelude::aggregations"],[7794,"polars::prelude::arity"],[7810,"polars::prelude::array"],[7818,"polars::prelude::binary"],[7834,"polars::prelude::cat"],[7838,"polars::prelude::chunkedarray"],[7930,"polars::prelude::chunkedarray::utf8"],[7969,"polars::prelude::chunkedarray::utf8::infer"],[7999,"polars::prelude::cloud"],[8041,"polars::prelude::cloud::options"],[8048,"polars::prelude::datatypes"],[8284,"polars::prelude::datatypes::categorical"],[8295,"polars::prelude::datatypes::categorical::string_cache"],[8299,"polars::prelude::datetime"],[8300,"polars::prelude::default_arrays"],[8306,"polars::prelude::dt"],[8349,"polars::prelude::expr"],[8352,"polars::prelude::fixed_size_list"],[8372,"polars::prelude::gather"],[8374,"polars::prelude::gather_skip_nulls"],[8376,"polars::prelude::mode"],[8377,"polars::prelude::names"],[8378,"polars::prelude::nan_propagating_aggregate"],[8382,"polars::prelude::null"],[8407,"polars::prelude::read_impl"],[8467,"polars::prelude::series"],[8487,"polars::prelude::slice"],[8490,"polars::prelude::sort"],[8495,"polars::prelude::sort::arg_sort_multiple"],[8498,"polars::prelude::string"],[8546,"polars::prelude::udf"],[8552,"polars::prelude::utils"],[8555,"polars::series"],[8953,"polars::series::arithmetic"],[8974,"polars::series::arithmetic::checked"],[8980,"polars::series::ops"],[9008,"polars::series::unstable"],[9032,"dyn_clone::sealed"],[9033,"num_traits"],[9034,"num_traits::cast"],[9035,"core::result"],[9036,"core::option"],[9037,"core::iter::traits::iterator"],[9038,"polars_core::chunked_array::list::iterator"],[9039,"core::ops::function"],[9040,"core::marker"],[9041,"core::ops::function"],[9042,"alloc::alloc"],[9043,"alloc::boxed"],[9044,"core::slice::iter"],[9045,"core::iter::adapters::map"],[9046,"alloc::vec"],[9047,"core::iter::traits::double_ended"],[9048,"nano_arrow::offset"],[9049,"core::iter::traits::collect"],[9050,"core::fmt"],[9051,"core::fmt"],[9052,"core::convert"],[9053,"polars_arrow::trusted_len"],[9054,"alloc::string"],[9055,"core::marker"],[9056,"bitflags::iter"],[9057,"bitflags::iter"],[9058,"alloc::borrow"],[9059,"nano_arrow::bitmap::immutable"],[9060,"rayon::iter"],[9061,"core::marker"],[9062,"ndarray::dimension::dim"],[9063,"ndarray"],[9064,"ndarray"],[9065,"core::any"],[9066,"ahash::random_state"],[9067,"nano_arrow::array::primitive"],[9068,"core::clone"],[9069,"smartstring::config"],[9070,"smartstring"],[9071,"nano_arrow::array::boolean"],[9072,"nano_arrow::array::utf8"],[9073,"nano_arrow::array::binary"],[9074,"nano_arrow::array::list"],[9075,"nano_arrow::array::fixed_size_list"],[9076,"core::any"],[9077,"nano_arrow::bitmap::utils::zip_validity"],[9078,"core::hash"],[9079,"core::error"],[9080,"core::cmp"],[9081,"polars_row::row"],[9082,"chrono::naive::datetime"],[9083,"chrono::naive::time"],[9084,"core::convert"],[9085,"nano_arrow::datatypes::physical_type"],[9086,"chrono_tz::timezones"],[9087,"chrono::naive::date"],[9088,"chrono::duration"],[9089,"core::cmp"],[9090,"regex::error"],[9091,"nano_arrow::io::ipc::read::error"],[9092,"alloc::collections"],[9093,"core::str::error"],[9094,"alloc::string"],[9095,"simdutf8::basic"],[9096,"parquet2::error"],[9097,"core::fmt"],[9098,"hashbrown::set"],[9099,"core::ops::range"],[9100,"rayon::iter::plumbing"],[9101,"polars_plan::logical_plan::aexpr"],[9102,"core::iter::adapters::copied"],[9103,"core::iter::adapters::zip"],[9104,"nano_arrow::types::native"],[9105,"core::borrow"],[9106,"polars_io::predicates"],[9107,"polars_io::mmap"],[9108,"core::alloc"],[9109,"polars_plan::logical_plan::visitor"],[9110,"std::io"],[9111,"std::os::fd::owned"],[9112,"std::os::fd::owned"],[9113,"polars_io::predicates"],[9114,"polars_io::csv::write"],[9115,"std::io"],[9116,"polars_io::parquet::write"],[9117,"hashbrown::map"],[9118,"core::cmp"],[9119,"polars_plan::dot"],[9120,"alloc::sync"],[9121,"core::iter::traits::collect"],[9122,"polars_lazy::physical_plan::state"],[9123,"crossterm::command"],[9124,"std::path"],[9125,"std::fs"],[9126,"polars_plan::dsl::function_expr::range"],[9127,"polars_plan::dsl::function_expr::cat"],[9128,"polars_plan::dsl::function_expr::strings"],[9129,"polars_plan::dsl::function_expr::datetime"],[9130,"polars_plan::dsl::function_expr::binary"],[9131,"alloc::ffi::c_str"],[9132,"core::ffi::c_str"],[9133,"alloc::borrow"],[9134,"std::ffi::os_str"],[9135,"nano_arrow::array::growable::structure"],[9136,"nano_arrow::buffer::immutable"],[9137,"polars_plan::logical_plan::options"],[9138,"polars_plan::logical_plan"],[9139,"parquet2::metadata::file_metadata"],[9140,"polars_io::mmap"],[9141,"polars_plan::logical_plan::iterator"],[9142,"polars_io::parquet::read_impl"],[9143,"polars_io::options"],[9144,"polars_plan::logical_plan::alp"],[9145,"polars_utils::arena"],[9146,"polars_plan::logical_plan::aexpr"],[9147,"core::error"],[9148,"parquet_format_safe::thrift::varint::decode"],[9149,"std::io"],[9150,"std::io"],[9151,"futures_task::spawn"],[9152,"futures_task::spawn"],[9153,"alloc::collections::btree::map"],[9154,"std::io"],[9155,"polars_core::series::implementations::null"]],"d":["Polars crate version","","The typed heart of every Series column.","Data types supported by Polars.","","","Enable the global string cache.","","DataFrame module.","Functions","","","","Type agnostic columnar data structure.","Testing utilities.","","Check whether the global string cache is enabled.","","ChunkedArray","","","","","","","","","","","","","Convert all values to their absolute/positive value.","","","","","","","","","","","","","","","","","","","","","Returns whether all values in the array are <code>true</code>.","Get a flags value with all known bits set.","Returns whether all values in the column are <code>true</code>.","This is an iterator over a <code>ListChunked</code> that save …","This is an iterator over a <code>ListChunked</code> that save …","Safety","","Returns whether any of the values in the column are <code>true</code>.","Returns whether any of the values in the column are <code>true</code>.","Append in place. This is done by adding the chunks of <code>other</code>…","","","","","","","Apply a closure <code>F</code> elementwise.","Apply a closure <code>F</code> elementwise.","","","","Cast a numeric array to another numeric data type and …","","","","","","","","","","","","Applies a function only to the non-null elements, …","Utility that reuses an string buffer to amortize …","Ignore the list indices and apply <code>func</code> to the inner type …","Ignore the list indices and apply <code>func</code> to the inner type …","","","","","","","","","","","Apply a closure <code>F</code> elementwise.","","","","","","","","","Panics","Panics","","Panics","Panics","Panics","","","","","","","","Implementations of arithmetic operations on ChunkedArray’…","","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","Implementations of the ChunkCast Trait.","","","","","","","Cast a numeric array to another numeric data type and …","","","","","","","","","Unique id representing the number of chunks","A reference to the chunks","A mutable reference to the chunks","","","","","Methods for collecting into a ChunkedArray.","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Contiguous slice","Whether all set bits in a source flags value are also set …","","","","","Get slices of the underlying arrow data. NOTE: null values …","","","","","","","","","The intersection of a source flags value with the …","","","","","","","","","","Get data type of <code>ChunkedArray</code>.","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","","","","","","","","","Extend the memory backed by this array with the values …","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Get the index of the first non null value in this …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","","","Create a new <code>ChunkedArray</code> from existing chunks.","Create a new <code>ChunkedArray</code> from existing chunks.","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Get a flags value with the bits of a flag with the given …","","","","","","","","","","","","","","","","","","","Create a new ChunkedArray by taking ownership of the Vec. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the inner values as <code>Series</code>, ignoring the list offsets.","Get the inner values as <code>Series</code>","Get a hold to an object that can be formatted or …","Get a hold to an object that can be formatted or …","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return if any the chunks in this <code>ChunkedArray</code> have a …","Get the head of the <code>ChunkedArray</code>","","","","","Get the inner data type of the fixed size list.","Get the inner data type of the list.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Whether all known bits in this flags value are set.","Check if ChunkedArray is empty.","Whether all bits in this flags value are unset.","","","","","Get a mask of the valid values.","Get a mask of the null values.","Returns true if contains a single chunk and has no null …","","Yield a set of contained flags values.","Yield a set of contained named flags values.","Get the buffer of bits representing null values","","","Get the index of the last non null value in this …","","Get the length of the ChunkedArray","Apply lhs / self","Apply lhs % self","Apply lhs - self","Take a view of top n elements","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a temporary <code>ChunkedArray</code> from a slice.","Create a temporary <code>ChunkedArray</code> from a slice.","","","","","","","","","Name of the <code>ChunkedArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nullify values in slice with an existing null bitmap","","Specialization that prevents an allocation prefer this …","Convert missing values to <code>NaN</code> values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","","","","","","","","","","Count the null values.","","Traits for miscellaneous operations on ChunkedArray","","","","","","","","","","","","Create <code>ChunkedArray</code> with samples from a Bernoulli …","Create <code>ChunkedArray</code> with samples from a Normal …","Create <code>ChunkedArray</code> with samples from a Standard Normal …","Create <code>ChunkedArray</code> with samples from a Uniform …","","Get a reference to the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","Rename this <code>ChunkedArray</code>.","","","","","","","","Apply a rolling custom function. This is pretty slow …","Apply a rolling custom function. This is pretty slow …","Sample a fraction between 0.0-1.0 of this <code>ChunkedArray</code>.","Sample n datapoints from this <code>ChunkedArray</code>.","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","","","","","","","Set the ‘sorted’ bit meta info.","","","","","","","","","","","","","","","","Shrink the capacity of this array to fit its length.","Slice the array. The chunks are reallocated the underlying …","","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Get the tail of the <code>ChunkedArray</code>","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Traits and utilities for temporal data.","","Convert an <code>Utf8Chunked</code> to a <code>Series</code> of <code>DataType::Decimal</code>. …","Set the logical type of the <code>ListChunked</code>.","If all nested <code>Series</code> have the same length, a 2 dimensional …","If data is aligned in a single chunk and has no Null …","","","","Safety","Convert to a <code>Vec</code> of <code>Option&lt;T::Native&gt;</code>.","Convert to a <code>Vec</code> but don’t return <code>Option&lt;T::Native&gt;</code> if …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","Applies a function only to the non-null elements, …","Applies a function to all elements, regardless of whether …","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","Series to <code>ChunkedArray&lt;T&gt;</code>","","Implementations of upstream traits for <code>ChunkedArray&lt;T&gt;</code>","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Return this <code>ChunkedArray</code> with a new name.","Zip with a <code>ChunkedArray</code> then apply a binary function <code>F</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends from an iterator over values","Appends from an iterator over values","","","Appends a null slot into the builder","","","","","","","","","Appends a null slot into the builder","Appends a null slot into the builder","Appends a null slot into the builder","","","","","","","","","","","","","","","","","","","Appends a value of type <code>T</code> into the builder","","","Appends a value of type <code>T</code> into the builder","Appends a value of type <code>T</code> into the builder","Appends a value of type <code>T</code> into the builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new UtfChunkedBuilder","","","","","","","","","","","Create a new UtfChunkedBuilder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The no null iterator for a <code>BooleanArray</code>","","","A <code>PolarsIterator</code> is an iterator over a <code>ChunkedArray</code> which …","Wrapper struct to convert an iterator of type <code>T</code> into one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","create a new iterator","create a new iterator","create a new iterator","create a new iterator","create a new iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Values need to implement this so that they can be stored …","Trimmed down object safe polars object","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Check validity","Check validity","","Returns an iterator of <code>Option&lt;&amp;T&gt;</code> over every element of …","","","","This is a heap allocated utility that can be used to …","Sets the validity of this array.","","","","","","","","","","","","","","This should be used as type information. Consider this a …","","Get a value at a certain index location","","Get a value at a certain index location","Get a reference to the underlying data","","","","","Returns this array with a new validity.","","","","Appends a null slot into the builder","","","Appends a value of type <code>T</code> into the builder","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","This trait can be registered, after which that global …","","","Append a <code>null</code> value.","Append a <code>T</code> of <code>ObjectChunked&lt;T&gt;</code> made generic via the <code>Any</code> …","","","","","Take the current state and materialize as a <code>Series</code> the …","previous value in array","Aggregation operations.","","Fastest way to do elementwise operations on a …","Apply kernels on the arrow array chunks in a ChunkedArray.","","Cast <code>ChunkedArray&lt;T&gt;</code> to <code>ChunkedArray&lt;N&gt;</code>","Compare <code>Series</code> and <code>ChunkedArray</code>’s and get a <code>boolean</code> mask …","","Create a new ChunkedArray filled with values at that index.","Explode/ flatten a List or Utf8 Series","Replace None values with a value","Filter values by a boolean mask.","Fill a ChunkedArray with one value.","","Quantile and median aggregation.","Reverse a <code>ChunkedArray&lt;T&gt;</code>","This differs from ChunkWindowCustom and ChunkWindow by not …","Create a <code>ChunkedArray</code> with new values by index or by …","","Shift the values of a <code>ChunkedArray</code> by a number of periods.","Sort operations on <code>ChunkedArray</code>.","","","Get unique values in a <code>ChunkedArray</code>","Variance and standard deviation aggregation.","Combine two <code>ChunkedArray</code> based on some predicate.","","","next value in array","","Mask the first unique values as <code>true</code>","Mask the last unique values as <code>true</code>","","maximum value in array","replace with the maximum value of that data type","mean value of array","minimal value in array","replace with the minimal value of that data type","No value.","replace with the value one","","Some value of type <code>T</code>.","","","replace with the value zero","","","","Apply a closure elementwise including null values.","Apply kernel and return result as a new ChunkedArray.","Apply a kernel that outputs an array of different type.","Apply a closure elementwise and write results to a mutable …","Apply a closure elementwise. This is fastest when the null …","Retrieve the indexes needed to sort this array.","Retrieve the indexes need to sort this and the other …","Get first index of the unique values in a <code>ChunkedArray</code>. …","","","","","","","","Cast a <code>ChunkedArray</code> to <code>DataType</code>","Does not check if the cast is a valid one and may …","","","","","","","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Get an array with the cumulative sum computed at every …","","","","","","","","","","","","","","Check for equality.","Check for equality where <code>None == None</code>.","","","","","","","","Replace None values with a give value <code>T</code>.","Filter values in the ChunkedArray with a boolean mask.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a ChunkedArray with a single value.","","","Get a single value. Beware this is slow.","Get a single value. Beware this is slow. If you need to …","Greater than comparison.","Greater than or equal comparison.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Less than comparison.","Less than or equal comparison","","Returns the maximum value in the array, according to the …","Returns the mean value in the array. Returns <code>None</code> if the …","Returns the mean value in the array. Returns <code>None</code> if the …","","","","Number of unique values in the <code>ChunkedArray</code>","Create a new ChunkedArray filled with values at that index.","Check for inequality.","Check for inequality where <code>None == None</code>.","","","Aggregate a given quantile of the ChunkedArray. Returns …","","","Return a reversed version of this array.","","Set the values where the mask evaluates to <code>true</code> to some …","Set the values at indexes <code>idx</code> to some optional value …","Set the values at indexes <code>idx</code> by applying a closure to …","","Shift the values by a given period and fill the parts that …","","Returned a sorted <code>ChunkedArray</code>.","","Compute the standard deviation of this ChunkedArray/Series.","Aggregate the sum of the ChunkedArray. Returns <code>None</code> if not …","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","","","","","","","","","","","","","","","Get unique values of a ChunkedArray","Compute the variance of this ChunkedArray/Series.","","","","","Create a new ChunkedArray with values from self where the …","","","","","Applies a kernel that produces <code>Array</code> types.","","","","Applies a kernel that produces <code>Array</code> types.","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","Applies a kernel that produces <code>Array</code> types.","","","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","","","","","","used a lot, ensure there is a single impl","","","","","","","","","","","","","","Local <code>AsRef&lt;T&gt;</code> trait to circumvent the orphan rule.","","","A nested list with a fixed size in each row","","","","","","The set of supported logical types in this crate.","The time units defined in Arrow.","","","","Opaque binary data of variable length whose offsets are …","","","","A binary true or false.","","<code>true</code> and <code>false</code>.","","","","","","","","","[ChunkIdx, DfIdx]","","A 32-bit date representing the elapsed time since UNIX …","A 32-bit date representing the elapsed time since UNIX …","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","","","A 64-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","","","A 128-bit fixed point decimal number.","Fixed point decimal type optional precision and …","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","","","Measure of elapsed time. This elapsed time is a physical …","","","Extension type.","Characterizes the name and the <code>DataType</code> of a column.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with a fixed number of …","","","An 16-bit float","A 32-bit floating point number.","","A <code>f32</code>","","","A 64-bit floating point number.","","A <code>f64</code>","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","","","","","The type used by polars to index data.","","","","","A 16-bit integer number.","","An <code>i16</code>","","","A 32-bit integer number.","","An <code>i32</code>","","","A 64-bit integer number.","","An <code>i64</code>","","","An 8-bit integer number.","","An <code>i8</code>","","","A “calendar” interval modeling elapsed time that takes …","Opaque binary data of variable length whose offsets are …","A list of some logical data type whose offsets are …","A variable-length UTF-8 encoded string whose offsets are …","Nested type, contains arrays that are filled with one of …","A nested list with a variable size in each row","A list of some logical data type whose offsets are …","","","Utf8Array: caches the string values","Utf8Array: caches the string values","Maps a logical type to a a chunked array implementation of …","","A nested type that is represented as","Time in microseconds.","","Time in milliseconds.","","Time in nanoseconds.","","","","","","Null type","","Can be used to fmt and implements Any, so can be …","A generic type that can be used in a <code>Series</code> &amp;’static str …","","","","","","","","This hashmap has the uses an IdHasher","","","Safety","","","","","","","Time in seconds.","","","","","A nested <code>DataType</code> with a given number of <code>Field</code>s.","This is logical type <code>StructChunked</code> that dispatches most …","","","A 64-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","","","","","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer number.","","An <code>u16</code>","","","An unsigned 32-bit integer number.","","An <code>u32</code>","","","An unsigned 64-bit integer number.","","An <code>u64</code>","","","An unsigned 8-bit integer number.","","An <code>u8</code>","","","A nested datatype that can represent slots of differing …","","A UTF8 encoded string type.","String data","A variable-length UTF-8 encoded string whose offsets are …","","An UTF8 encoded string type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieve the indexes needed to sort this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the underlying <code>TimeUnit</code>. And update the data …","Change the underlying <code>TimeUnit</code>. And update the data …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the <code>Field</code> datatype.","","","","","","Returns a reference to the <code>Field</code> datatype.","Extract the days from a <code>Duration</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends all the values in a single lock of the global …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get data type of <code>ChunkedArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if this categorical already exists","","Get access to one of this <code>[StructChunked]</code>’s fields","","","<code>str</code> to <code>Categorical</code>","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Create a <code>CategoricalChunked</code> from an array of <code>idx</code> and an …","Construct a new <code>DurationChunked</code> from an iterator over …","Construct a new <code>DurationChunked</code> from an iterator over …","Create a <code>CategoricalChunked</code> from a categorical indices. …","Construct a new <code>DateChunked</code> from an iterator over <code>NaiveDate</code>…","Construct a new <code>DateChunked</code> from an iterator over optional …","Construct a new <code>DatetimeChunked</code> from an iterator over …","","Construct a new <code>TimeChunked</code> from an iterator over <code>NaiveTime</code>…","Construct a new <code>TimeChunked</code> from an iterator over optional …","","","","","","","<code>Categorical</code> to <code>str</code>","","","","","","Gets <code>AnyValue</code> from <code>LogicalType</code>","","Gets AnyValue from LogicalType","","","","","","Safety","","","Get the categories in this <code>RevMapping</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the mapping of categorical types to the …","Get a reference to the <code>&amp;str</code> contained within <code>AnyValue</code>.","Safety","Safety","","","","","","","","","","Extract hour from underlying NaiveDateTime representation. …","Extract the hours from a <code>Duration</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the inner data type of a nested type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Try to coerce to an AnyValue with static lifetime. This …","","","Check if this <code>DataType</code> is a basic floating point type …","","Check if this <code>DataType</code> is an integer.","","Check if this <code>DataType</code> is a logical type","","","Check if this <code>DataType</code> is a basic numeric type (excludes …","Check if datatype is a primitive type. By that we mean that","","","Check if this <code>DataType</code> is a temporal type","","","","Create an <code>[Iterator]</code> that iterates over the <code>&amp;str</code> values of …","","Get the length of the <code>RevMapping</code>","","","Get a reference to the physical array (the categories).","","","","Extract the microseconds from a <code>Duration</code>","Extract the milliseconds from a <code>Duration</code>","Extract minute from underlying NaiveDateTime …","Extract the seconds from a <code>Duration</code>","","","","","","","","","","","","","","","","","","","","Returns a reference to the <code>Field</code> name.","","Extract second from underlying NaiveDateTime …","Extract the nanoseconds from a <code>Duration</code>","","","","","","","","","","","","Creates a new <code>Field</code>.","","","","","","","Only implemented for the same types and physical types!","","","","Get a reference to the <code>Field</code> of array.","","","","","","","","","","","","","","","Check if the categoricals are created under the same …","","Extract second from underlying NaiveDateTime …","Extract the seconds from a <code>Duration</code>","","Sets the <code>Field</code> name.","Change the underlying <code>TimeUnit</code>. This does not modify the …","Change the underlying <code>TimeUnit</code>. This does not modify the …","Change the underlying <code>TimeZone</code>. This does not modify the …","","Returned a sorted <code>ChunkedArray</code>.","","Convert from Datetime into Utf8 with the given format. See …","Convert from Time into Utf8 with the given format. See …","Convert from Date into Utf8 with the given format. See …","","","","","","","","","","","","","","","","Convert to an Arrow data type.","Converts the <code>Field</code> to an <code>arrow::datatypes::Field</code>.","","","Convert a categorical column to its local representation.","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to the physical data type","the <code>PhysicalType</code> of this <code>DataType</code>.","Convert from Time into Utf8 with the given format. See …","Convert from Datetime into Utf8 with the given format. See …","Convert from Date into Utf8 with the given format. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return whether or not the <code>CategoricalChunked</code> uses the …","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","Utf8Array: caches the string values","Utf8Array: caches the string values","","","","","Enable the global string cache as long as the object is …","","","","","","Disable and clear the global string cache.","","","Enable the global string cache.","Returns the argument unchanged.","Hold the StringCache","","Calls <code>U::from(self)</code>.","","","","Check whether the global string cache is enabled.","","Polars Eager cookbook","Polars Lazy cookbook","Performance","Enum with all errors in this crate.","","","","","Contains the error value","","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","","","Wrapper for IO errors","","Returned when functionality is not yet available.","Contains the success value","","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","","","","","","","","","","","","","","Constant that help with creating error messages dependent …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Wraps an external error in an <code>Error</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the function that will be called by the <code>polars_warn!</code> …","","","","","","","","","","","","","","","","","","","","","","Keep any of the unique rows This allows more optimizations","","A contiguous growable collection of <code>Series</code> that have the …","Keep the first unique row.","","Keep the last unique row.","Keep None of the unique rows.","","","","","","","","","","Same as <code>filter</code> but does not parallelize.","","","","Aggregate all chunks to contiguous memory.","Ensure all the chunks in the <code>DataFrame</code> are aligned.","Apply a closure to a column. This is the recommended way …","Apply a closure to a column at index <code>idx</code>. This is the …","Aggregate all the chunks in the DataFrame to a single …","Aggregate all the chunks in the DataFrame to a single …","","","","","","","","","","","","","","","","","","Select a single column by name.","Selected multiple columns by name.","","","","","","","","","","","","","Summary statistics for a DataFrame. Only summarizes …","","","","","","Drop a column by name. This is a pure method and will …","Remove a column by name and return the column removed.","Drop columns that are in <code>names</code>.","Drop columns that are in <code>names</code> without allocating a <code>HashSet</code>…","Return a new <code>DataFrame</code> where all null values are dropped.","Get the data types of the columns in the <code>DataFrame</code>.","Creates an empty <code>DataFrame</code> usable in a compile time …","","","","","","","Returns an estimation of the total (heap) allocated size …","","Explode <code>DataFrame</code> to long format by exploding a column …","","Extend the memory backed by this <code>DataFrame</code> with the values …","Get a reference to the schema fields of the <code>DataFrame</code>.","Replace None values with one of the following strategies:","Take the <code>DataFrame</code> rows by a boolean mask.","Get column index of a <code>Series</code> by name.","","","","","Check if <code>DataFrame</code>s are equal. Note that <code>None == None</code> …","Check if all values in <code>DataFrame</code>s are equal where …","Check if <code>DataFrame</code>’ schemas are equal.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Panics","Create a new <code>DataFrame</code> from rows. This should only be used …","Create a new <code>DataFrame</code> from rows. This should only be used …","Create a new <code>DataFrame</code> from an iterator over rows. This …","Get a row in the <code>DataFrame</code>. Beware this is slow.","Example","Get the <code>Vec&lt;String&gt;</code> representing the column names.","Get a reference to the <code>DataFrame</code> columns.","Get mutable access to the underlying columns.","Get a row from a <code>DataFrame</code>. Use of this is discouraged as …","Amortize allocations by reusing a row. The caller is …","Amortize allocations by reusing a row. The caller is …","Get the supertype of the columns in this DataFrame","","Group DataFrame using a Series column.","","","Group DataFrame using a Series column. The groups are …","","Get the head of the <code>DataFrame</code>.","Get the height of the <code>DataFrame</code> which is the number of …","Aggregate the column horizontally to their max values.","Aggregate the column horizontally to their mean values.","Aggregate the column horizontally to their min values.","Add multiple <code>Series</code> to a <code>DataFrame</code>. The added <code>Series</code> are …","Add multiple <code>Series</code> to a <code>DataFrame</code>. The added <code>Series</code> are …","Add columns horizontally.","Aggregate the column horizontally to their sum values.","","","","","","","","","","","","","","Insert a new column at a given index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Get a mask of all the duplicated rows in the <code>DataFrame</code>.","Check if the <code>DataFrame</code> is empty.","Get a mask of all the unique rows in the <code>DataFrame</code>.","Iterator over the columns as <code>Series</code>.","Iterator over the rows in this <code>DataFrame</code> as Arrow …","Iterator over the rows in this <code>DataFrame</code> as Arrow …","Convert the <code>DataFrame</code> into a <code>LazyFrame</code>","Aggregate the columns to their maximum values.","Aggregate the columns to their mean values.","Aggregate the columns to their median values.","Unpivot a <code>DataFrame</code> from wide to long format.","Similar to melt, but without generics. This may be easier …","Aggregate the columns to their minimum values.","The number of chunks per column","Create a DataFrame from a Vector of Series.","Create a new <code>DataFrame</code> but does not check the length or …","","","Create a new <code>DataFrame</code> that shows the null counts per …","Pipe different functions/ closure operations that work on …","Pipe different functions/ closure operations that work on …","Pipe different functions/ closure operations that work on …","Removes the last <code>Series</code> from the <code>DataFrame</code> and returns it, …","Checks if the Arc ptrs of the <code>Series</code> are equal","Aggregate the columns to their quantile values.","Rename a column in the <code>DataFrame</code>.","Replace a column with a <code>Series</code>.","Replace column at index <code>idx</code> with a <code>Series</code>.","Replace or update a column. The difference between this …","Get a <code>DataFrame</code> with all the columns in reversed order.","","Sample a fraction between 0.0-1.0 of this <code>DataFrame</code>.","Sample n datapoints from this <code>DataFrame</code>.","","Get the <code>DataFrame</code> schema.","Select column(s) from this <code>DataFrame</code> and return a new …","Select a <code>Series</code> by index.","Select column(s) from this <code>DataFrame</code> by range and return a …","","Select column(s) from this <code>DataFrame</code> and return them into …","Select with a known schema.","Select with a known schema. This doesn’t check for …","Set the column names.","Get (height, width) of the <code>DataFrame</code>.","Shift the values by a given period and fill the parts that …","Returns true if the chunks of the columns do not align and …","Shrink the capacity of this DataFrame to fit its length.","","","Slice the <code>DataFrame</code> along the rows.","","Return a sorted clone of this <code>DataFrame</code>.","This is the dispatch of Self::sort, and exists to reduce …","Sort <code>DataFrame</code> in place by a column.","Sort the <code>DataFrame</code> by a single column with extra options.","Aggregate the columns to their standard deviation values.","Aggregate the columns to their sum values.","Get the tail of the <code>DataFrame</code>.","Take <code>DataFrame</code> rows by index values.","Safety","","Create a 2D <code>ndarray::Array</code> from this <code>DataFrame</code>. This …","","","","","","Transpose a DataFrame. This is a very expensive operation.","Apply a closure that may fail to a column. This is the …","Apply a closure that may fail to a column at index <code>idx</code>. …","Get column index of a <code>Series</code> by name.","","","","","","","","Create a new <code>DataFrame</code> from an iterator over rows. This …","","","","","","","","","","","Unstable distinct. See <code>DataFrame::unique_stable</code>.","","Drop duplicate rows from a <code>DataFrame</code>. <em>This fails when </em>…","Unnest the given <code>Struct</code> columns. This means that the …","","","Aggregate the columns to their variation values.","Concatenate a <code>DataFrame</code> to this <code>DataFrame</code> and return as …","Concatenate a <code>DataFrame</code> to this <code>DataFrame</code>","","","","","","Get the width of the <code>DataFrame</code> which is the number of …","Add a new column to this <code>DataFrame</code> or replace an existing …","Add a new column to this <code>DataFrame</code> or replace an existing …","Adds a column to the <code>DataFrame</code> without doing any checks on …","Add a new column at index 0 that counts the rows.","Add a row count in place.","Arguments for <code>[DataFrame::melt]</code> function","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Whether the melt may be done in the streaming engine This …","","","","","","","","","","","","Returned by a group_by operation on a DataFrame. This …","","","Indexes of the groups, the first index is stored …","","","","","Every group is indicated by an array where the","","","","","Used to create the tuples for a group_by operation.","","","","","","","","","","","Slice is always sorted in ascending order.","","","","","","","","","Aggregate the groups of the group_by operation into lists.","","","Apply a closure over the groups as a new <code>DataFrame</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregate grouped series and compute the number of values …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregate grouped <code>Series</code> and find the first value per …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get the internal representation of the GroupBy operation. …","Get the internal representation of the GroupBy operation. …","","","Create the tuples need for a group_by operation. * The …","Get the group_by group indexes.","Get a mutable reference to the <code>GroupsIdx</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Aggregate grouped <code>Series</code> and return the last value per …","","","Aggregate grouped series and compute the maximum value per …","Aggregate grouped series and compute the mean per group.","Aggregate grouped <code>Series</code> and determine the median per …","Aggregate grouped series and compute the minimal value per …","Aggregate grouped <code>Series</code> by counting the number of unique …","","","","","Apply a closure over the groups as a new <code>DataFrame</code> in …","","","Aggregate grouped <code>Series</code> and determine the quantile per …","Select the column(s) that should be aggregated. You can …","","","","Aggregate grouped <code>Series</code> and determine the standard …","Aggregate grouped series and compute the sum per group.","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the <code>GroupsIdx</code>.","Get a reference to the <code>GroupsSlice</code>.","Aggregate grouped <code>Series</code> and determine the variance per …","","","","","","","","","","","","","Helper that combines the groups into a parallel iterator …","Same helper as <code>_agg_helper_idx</code> but for aggregations that …","","","","","","","Safety","","","","","","","","","An <code>AnyValueBuffer</code> that should be used when we trust the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Will add the <code>AnyValue</code> into <code>Self</code> and unpack as the physical …","","","","","","","","","","","","","","Coerces a slice of datatypes into a single supertype.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Infer schema from rows and set the first no null type as …","Infer schema from rows and set the supertypes of the …","","","","","","","","","","","","","","","","Concat <code>DataFrame</code>s diagonally. Concat diagonally thereby …","Concat <code>DataFrame</code>s horizontally. Concat horizontally and …","Compute the covariance between two columns.","Compute the pearson correlation between two columns.","","","","","Groupby aggregation","","","","Multiple values that are used for all columns","A single value that’s used for all columns","","AllowedOptimizations","This puts quotes around every field. Always.","","","","","","Keep any of the unique rows This allows more optimizations","","","A thread-safe reference-counting pointer. ‘Arc’ stands …","Argmin/ Argmax","","","A nested list with a fixed size in each row","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::List</code>.","","The set of supported logical types in this crate.","","Represents Arrow’s metadata of a “column”.","Typedef for a <code>std::result::Result</code> of an <code>Error</code>.","An ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.","The time units defined in Arrow.","","","","","","","","","","Automatically determine over which unit to parallelize …","","","selects the last row in the right DataFrame whose ‘on’ …","previous value in array","","","A raw binary array","","","Opaque binary data of variable length whose offsets are …","","","","","","","","","","A binary true or false.","A binary true or false.","","<code>true</code> and <code>false</code>.","","","","","","","","","","","","Cache the input at this point in the LP","","","","","","","","Specialized expressions for Categorical dtypes.","","","","Utility struct for the <code>when-then-otherwise</code> expression.","Utility struct for the <code>when-then-otherwise</code> expression.","Aggregation operations.","Aggregations that return <code>Series</code> of unit length. Those can …","","Fastest way to do elementwise operations on a …","Apply kernels on the arrow array chunks in a ChunkedArray.","","Cast <code>ChunkedArray&lt;T&gt;</code> to <code>ChunkedArray&lt;N&gt;</code>","Compare <code>Series</code> and <code>ChunkedArray</code>’s and get a <code>boolean</code> mask …","","Create a new ChunkedArray filled with values at that index.","Explode/ flatten a List or Utf8 Series","Replace None values with a value","Filter values by a boolean mask.","Fill a ChunkedArray with one value.","","[ChunkIdx, DfIdx]","","","Quantile and median aggregation.","Reverse a <code>ChunkedArray&lt;T&gt;</code>","This differs from ChunkWindowCustom and ChunkWindow by not …","Create a <code>ChunkedArray</code> with new values by index or by …","","Shift the values of a <code>ChunkedArray</code> by a number of periods.","Sort operations on <code>ChunkedArray</code>.","","","Get unique values in a <code>ChunkedArray</code>","Variance and standard deviation aggregation.","Combine two <code>ChunkedArray</code> based on some predicate.","ChunkedArray","","","","","","","","","","Parallelize over the columns","","","","","","Special case that does not need columns","","","","","Create a new DataFrame by reading a csv file.","Write a DataFrame to csv.","","","","","","","A contiguous growable collection of <code>Series</code> that have the …","","","In memory DataFrame","","","","","A 32-bit date representing the elapsed time since UNIX …","A 32-bit date representing the elapsed time since UNIX …","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","","","","","A 64-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","Arguments used by <code>datetime</code> in order to produce an <code>Expr</code> of …","","","","A 128-bit fixed point decimal number.","Fixed point decimal type optional precision and …","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","","","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","","Remove duplicates from the table","","","","","","","","","","Measure of elapsed time. This elapsed time is a physical …","Arguments used by <code>duration</code> in order to produce an <code>Expr</code> of …","","","","","","","","Contains the error value","Contains the error value","Catches errors and throws them later","Can be used in a select statement to exclude a column from …","","","Explode the aggregated list and just do a hstack instead …","Expressions that can be used in various contexts. Queries …","","This allows expressions to access other tables","Extension type.","","Characterizes the name and the <code>DataType</code> of a column.","","","","","","","","","Keep the first unique row.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with a fixed number of …","","","An 16-bit float","A 32-bit floating point number.","A 32-bit floating point number.","","A <code>f32</code>","","","A 64-bit floating point number.","A 64-bit floating point number.","","A <code>f64</code>","","","","","","selects the first row in the right DataFrame whose …","next value in array","","","","","","","","","","Ensure that the same hash is used as with <code>VecHash</code>.","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","Returned by a group_by operation on a DataFrame. This …","","","Indexes of the groups, the first index is stored …","","","","","Every group is indicated by an array where the","Map the group values to the position","","","","","Adding columns to the table without a Join","","","","","","","","","","The type used by polars to index data.","","","","This trait exists to be unify the API of polars Schema and …","","","","","","","","A 16-bit integer number.","A 16-bit integer number.","","An <code>i16</code>","","","A 32-bit integer number.","A 32-bit integer number.","","An <code>i32</code>","","","A 64-bit integer number.","A 64-bit integer number.","","An <code>i64</code>","","","An 8-bit integer number.","An 8-bit integer number.","","An <code>i8</code>","","","","","A “calendar” interval modeling elapsed time that takes …","Used to create the tuples for a group_by operation.","","","Used to convert a <code>ChunkedArray</code>, <code>&amp;dyn SeriesTrait</code> and <code>Series</code>","","","","Compression codec","Read Arrows IPC format into a DataFrame","Read Arrows Stream IPC format into a DataFrame","Write a DataFrame to Arrow’s Streaming IPC format","","Write a DataFrame to Arrow’s IPC format","","","","Mask the first unique values as <code>true</code>","","Safety","","","Mask the last unique values as <code>true</code>","","","","","","","Join the groups as ‘List&lt;group_dtype&gt;’ to the row …","Join operation","","","","","","","A single JSON array containing each DataFrame row as an …","The format to use to write the DataFrame to JSON: <code>Json</code> (a …","","Each DataFrame row is serialized as a JSON object on a …","Reads JSON in one of the formats in <code>JsonFormat</code> into a …","Writes a DataFrame to JSON.","Set root name as Alias","LZ4 (framed)","","Opaque binary data of variable length whose offsets are …","","A list of some logical data type whose offsets are …","","","A variable-length UTF-8 encoded string whose offsets are …","","","Keep the last unique row.","","Reads LazyFrame from a filesystem or a cloud storage. …","Lazy abstraction over an eager <code>DataFrame</code>. It really is an …","Utility struct for lazy group_by operation.","","","","","","Use the string value for sorting","","","","Nested type, contains arrays that are filled with one of …","A nested list with a variable size in each row","A list of some logical data type whose offsets are …","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::List</code>.","","","","","","","","","Utf8Array: caches the string values","Utf8Array: caches the string values","Maps a logical type to a a chunked array implementation of …","","","Utf8 encoding and unknown bytes are replaced with �","","","","","","","No unique checks","Check if join keys are unique in right dataset.","A nested type that is represented as","A (User Defined) Function","","","maximum value in array","","replace with the maximum value of that data type","","","mean value of array","","","","Arguments for <code>[DataFrame::melt]</code> function","Time in microseconds.","","","Time in milliseconds.","","","","minimal value in array","","replace with the minimal value of that data type","","","","only useful if periods are weekly","","","","","","","Tuples that map column names to null value of that column","","","","","Time in nanoseconds.","","","","selects the right in the right DataFrame whose ‘on’ …","","This puts quotes around fields only when necessary.","","Never quote any fields, even if it would produce invalid …","","","Just a wrapper structure. Useful for certain impl …","This puts quotes around all fields that are non-numeric. …","","No value.","Don’t parallelize","No value.","Keep None of the unique rows.","","","","Take the nth column in the <code>DataFrame</code>","The literal Null","","","","Null type","","","","","","Can be used to fmt and implements Any, so can be …","A generic type that can be used in a <code>Series</code> &amp;’static str …","","","","Contains the success value","Contains the success value","replace with the value one","Check if join keys are unique in left dataset.","Check if join keys are unique in both left and right …","","State of the allowed optimizations","","","","","","Explode the aggregated list and just do a hstack instead …","","","","Read Apache parquet format into a DataFrame.","","Write a DataFrame to parquet format","","","Use the physical categories for sorting","","Take a DataFrame and evaluate the expressions. Implement …","Wrapper struct that allow us to use a PhysicalExpr in …","","","This hashmap has the uses an IdHasher","","","","","Safety","","","","A <code>PolarsIterator</code> is an iterator over a <code>ChunkedArray</code> which …","","","","Values need to implement this so that they can be stored …","","","","","","","","","Column selection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallelize over the row groups","","","","","","A map from field/column name (<code>String</code>) to the type of that …","","","","Time in seconds.","Filter on a boolean mask","Expressions in this node should only be expanding e.g. …","","","Options to serialize logical types to CSV.","Series","","A wrapper trait for any binary closure …","","","","","","","A wrapper trait for any closure …","","","","","","","","Slice the table","","Slice is always sorted in ascending order.","Utility trait to slice concrete arrow arrays whilst …","","","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","Sort the table","","","","Wrapper type that has special equality properties …","","","","","","","","","","","A nested <code>DataType</code> with a given number of <code>Field</code>s.","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","This is logical type <code>StructChunked</code> that dispatches most …","","","Specialized expressions for Struct dtypes.","","","","","","","","","","","A ternary operation if true then “foo” else “bar”","Utility struct for the <code>when-then-otherwise</code> expression.","","","A 64-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","","","","","","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","","","","","An unsigned 16-bit integer number.","An unsigned 16-bit integer number.","","An <code>u16</code>","","","An unsigned 32-bit integer number.","An unsigned 32-bit integer number.","","An <code>u32</code>","","","An unsigned 64-bit integer number.","An unsigned 64-bit integer number.","","An <code>u64</code>","","","An unsigned 8-bit integer number.","An unsigned 8-bit integer number.","","An <code>u8</code>","","","","","","A nested datatype that can represent slots of differing …","","","","","","Represents a user-defined function","Utf8 encoding","A UTF8 encoded string type.","A UTF8 encoded string type.","String data","A variable-length UTF-8 encoded string whose offsets are …","","","","","An UTF8 encoded string type.","","","","","","","","","","","Utility struct for the <code>when-then-otherwise</code> expression.","","Represents a window in time","See postgres window functions","","","","","ZSTD","replace with the value zero","","","","Represents a valid zstd compression level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","Get the sum of the Series as a new Series of length 1.","","","Convert all values to their absolute/positive value.","","","","","","","Group by and aggregate.","Get the group indexes of the group by operation.","","Rename Column.","Selects all columns. Shorthand for <code>col(&quot;*&quot;)</code>.","Returns whether all values in the column are <code>true</code>.","","Returns a reference to the underlying allocator.","Allow parallel table evaluation.","","specify if the scan provider should allow predicate …","specify if the scan provider should allow projection …","","specify if the scan provider should allow slice pushdowns","","“and” operation.","","Returns whether any of the values in the column are <code>true</code>.","","Append expressions. This is done by adding the chunks of …","","","","","","","Apply a closure elementwise including null values.","Apply a function over the groups as a new DataFrame.","Apply a function/closure over the groups. This should only …","Like <code>map_binary</code>, but used in a group_by-aggregation …","","Apply kernel and return result as a new ChunkedArray.","Apply a kernel that outputs an array of different type.","Apply a function/closure over the groups with many …","","Apply a function/closure over the groups of multiple …","Apply a closure elementwise and write results to a mutable …","Apply a closure elementwise. This is fastest when the null …","Generate a range of integers.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Get the index of the maximal value","Return the index of the maximum value of every sublist","Get the index value that has the maximum value.","Get the index of the minimal value","Return the index of the minimal value of every sublist","Get the index value that has the minimum value.","Retrieve the indexes needed to sort this array.","Get the index values that would sort this expression.","Retrieve the indexes needed for a sort.","Find the indexes that would sort these series in order of …","Retrieve the indexes need to sort this and the other …","Get first index of the unique values in a <code>ChunkedArray</code>. …","Get the first index of unique values of this expression.","Get first indexes of unique values.","Get the indices where <code>condition</code> evaluates <code>true</code>.","","","Get the <code>array::ArrayNameSpace</code>.","","","","","","Get arrow schema of the Ipc File, this is faster than …","Get arrow schema of the Ipc Stream File, this is faster …","","","","Get a hold to self as <code>Any</code> trait reference. Only …","","Get a hold to self as <code>Any</code> trait reference. Only …","","","Parsing string values and return a <code>DateChunked</code>","Parsing string values and return a <code>DateChunked</code> Different …","Parsing string values and return a <code>DatetimeChunked</code>.","Parsing string values and return a <code>DatetimeChunked</code> …","","","","Convert to a partitioned aggregator.","Provides a raw pointer to the data.","","","","","","Rechunk and return a pointer to the start of the Series. …","","","Can take &amp;dyn Statistics and determine of a file should be …","","Take several expressions and collect them into a …","Parsing string values and return a <code>TimeChunked</code>","","Converts to <code>Arc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","Find the mean of all the values in the column named <code>name</code>. …","Fill missing value with next non-null.","","","","","","","","","","","","","","","Compute <code>op(l, r)</code> (or equivalently <code>l op r</code>). <code>l</code> and <code>r</code> must …oxes this array into a <code>Box&lt;dyn Array&gt;</code>.","","Compute the rolling aggregates with a window defined by a …","","Caches the result into a new LazyFrame.","","","use a cache of unique, converted dates to apply the …","","creates a logical expression with a call of the UDF This …","","","creates a logical expression with a call of the UDF This …","","","Casts the column given by <code>Expr</code> to a different type.","Cast a <code>ChunkedArray</code> to <code>DataType</code>","","","Cast named frame columns, resulting in a new LazyFrame …","Cast expression to another data type.","Cast all frame columns to the given dtype, resulting in a …","Does not check if the cast is a valid one and may …","","Get the <code>CategoricalNameSpace</code>.","","Compute the cube root of the given expression","Ceil underlying floating point array to the highest …","Set the labels at the center of the window.","Set the labels at the center of the window.","Set the labels at the center of the window.","In cases sortedness cannot be checked by the sorted flag, …","In cases sortedness cannot be checked by the sorted flag, …","Checked integer division. Computes self / rhs, returning …","","","Get the lengths of the underlying chunks","Traits and utilities for temporal data.","Underlying chunks.","Underlying chunks.","Clamp underlying values to the <code>min</code> and <code>max</code> values.","Clip underlying values to a set boundary.","Clamp underlying values to the <code>max</code> value.","Clip underlying values to a set boundary.","Clamp underlying values to the <code>min</code> value.","Clip underlying values to a set boundary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a clone of the <code>Arc</code> pointer.","","","","","","","Clone inner ChunkedArray and wrap in a new Arc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The closed window of that time window if given","","","","Interface with cloud storage through the object_store …","CloudOptions used to list files.","","","Comparison for two <code>Arc</code>s.","Folds the expressions from left to right keeping the first …","Create a Column Expression based on a column name.","Execute all the lazy operations and collect them into a …","Collect all <code>LazyFrame</code> computations.","","","","","","","","","","","Select multiple columns by name.","","","","Data page compression","Data page compression","Concat multiple <code>LazyFrame</code>s vertically.","Concat with the values from a second Utf8Chunked.","","Recommended concatenation of LazyFrames from many input …","","Concat LazyFrames diagonally. Calls <code>concat</code> internally.","Concat lists entries.","Horizontally concat string columns in linear time","Check if binary contains given literal","Check if strings contain a regex pattern.","Check if the list array contain an element","Whether the schema contains a field named <code>name</code>","","","Check if strings contain a given literal","Count expression.","Count the values of the Series or Get counts of the group …","Count all successive non-overlapping regex matches.","Count all successive non-overlapping regex matches.","Compute the covariance between two columns.","","","Creates the cartesian product from both frames, preserves …","Creates the cartesian product from both frames, preserving …","","Cumulatively count values from 0 to len.","Accumulate over multiple columns horizontally / row wise.","Get an array with the cumulative max computed at every …","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Get an array with the cumulative product computed at every …","Accumulate over multiple columns horizontally / row wise.","Get an array with the cumulative sum computed at every …","Get an array with the cumulative sum computed at every …","Run an expression over a sliding window that increases <code>1</code> …","if <code>None</code> will be 1024^2 bytes","","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","Data types supported by Polars.","Used for <code>DataType::Date</code>.","Create a column of date ranges from a <code>start</code> and <code>stop</code> …","","Construct a column of <code>Datetime</code> from the provided …","Used for <code>DataType::Datetime</code>.","Create a datetime range from a <code>start</code> and <code>stop</code> expression.","Create a column of datetime ranges from a <code>start</code> and <code>stop</code> …","","","","Extract day from underlying NaiveDate representation. …","Extract day from underlying NaiveDateTime representation. …","Extract day from underlying NaiveDateTime representation. …","","Extract the days from a <code>Duration</code>","","","","","","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a String describing the optimized logical plan.","Return a String describing the naive (un-optimized) …","","","","Diff every sublist.","Calculate the n-th discrete difference between values.","","","","Compute the dot/inner product between two expressions.","Arguments","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drops the <code>Arc</code>.","","","","","","","","Removes columns from the DataFrame. Note that it’s …","Drop NaN values.","Drop rows containing None.","Drop null values.","Drop all null values and return a new Series.","","","","Get data type of <code>ChunkedArray</code>.","Get datatype of series.","","Select multiple columns by dtype.","Select multiple columns by dtype.","Construct a column of <code>Duration</code> from the provided …","","","","","Check if strings ends with a substring","","","","","","","","","","","","","","","","","","","","","","","","","","Compare <code>Expr</code> with other <code>Expr</code> on equality.","","","","","","","","","","","","","","","","","","","Equality for two <code>Arc</code>s.","","","","","","","","Compare <code>Expr</code> with other <code>Expr</code> on equality where <code>None == None</code>…","Check for equality.","Check for equality where <code>None == None</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Run any <code>Expr</code> on these lists elements","Take a DataFrame and evaluate the expression.","","Some expression that are not aggregations can be done per …","This is called in partitioned aggregation. Partitioned …","Start a window at this interval.","If polars may parse matches that not contain the whole …","Exclude a column from a wildcard/regex selection.","","Executes the given command directly.","Return a String describing the logical plan.","","Apply explode operation. See eager explode.","Explode the utf8/ list column.","","","","","","Extract the nth capture group from pattern.","Extract each successive non-overlapping regex match in an …","Extract each successive non-overlapping regex match in an …","Extract all capture groups from pattern and return as a …","","","","Fetch is like a collect operation, but it overwrites the …","","Get field (used in schema)","","Retrieve one of the fields of this <code>StructChunked</code> as a new …","Returns the fields of this <code>StructArray</code>.","The fields composing this schema.","","","Fill NaN values in the DataFrame with an expression.","Replace the floating point <code>NaN</code> values by a value.","","Fill None values in the DataFrame with an expression.","Replace the null values by a value.","Replace None values with a give value <code>T</code>.","Filter values in the ChunkedArray with a boolean mask.","Filter by boolean mask. This operation clones data.","Filter by some predicate expression.","Filter a single column.","Returns a new <code>Schema</code> with a subset of all fields whose …","Called to merge all the partitioned results in a final …","Take the SerReader and return a parsed DataFrame.","","","Finish builder","Read the file and create the DataFrame.","","","","","","","Take the SerReader and return a parsed DataFrame.","","","Write the given DataFrame in the the writer <code>W</code>. Returns the …","Get the final LazyFrame.","","Get the final LazyFrame. This method assumes, that path is …","","","","First column in DataFrame.","Get first item of every sublist.","Get the first row.","Get the first value in the group.","","Alias for <code>explode</code>.","Used for <code>DataType::Float64</code> and <code>DataType::Float32</code>.","","Floor underlying floating point array to the lowest …","Floor divide <code>self</code> by <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional parameters for the rolling function","","","Accumulate over multiple columns horizontally / row wise.","Force parallel table evaluation.","","Formatting string","Format the results of an array of expressions using a …","Fill missing value with previous non-null.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Allocate a reference-counted slice and move <code>v</code>’s items …","Converts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.","","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Returns the argument unchanged.","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","Create an atomically reference-counted pointer from a …","Move a boxed object to a new, reference-counted allocation.","Converts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","Copies the string into a newly allocated Arc&lt;OsStr&gt;.","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts an atomically reference-counted string slice into …","Converts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Safety","Safety","","","Takes each element in the <code>Iterator</code> and collects it into an …","","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Create a new ChunkedArray from an iterator.","Create a list-array from an iterator. Used in group_by …","","","Create a list-array from an iterator. Used in group_by …","Create a new ChunkedArray from an iterator.","","","This is the recommended way to create a csv reader as this …","This is the recommended way to create a json reader as …","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Constructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.","","","","","","Initialize by name and values.","","","","Create a ChunkedArray with a single value.","","The function implementation.","A function that cannot be expressed with <code>map</code> or <code>apply</code> and …","","","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Get a single value by index. Don’t use this operation …","Get items in every sublist by index.","","Get a reference to the dtype of the field named <code>name</code>, or …","Get a single value. Beware this is slow.","Gets <code>AnyValue</code> from <code>LogicalType</code>","Get a single value. Beware this is slow. If you need to …","Safety","Get references to the name and dtype of the field at <code>index</code>","Get mutable references to the name and dtype of the field …","","Get current optimizations.","Getter for the <code>DataType</code> of the value","","","returns the bounds for the earliest window bounds that …","","","","Look up the name in the schema and return an owned <code>Field</code> …","Returns the fields the <code>DataType::Struct</code>.","","Return all data about the field named <code>name</code>: its index in …","","","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Arc</code>, without …","Get a vector of all column names.","","","Get the value at this index as a downcastable Any trait …","","","","","Safety","Safety","Get a single value by index. Don’t use this operation …","Useful for a Utf8 or a List to get underlying value size. …","Performs a “group-by” on a <code>LazyFrame</code>, producing a …","","Group based on a time value (or index value of type Int32, …","","Create rolling groups based on a time column.","Similar to <code>group_by</code>, but order of the DataFrame is …","Different from <code>group_by_windows</code>, where define window …","Based on the given <code>Window</code>, which has an","Create the tuples need for a group_by operation. * The …","Greater than comparison.","Check if <code>Expr</code> &gt; <code>Expr</code>.","Greater-than comparison for two <code>Arc</code>s.","Greater than or equal comparison.","Check if <code>Expr</code> &gt;= <code>Expr</code>.","Set whether the CSV file has headers","Set whether to write headers.","Set whether the CSV file has headers","","Return if any the chunks in this <code>[ChunkedArray]</code> have a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the head of every sublist","Return first n rows of each group","Get the first <code>n</code> elements of the Expr result.","","","","Horizontally concatenate all strings.","Extract hour from underlying NaiveDateTime representation. …","Extract hour from underlying NaiveDateTime representation. …","Extract hour from underlying NaiveDateTime representation. …","","Extract the hours from a <code>Duration</code>","","Select the join type.","","","Aggregate the group to a Series.","","Add the boundaries to the dataframe.","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Time or index column.","Time or index column.","Get the index of a column by name.","","","","Set the CSV reader to infer the schema of the file","Set the JSON reader to infer the schema of the file. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform an inner join on two DataFrames.","Inner join this query with another lazy query.","The function signature.","Insert a field with <code>name</code> and <code>dtype</code> at the given <code>index</code> into …","Generate a range of integers.","Generate a range of integers for each row of the input …","","","Fill null values using interpolation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs the <code>StructArray</code> into its individual …","","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","","","","","Consumes the <code>Arc</code>, returning the wrapped pointer.","","","","","Check if Series is empty.","","","","Get mask of finite values if dtype is Float.","","","Get a mask of the first unique value.","","Returns whether the duration consists of full days.","","Check if the values of the left expression are in the …","Get mask of infinite values if dtype is Float.","","","Get a mask of the last unique value.","Extract year from underlying NaiveDate representation. …","Extract year from underlying NaiveDate representation. …","Extract year from underlying NaiveDateTime representation. …","","","Get mask of NaN values if dtype is Float.","Get inverse mask of NaN values if dtype is Float.","A column which is <code>false</code> wherever <code>expr</code> is null, <code>true</code> …","Get a mask of the non-null values.","Run is_not_null operation on <code>Expr</code>.","A column which is <code>true</code> wherever <code>expr</code> is null, <code>false</code> …","Get a mask of the null values.","Run is_null operation on <code>Expr</code>.","Its nullability","","","","","","","","<code>true</code> if zero duration.","This year number might not match the calendar year number.","","","","Iterates over the <code>(&amp;name, &amp;dtype)</code> pairs in this schema","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Iterates over references to the dtypes in this schema","Iterates the <code>Field</code>s in this schema, constructing them anew …","Iterates over references to the names in this schema","Get list of files referenced by this reader.","Join all string items in a sublist and place a separator …","Generic join method. Can be used to join on multiple …","Generic function to join two LazyFrames.","This is similar to a left-join except that we match on …","Consume <code>self</code> and return a <code>JoinBuilder</code> to customize a join …","","","Keep the original root name","Set a schema on first glob pattern, so that others don’t …","Truncate the time column values to the window.","Last column in DataFrame.","Get last item of every sublist.","Get the last row.","Get the last value in the group.","","","‘Less than or equal to’ comparison for two <code>Arc</code>s.","","Perform a left join on two DataFrames","Left join this query with another lazy query.","The expressions you want to join the left table on.","Get length of series.","Return the number of elements in each list.","The number of fields in the schema","","Limit the DataFrame to the first <code>n</code> rows.","Take <code>num_elements</code> from the top as a zero copy view.","String appended after every row.","","Create a Literal Expression from <code>L</code>. A literal expression …","Literal expression.","","","","","Reduce memory consumption at the expense of performance","Reduce memory consumption at the expense of performance","Reduce memory usage in expensive of performance","Reduce memory usage in expensive of performance","","Get minimal value that could be hold by this dtype.","","","","","Get the value by index in the sublists. So index <code>0</code> would …","In case the inner dtype <code>DataType::Utf8</code>, the individual …","","","","","","","","","","","","Less than comparison.","Check if <code>Expr</code> &lt; <code>Expr</code>.","Less-than comparison for two <code>Arc</code>s.","Less than or equal comparison","Check if <code>Expr</code> &lt;= <code>Expr</code>.","maintain the order the data was processed","maintain the order the data was processed","","","Makes a mutable reference into the given <code>Arc</code>.","Apply a function/closure once the logical plan get …","Apply a function/closure once the logical plan get …","Define an alias by mapping a function over the original …","Apply a closure on the two columns that are evaluated from …","","Set the timezone of a datetime dtype.","Map a single dtype.","","","","","Apply a function/closure once the logical plan get …","Apply a function/closure over multiple columns once the …","Apply a function/closure once the logical plan get …","","Apply a function/closure over multiple columns once the …","Map to a float supertype if numeric, else preserve","Map to a float supertype.","Map the dtype to the dtype of the list elements.","Map the dtypes to the “supertype” of a list of lists.","Map the dtype to the “supertype” of all fields.","","Find the maximum of all the values in the column named <code>name</code>…","Compute the maximum of the items in every subarray.","Compute the maximum of the items in every sublist.","Returns the maximum value in the array, according to the …","Aggregate all the columns as their maximum values.","Reduce groups to maximum value.","Get the max of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the max of the Series as a new Series of length 1.","","Find the mean of all the values in the column named <code>name</code>. …","Compute the mean of every sublist and return a <code>Series</code> of …","Returns the mean value in the array. Returns <code>None</code> if the …","Aggregate all the columns as their mean values.","Reduce groups to the mean value.","Returns the mean value in the array Returns an option …","Find the median of all the values in the column named <code>name</code>…","Returns the mean value in the array. Returns <code>None</code> if the …","Aggregate all the columns as their median values.","Reduce groups to the median value.","Returns the median value in the array Returns an option …","Get the median of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Get the median of the Series as a new Series of length 1.","Melt the DataFrame from wide to long format.","","Set if the file is to be memory_mapped. Only works with …","Merge <code>other</code> into <code>self</code>","","Additional custom (opaque) metadata.","Optional metadata.","","","Extract the microseconds from a <code>Duration</code>","","Extract the milliseconds from a <code>Duration</code>","","Find the minimum of all the values in the column named <code>name</code>…","Compute the minimum of the items in every subarray.","Compute the minimum of the items in every sublist.","","Aggregate all the columns as their minimum values.","Reduce groups to minimal value.","Get the min of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the min of the Series as a new Series of length 1.","","Amount of elements in the window that should be filled …","Amount of elements in the window that should be filled …","","Amount of elements in the window that should be filled …","Extract minute from underlying NaiveDateTime …","Extract minute from underlying NaiveDateTime …","Extract minute from underlying NaiveDateTime …","","Extract the minutes from a <code>Duration</code>","","","Compute the mode(s) of this column. This is the most …","Extract month from underlying NaiveDateTime representation.","Extract month from underlying NaiveDateTime representation.","Extract month from underlying NaiveDateTime representation.","","","","","","","","","","","","Expr::mutate().apply(fn())","Number of chunks in this Series","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","","","","Number of unique values in the <code>ChunkedArray</code>","Get the number of unique values in the groups.","Get unique values in the Series.","Name of series.","","name","","Its name","","Reduce groups to maximum value.","Reduce groups to minimal value.","","Extract second from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Returns the number of nanoseconds since the whole non-leap …","Extract the nanoseconds from a <code>Duration</code>","Returns the nanoseconds from the <code>Duration</code> without the …","","Inequality for two <code>Arc</code>s.","","Translate the negative index to an offset.","Compare <code>Expr</code> with other <code>Expr</code> on non-equality.","Compare <code>Expr</code> with other <code>Expr</code> on non-equality where …","","Create a new instance of the <code>[SerReader]</code>","","","Initialize by name and values.","","Create the <code>JoinBuilder</code> with the provided <code>LazyFrame</code> as the …","Create a new CsvReader from a file/ stream","","","","","","","","","Create a new <code>JsonWriter</code> writing to <code>buffer</code> with format …","","Create a new JsonLineReader from a file/ stream","Create a new integer size <code>Duration</code>","Create a new <code>ParquetReader</code> from an existing <code>Reader</code>.","","","Create a new writer","","","","","Construct a new <code>DatetimeArgs</code> set to <code>year</code>, <code>month</code>, <code>day</code>","Create a new <code>DurationArgs</code> with all fields set to <code>lit(0)</code>. …","Create a new UserDefinedFunction","Constructs a new <code>Arc&lt;T&gt;</code>.","Create a new, empty schema","Returns a new <code>StructArray</code>","Creates a new <code>Field</code>.","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Creates an empty <code>StructArray</code>.","Create a new ChunkedArray filled with values at that index.","Create a new Series filled with values from the given …","Constructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.","Create a new schema from this one, inserting a field with …","Creates a null <code>StructArray</code> of length <code>length</code>.","","","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents in the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","","","","","Negates a boolean column.","Negate <code>Expr</code>.","Check for inequality.","Check for inequality where <code>None == None</code>.","","Null value representation.","Count the null values.","Aggregate all the columns as the sum of their null value …","Get the null count of the column/group.","","Number of rows in the parquet file.","Offset window boundaries.","","","The expressions you want to join both tables on.","","Options for the function.","“or” operation.","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Extract ordinal year from underlying NaiveDateTime …","","Define a default for the <code>when-then-otherwise</code> expression.","Define a default for the <code>when-then-otherwise</code> expression.","Perform an outer join on two DataFrames","Outer join this query with another lazy query.","Apply window function over a subgroup. This is similar to …","","","","Parse a string into a <code>Duration</code>","","","","","","","Partial comparison for two <code>Arc</code>s.","Path of the scanned file. It can be potentially a glob …","","","","","","Compute the pearson correlation between two columns.","Window duration.","Window duration.","Constant Pi","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …","","","","","Raise expression to the power <code>exponent</code>","","","","Add a prefix to the root column name.","","","Get the product of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Get the product aggregation of an expression.","Profile a LazyFrame.","","","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Find a specific quantile of all the values in the column …","Aggregate a given quantile of the ChunkedArray. Returns …","Aggregate all the columns as their quantile values.","Compute the quantile per group.","Get the quantile of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Get the quantile of the ChunkedArray as a new Series of …","Extract month from underlying NaiveDateTime representation.","Extract quarter from underlying NaiveDateTime …","Extract quarter from underlying NaiveDateTime …","Queues the given command for further execution.","Quoting character.","","Raise an error if CSV is empty (otherwise return an empty …","Raise an error if CSV is empty (otherwise return an empty …","","Assign ranks to data, dealing with ties appropriately.","","","","Read the parquet file in parallel (default). The single …","","","","","Rechunk the memory to contiguous chunks when parsing is …","Aggregate all chunks to a contiguous array of memory.","","","","","","Analogous to <code>Iterator::reduce</code>.","","","","","","Swap-remove a field by name and, if the field existed, …","Rename the Series.","Rename columns in the DataFrame.","Rename field <code>old</code> to <code>new</code>, and return the (owned) old name","Rename the fields of the <code>StructChunked</code>.","Create a column of length <code>n</code> containing <code>n</code> copies of the …","","Repeat the column <code>n</code> times, where <code>n</code> is determined by the …","Replace the leftmost regex-matched (sub)string with …","Replace all regex-matched (sub)strings with another string","Replace the leftmost literal (sub)string with another …","Replace all matching literal (sub)strings with another …","","","","The function output type.","Return a reversed version of this array.","return a Series in reversed order","Reverse every sublist","Reverse the <code>DataFrame</code> from top to bottom.","Reverse column","","The expressions you want to join the right table on.","","","","","Apply a custom function over a rolling/ moving window of …","Apply a custom function over a rolling/ moving window of …","Apply a custom function over a rolling/ moving window of …","Apply a rolling max to a Series.","Apply a rolling maximum.","Apply a rolling mean to a Series.","Apply a rolling mean.","Apply a rolling median to a Series.","Apply a rolling median.","Apply a rolling min to a Series.","Apply a rolling minimum.","Apply a rolling quantile to a Series.","Apply a rolling quantile.","Apply a rolling std_dev to a Series.","Apply a rolling std-dev.","Apply a rolling sum to a Series.","Apply a rolling sum.","Apply a rolling variance to a Series.","Apply a rolling variance.","","Round underlying floating point array to given decimal …","Round the given ms timestamp by the window boundary.","Round the given ns timestamp by the window boundary.","Round the given us timestamp by the window boundary.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","","","","If <code>None</code> will be all written to a single row group.","Proxy of the number of rows in both sides of the joins …","","","","","","Sets the size of the sample taken from the CSV file. The …","Creates a dataframe from the supplied function &amp; scan …","","Create a LazyFrame directly from a ipc scan.","","Create a LazyFrame directly from a parquet scan.","Create a LazyFrame directly from a parquet scan.","Get schema of the Ipc File","Get schema of the Ipc Stream File","<code>Schema</code> of the file.","function to supply the schema. Allows for an optional …","Get a handle to the schema — a map from column names to …","","","","Extract second from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","","Extract the seconds from a <code>Duration</code>","","","Select (and optionally rename, with <code>alias</code>) columns from …","","Used as separator.","","","Set the values where the mask evaluates to <code>true</code> to some …","Set the values at indexes <code>idx</code> to some optional value …","","Set the values at indexes <code>idx</code> by applying a closure to …","Safety","Change the field named <code>name</code> to the given <code>dtype</code> and return …","Change the field at the given index to the given <code>dtype</code> and …","","Try to reduce memory pressure at the expense of …","","Serialize columns in parallel","","","","","Make sure that all columns are contiguous in memory by …","Set this <code>Series</code> as <code>sorted</code> so that downstream code can use …","Sets the validity of this array.","","Shift the values by a given period and fill the parts that …","Shift every sublist.","Shift the values by a given period and fill the parts that …","Shift the values in the array by some period. See the …","Shift the values by a given period and fill the parts that …","Shift the values by a given period and fill the parts that …","Shift the values in the array by some period and fill the …","Remove a field by name, preserving order, and, if the …","Remove a field by name, preserving order, and, if the …","Shrink numeric columns to the minimal required datatype …","","Shrink the capacity of this array to fit its length.","","","","Stream a query result into an csv file. This is useful if …","Stream a query result into an ipc/arrow file. This is …","Stream a query result into a parquet file. This is useful …","","","","Get a zero copy view of the data.","Slice every sublist.","Slice the DataFrame using an offset (starting row) and a …","Slice the Series. <code>offset</code> may be negative.","Slices this <code>StructArray</code>.","","","","","Slices this <code>Array</code>.","","Slices the <code>Array</code>.","","Slices this <code>StructArray</code>.","","Returns this array sliced.","Returns this array sliced.","","Returned a sorted <code>ChunkedArray</code>.","Sort every sublist.","Add a sort operation to the logical plan.","Sort in increasing order. See the eager implementation.","Sort this column by the ordering of another column. Can …","Add a sort operation to the logical plan.","","Sort with given options.","","","","","Compute the spearman rank correlation between two columns. …","","","","","","","","Compute the square root of the given expression","","Check if strings starts with a substring","","Compute and write column statistics.","","","Compute the standard deviation of this ChunkedArray/Series.","Aggregate all the columns as their standard deviation …","Standard deviation of the values of the Series.","Get the standard deviation of the <code>ChunkedArray</code> as a new …","Get the standard deviation of the Series as a new Series …","","","Get the length of the string values as number of bytes.","Get the length of the string values as number of chars.","Slice the string values.","","Whether the melt may be done in the streaming engine This …","","","Convert from Time into Utf8 with the given format. See …","If set then polars will return an error if any date …","Cast expression to another data type. Throws an error if …","","","","","","","","","","","","Gets the number of strong (<code>Arc</code>) pointers to this …","Get the <code>struct_::StructNameSpace</code>.","","","","Suffix to add duplicate column names in join. Defaults to …","","Add a suffix to the root column name.","","Sum all the values in the column named <code>name</code>. Shorthand for …","Compute the sum of the items in every subarray.","Compute the sum the items in every sublist.","Aggregate the sum of the ChunkedArray. Returns <code>None</code> if not …","Aggregate all the columns as their sum values.","Reduce groups to the sum of all the values.","Get the sum of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","","","Performs a set of actions within a synchronous update.","Get the tail of every sublist","Get the last <code>n</code> rows.","Return last n rows of each group","Get the last <code>n</code> elements of the Expr result.","Gather values from ChunkedArray by index.","Take by index. This operation is clone.","Take the values by idx.","Take by index. This operation is clone.","Take by index.","Gather values from ChunkedArray by index.","Take by index.","","Add a condition to the <code>when-then-otherwise</code> expression.","","","Used for <code>DataType::Time</code>.","Create a column of time ranges from a <code>start</code> and <code>stop</code> …","","","","Convert date(time) object to timestamp in <code>TimeUnit</code>.","","","","","Convert self to <code>ArrowSchema</code> by cloning the fields","","","Get a dot language representation of the LogicalPlan.","Get a dot language representation of the Expression.","","Create dummy variables.","Get the output field of this expr","Get Field result of the expression. The schema is the …","Modify the strings to their lowercase equivalent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map to a physical type.","Convert Time into Utf8 with the given format. See chrono …","","","","","","","","Take another <code>Schema</code> and try to find the supertypes between …","","Modify the strings to their titlecase equivalent.","Modify the strings to their uppercase equivalent.","A tolerance in the same unit as the asof column","An timedelta given as","","","","","","","","","","Truncate the given ns timestamp by the window boundary.","Truncate lines that are longer than the schema.","Truncate lines that are longer than the schema.","","Truncate the given us timestamp by the window boundary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the dtype of the field named <code>name</code>, or …","","Look up the name in the schema and return an owned <code>Field</code> …","Return all data about the field named <code>name</code>: its index in …","Get a mutable reference to the dtype of the field named …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a single dtype with a potentially failing mapper …","Map all dtypes with a potentially failing mapper function.","Map a single field with a potentially failing mapper …","","","","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Returns a new <code>StructArray</code>.","Constructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Arc</code> with uninitialized contents, in the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …","","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This should be used as type information. Consider this a …","","","Get unique values of a ChunkedArray","Keep only the unique values in every sub-array.","Keep only the unique values in every sublist.","Drop non-unique rows without maintaining the order of kept …","Get unique values of this expression.","Get unique values in the Series.","Keep only the unique values in every sub-array.","Keep only the unique values in every sublist.","Drop non-unique rows and maintain the order of kept rows.","Get unique values of this expression, while maintaining …","","Unnest the given <code>Struct</code> columns: the fields of the <code>Struct</code> …","","If we have the only reference to <code>T</code> then unwrap it. …","Get maximal value that could be hold by this dtype.","Upsample a <code>DataFrame</code> at a regular frequency.","Upsample a DataFrame at a regular frequency.","Use statistics in the parquet to determine if pages can be …","","","","","The optional validity.","","","Create a <code>DataFrame</code> with the unique <code>values</code> of this <code>Series</code> …","Count all unique values and create a struct mapping value …","","Safety","","Returns the values of this <code>StructArray</code>.","","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Compute the variance of this ChunkedArray/Series.","Aggregate all the columns as their variance values.","Variance of the values of the Series.","Get the variance of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Get the variance of the Series as a new Series of length 1.","","Compute the hash for all values in the array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the number of <code>Weak</code> pointers to this allocation.","Returns the ISO week number starting from 1. The return …","Returns the ISO week number starting from 1. The return …","Returns the ISO week number starting from 1. The return …","Extract ISO weekday from underlying NaiveDate …","Extract ISO weekday from underlying NaiveDateTime …","Returns the ISO weekday number where monday = 1 and sunday …","","","","","An optional slice with the same length as the window that …","An optional slice with the same length as the window that …","An optional slice with the same length as the window that …","Start a <code>when-then-otherwise</code> expression.","Attach a statement to the corresponding condition.","Add another condition to the <code>when-then-otherwise</code> …","The length of the window.","The length of the window.","","The length of the window.","The right table in the join.","","Set the batch size to use while writing the CSV.","Set the batch size (number of records to load at one time)","","Cache the DataFrame after reading.","","Create a new, empty schema with capacity","Sets the chunk size used by the parser. This influences …","Sets the chunk size used by the parser. This influences …","Add a column, given as an expression, to a DataFrame.","Insert a new column in the <code>Schema</code>","Columns to select/ project","Columns to select/ project","Columns to select/ project","Columns to select/ project","Add multiple columns, given as expressions, to a DataFrame.","Add multiple columns to a DataFrame, but evaluate them …","Set the comment character. Lines starting with this …","Set the comment character. Lines starting with this …","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the compression used. Defaults to <code>Zstd</code>.","","Sets the maximum bytes size of a data page. If <code>None</code> will …","Set the CSV file’s date format.","Set the CSV file’s datetime format.","Set the day","Set the days","Set a dtype.","Overwrite the schema with the dtypes in this given Schema. …","Overwrite the schema with the dtypes in this given Schema. …","Overwrite the dtypes in the schema in the order of the …","Set  <code>CsvEncoding</code>","Set  <code>CsvEncoding</code>","","Set the <code>char</code> used as end of line. The default is <code>b&#39;\\\\n&#39;</code>.","Set the extension. Defaults to “.ipc”.","Set the extension. Defaults to “.ipc”.","Set the CSV file’s float precision.","Set <code>milliseconds</code>, <code>microseconds</code>, and <code>nanoseconds</code>","","Set <code>hour</code>, <code>minute</code>, and <code>second</code>","Set <code>hours</code>, <code>minutes</code>, and <code>seconds</code>","Set the hour","Set the hours","Continue with next batch when a ParserError is encountered.","Return a <code>null</code> if an error occurs during parsing.","Continue with next batch when a ParserError is encountered.","Set the number of rows to use when inferring the csv …","Set the number of rows to use when inferring the json …","","","Set the CSV file’s line terminator.","Creates a new <code>Field</code> with metadata.","Attaches a <code>Metadata</code> to <code>Schema</code>","Set the microsecond","Set the microseconds","Set the milliseconds","Set the minute","Set the minutes","Treat missing fields as null.","Treat missing fields as null.","Set the month","Try to stop parsing when <code>n</code> rows are parsed. During …","Stop reading when <code>n</code> rows are read.","Stop reading when <code>n</code> rows are read.","","Stop parsing when <code>n</code> rows are parsed. By settings this …","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","Set the number of threads used in CSV reading. The default …","","Set the nanoseconds","Set the CSV file’s null value representation.","Set values that will be interpreted as missing/ null. Note …","Set values that will be interpreted as missing/ null.","Set allowed optimizations.","Set path of the scanned file. Support glob patterns.","The preferred way to initialize this builder. This allows …","","","","Set paths of the scanned files. Doesn’t glob patterns.","","","","Toggle predicate pushdown optimization.","Set the reader’s column projection. This counts from 0, …","Set the reader’s column projection. This counts from 0, …","Set the reader’s column projection. This counts from 0, …","Set the reader’s column projection: the names of the …","Set the reader’s column projection. This counts from 0, …","Toggle projection pushdown optimization.","Set the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If …","Set the single byte character used for quoting.","Set the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If …","Set the CSV file’s quoting behavior. See more on …","Rechunk the memory to contiguous chunks when parsing is …","Rechunk the DataFrame to contiguous memory after the CSV …","","Rechunk the memory to contiguous chunks when parsing is …","Rechunk the memory to contiguous chunks when parsing is …","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Add a new column at index 0 that counts the rows.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Set the row group size (in number of rows) during writing. …","Field with the same dtype.","Set the CSV file’s schema. This only accepts datatypes …","Set the JSON file’s schema","","Set the CSV file’s schema","Set the JSON file’s schema","Modify a schema before we run the lazy scanning.","Overwrite parts of the inferred schema.","","Set the second","Set the seconds","Set the CSV file’s column separator as a byte character","Set the CSV file’s column separator as a byte character.","Set the CSV file’s column separator as a byte character","Toggle expression simplification optimization on or off.","Skip the first <code>n</code> rows during parsing. The header will be …","Skip the first <code>n</code> rows during parsing. The header will be …","Skip these rows after the header","Skip this number of rows after the header location.","Toggle slice pushdown optimization.","Compute and write statistic","Allow (partial) streaming engine.","Set the CSV file’s time format.","","","Automatically try to parse dates/ datetimes and time. If …","Automatically try to parse dates/datetimes and time. If …","Toggle type coercion optimization.","","Returns this array with a new validity.","","Set the weeks","Set the year","Turn off all optimizations.","","","","“xor” operation.","Extract month from underlying NaiveDate representation. …","Extract month from underlying NaiveDateTime representation.","Extract year from underlying NaiveDateTime representation. …","","","Create a new ChunkedArray with values from self where the …","","","","","","","","","","","","","","","","","","","","function to apply","Also has the input. i.e. avg(“foo”)","","function to apply","","function arguments","","","function arguments","","","length is not yet known so we accept negative offsets","","","","","","output dtype of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper that combines the groups into a parallel iterator …","Same helper as <code>_agg_helper_idx</code> but for aggregations that …","","","","","","","Safety","","","","","","","Applies a kernel that produces <code>Array</code> types.","","","","Applies a kernel that produces <code>Array</code> types.","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","Applies a kernel that produces <code>Array</code> types.","","","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","","","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::Utf8</code>.","","","Check if a binary value contains a literal binary.","","","","Check if a binary value ends with the given sequence.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Check if a binary value starts with the given sequence.","","","","","Specialized expressions for Categorical dtypes.","","Use the string value for sorting","Use the physical categories for sorting","","","","","","","","","","Parsing string values and return a <code>DateChunked</code>","Parsing string values and return a <code>DateChunked</code> Different …","Parsing string values and return a <code>DatetimeChunked</code>.","Parsing string values and return a <code>DatetimeChunked</code> …","Parsing string values and return a <code>TimeChunked</code>","","","Compute the rolling aggregates with a window defined by a …","","Set the labels at the center of the window.","Set the labels at the center of the window.","","","The closed window of that time window if given","","Extract day from underlying NaiveDate representation. …","Extract day from underlying NaiveDateTime representation. …","Extract the days from a <code>Duration</code>","","","","","Optional parameters for the rolling function","","Returns the argument unchanged.","Extract hour from underlying NaiveDateTime representation. …","Extract hour from underlying NaiveDateTime representation. …","Extract the hours from a <code>Duration</code>","","Calls <code>U::from(self)</code>.","Extract year from underlying NaiveDate representation. …","Extract year from underlying NaiveDate representation. …","This year number might not match the calendar year number.","","Extract the microseconds from a <code>Duration</code>","Extract the milliseconds from a <code>Duration</code>","Amount of elements in the window that should be filled …","Amount of elements in the window that should be filled …","Extract minute from underlying NaiveDateTime …","Extract minute from underlying NaiveDateTime …","Extract the minutes from a <code>Duration</code>","Extract month from underlying NaiveDateTime representation.","Extract month from underlying NaiveDateTime representation.","Extract second from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Extract the nanoseconds from a <code>Duration</code>","Returns the day of year starting from 1.","Returns the day of year starting from 1.","","","","Extract month from underlying NaiveDateTime representation.","Extract quarter from underlying NaiveDateTime …","Apply a rolling max to a Series.","Apply a rolling mean to a Series.","Apply a rolling median to a Series.","Apply a rolling min to a Series.","Apply a rolling quantile to a Series.","Apply a rolling std_dev to a Series.","Apply a rolling sum to a Series.","Apply a rolling variance to a Series.","Extract second from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Extract the seconds from a <code>Duration</code>","","","","","","","","","","Returns the ISO week number starting from 1. The return …","Returns the ISO week number starting from 1. The return …","Extract ISO weekday from underlying NaiveDate …","Extract ISO weekday from underlying NaiveDateTime …","An optional slice with the same length as the window that …","An optional slice with the same length as the window that …","The length of the window.","The length of the window.","Extract month from underlying NaiveDate representation. …","Extract month from underlying NaiveDateTime representation.","","","","","","","","","","Parsing string values and return a <code>DateChunked</code>","Parsing string values and return a <code>DateChunked</code> Different …","Parsing string values and return a <code>DatetimeChunked</code>.","Parsing string values and return a <code>DatetimeChunked</code> …","Parsing string values and return a <code>TimeChunked</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Options to connect to various cloud providers.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Parse a configuration from a Hashmap. This is the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Options to connect to various cloud providers.","","","","","","","A nested list with a fixed size in each row","","","","","","The set of supported logical types in this crate.","The time units defined in Arrow.","","","","Opaque binary data of variable length whose offsets are …","","","","A binary true or false.","","<code>true</code> and <code>false</code>.","","","","","","","","","[ChunkIdx, DfIdx]","","A 32-bit date representing the elapsed time since UNIX …","A 32-bit date representing the elapsed time since UNIX …","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","","","A 64-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","","","A 128-bit fixed point decimal number.","Fixed point decimal type optional precision and …","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","","","Measure of elapsed time. This elapsed time is a physical …","","","Extension type.","Characterizes the name and the <code>DataType</code> of a column.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with a fixed number of …","","","An 16-bit float","A 32-bit floating point number.","","A <code>f32</code>","","","A 64-bit floating point number.","","A <code>f64</code>","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","","","","","The type used by polars to index data.","","","","","A 16-bit integer number.","","An <code>i16</code>","","","A 32-bit integer number.","","An <code>i32</code>","","","A 64-bit integer number.","","An <code>i64</code>","","","An 8-bit integer number.","","An <code>i8</code>","","","A “calendar” interval modeling elapsed time that takes …","Opaque binary data of variable length whose offsets are …","A list of some logical data type whose offsets are …","A variable-length UTF-8 encoded string whose offsets are …","Nested type, contains arrays that are filled with one of …","A nested list with a variable size in each row","A list of some logical data type whose offsets are …","","","Utf8Array: caches the string values","Utf8Array: caches the string values","Maps a logical type to a a chunked array implementation of …","","A nested type that is represented as","Time in microseconds.","","Time in milliseconds.","","Time in nanoseconds.","","","","","","Null type","","Can be used to fmt and implements Any, so can be …","A generic type that can be used in a <code>Series</code> &amp;’static str …","","","","","","","","This hashmap has the uses an IdHasher","","","Safety","","","","","","","Time in seconds.","","","","","A nested <code>DataType</code> with a given number of <code>Field</code>s.","This is logical type <code>StructChunked</code> that dispatches most …","","","A 64-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","","","","","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer number.","","An <code>u16</code>","","","An unsigned 32-bit integer number.","","An <code>u32</code>","","","An unsigned 64-bit integer number.","","An <code>u64</code>","","","An unsigned 8-bit integer number.","","An <code>u8</code>","","","A nested datatype that can represent slots of differing …","","A UTF8 encoded string type.","String data","A variable-length UTF-8 encoded string whose offsets are …","","An UTF8 encoded string type.","","","","","","","","","","","","","","","","","","Get data type of <code>ChunkedArray</code>.","","","","","Gets <code>AnyValue</code> from <code>LogicalType</code>","Safety","","Safety","Safety","","","","","","","","","","","","","","","Safety","","","","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","Utf8Array: caches the string values","Utf8Array: caches the string values","","","","","Enable the global string cache as long as the object is …","Disable and clear the global string cache.","Enable the global string cache.","Check whether the global string cache is enabled.","","","","","","Safety","Safety","Specialized expressions for <code>Series</code> with dates/datetimes.","","","","Change the underlying <code>TimeUnit</code>. And update the data …","","Change the underlying <code>TimeZone</code> of the <code>Series</code>. This does …","Get the (local) date of a Date/Datetime","Get the (local) datetime of a Datetime","Get the month of a Date/Datetime","","","","","Returns the argument unchanged.","Get the hour of a Datetime/Time64","","Calls <code>U::from(self)</code>.","","Get the iso-year of a Date/Datetime. This may not …","Get the microsecond of a Time64 (scaled from nanosecs)","Get the millisecond of a Time64 (scaled from nanosecs)","Get the minute of a Datetime/Time64","Get the month of a Date/Datetime","Get the nanosecond part of a Time64","Get the ordinal_day of a Date/Datetime","Extract quarter from underlying NaiveDateTime …","","","Get the second of a Datetime/Time64","Convert from Date/Time/Datetime into Utf8 with the given …","Get the (local) time of a Date/Datetime/Time","","Convert from Date/Time/Datetime into Utf8 with the given …","","","","","","Extract the week from the underlying Date representation. …","Extract the ISO week day from the underlying Date …","Change the underlying <code>TimeUnit</code> of the <code>Series</code>. This does …","Get the year of a Date/Datetime","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Safety","Safety","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Extract day from underlying NaiveDateTime representation. …","Extract hour from underlying NaiveDateTime representation. …","Extract year from underlying NaiveDateTime representation. …","","Extract minute from underlying NaiveDateTime …","Extract month from underlying NaiveDateTime representation.","Returns the number of nanoseconds since the whole non-leap …","Returns the day of year starting from 1.","Extract ordinal year from underlying NaiveDateTime …","Extract quarter from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Convert from Time into Utf8 with the given format. See …","Convert date(time) object to timestamp in <code>TimeUnit</code>.","Convert Time into Utf8 with the given format. See chrono …","Returns the ISO week number starting from 1. The return …","Returns the ISO weekday number where monday = 1 and sunday …","Extract year from underlying NaiveDateTime representation. …","Utility trait to slice concrete arrow arrays whilst …","Slices this <code>Array</code>.","Slices the <code>Array</code>.","","","","used a lot, ensure there is a single impl","","","","","Specialized expressions for <code>Series</code> of <code>DataType::Utf8</code>.","","","Concat the values into a string array.","Check if this column of strings contains a Regex. If <code>strict</code>…","Check if a string value contains a literal substring.","Count all successive non-overlapping regex matches.","","","","Check if a string value ends with the <code>sub</code> string.","","Extract a regex pattern from the a string value. If …","Extract each successive non-overlapping match in an …","","Returns the argument unchanged.","Parse string in base radix into decimal.","","Calls <code>U::from(self)</code>.","Return the length of each string as the number of bytes.","Return the length of each string as the number of …","Replace values that match a regex <code>pat</code> with a <code>value</code>.","Replace all values that match a regex <code>pat</code> with a <code>value</code>.","Replace values that match a regex <code>pat</code> with a <code>value</code>.","Slice the string values.","Split the string by a substring. The resulting dtype is …","Split exactly <code>n</code> times by a given substring. The resulting …","Split exactly <code>n</code> times by a given substring and keep the …","Split the string by a substring and keep the substring. …","Split by a given substring, returning exactly <code>n</code> items. If …","Check if a string value starts with the <code>sub</code> string.","Remove leading and trailing characters, or whitespace if …","Remove trailing characters, or whitespace if matches is …","Remove leading characters, or whitespace if matches is …","Remove prefix.","Remove suffix.","Convert a Utf8 column into a Date/Datetime/Time column.","Convert a Utf8 column into a Date column.","Convert a Utf8 column into a Datetime column.","Convert a Utf8 column into a Decimal column.","Convert all characters to lowercase.","Convert a Utf8 column into a Time column.","Convert all characters to titlecase.","Convert all characters to uppercase.","","","","","Represents a user-defined function","The function implementation.","The function signature.","name","Options for the function.","The function output type.","Infer the schema of a CSV file by reading through the …","","check if csv file is compressed","","Compare <code>Series</code> and <code>ChunkedArray</code>’s and get a <code>boolean</code> mask …","","Used to convert a <code>ChunkedArray</code>, <code>&amp;dyn SeriesTrait</code> and <code>Series</code>","","","","Series","","","","","","Get the sum of the Series as a new Series of length 1.","Create a new Series without checking if the inner dtype of …","convert numerical values to their absolute value","","","","","Append in place. This is done by adding the chunks of <code>other</code>…","","","Retrieve the indexes needed for a sort.","Get first indexes of unique values.","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Array]</code>","Returns a reference to the Arrow ArrayRef","Get a hold to self as <code>Any</code> trait reference. Only …","Get a hold to self as <code>Any</code> trait reference. Only …","Packs every element into a list.","","","","","","Rechunk and return a pointer to the start of the Series. …","Only implemented for numeric types","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Binary]</code>","","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Boolean]</code>","","","","","","","","Cast <code>[Series]</code> to another <code>[DataType]</code>.","Cast from physical to logical types without any checks on …","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Categorical]</code>","Ceil underlying floating point array to the highest …","","","","Get the lengths of the underlying chunks","Underlying chunks.","Underlying chunks.","Safety","","","","Clone inner ChunkedArray and wrap in a new Arc","","","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Get an array with the cumulative sum computed at every …","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Date]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Datetime]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Decimal]</code>","","","","","","","","","","","","","","","","","Drop all null values and return a new Series.","Get datatype of series.","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Duration]</code>","","","Check for equality.","","","Create a boolean mask by checking for equality.","Check for equality where <code>None == None</code>.","Create a boolean mask by checking for equality.","","","","","","","Returns an estimation of the total (heap) allocated size …","Explode a list Series. This expands every item to a new …","Extend the memory backed by this array with the values …","Extend with a constant value.","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Float32]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Float64]</code>","Get field (used in schema)","Replace None values with one of the following strategies:","Filter by boolean mask. This operation clones data.","Filter by boolean mask. This operation clones data.","Floor underlying floating point array to the lowest …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Takes chunks and a polars datatype and constructs the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a single value by index. Don’t use this operation …","Get a pointer to the underlying data of this <code>Series</code>. Can …","","Get the value at this index as a downcastable Any trait …","Get a single value by index. Don’t use this operation …","Greater than comparison.","","","Create a boolean mask by checking if self &gt; rhs.","Greater than or equal comparison.","","Create a boolean mask by checking if self &gt;= rhs.","","Return if any the chunks in this <code>[ChunkedArray]</code> have a …","Get the head of the Series.","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int16]</code>","Unpack to <code>ChunkedArray</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int64]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int8]</code>","","","Convert the values of this Series to a ListChunked with a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Check if Series is empty.","Check if numeric value is finite","Check if float value is infinite","Check if float value is NaN (note this is different than …","Check if float value is NaN (note this is different than …","Get a mask of the non-null values.","Get a mask of the null values.","","","","iterate over <code>Series</code> as <code>AnyValue</code>.","Get length of series.","Take <code>num_elements</code> from the top as a zero copy view.","Unpack to <code>ChunkedArray</code> of dtype list","","Less than comparison.","","","Create a boolean mask by checking if self &lt; rhs.","Less than or equal comparison","Create a boolean mask by checking if self &lt;= rhs.","","","Returns the maximum value in the array, according to the …","Get the max of the Series as a new Series of length 1.","Returns the mean value in the array Returns an option …","","Returns the median value in the array Returns an option …","Get the median of the Series as a new Series of length 1.","Returns the minimum value in the array, according to the …","Get the min of the Series as a new Series of length 1.","","","","","Number of chunks in this Series","Get unique values in the Series.","Name of series.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new empty Series.","Create a new Series filled with values from the given …","","","Check for inequality.","","","Create a boolean mask by checking for inequality.","Check for inequality where <code>None == None</code>.","Create a boolean mask by checking for inequality.","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Null]</code>","Count the null values.","","","Get the product of an array.","Get the quantile of the ChunkedArray as a new Series of …","Aggregate all chunks to a contiguous array of memory.","","","","Rename the Series.","Rename series.","","return a Series in reversed order","Apply a custom function over a rolling/ moving window of …","Round underlying floating point array to given decimal.","Sample a fraction between 0.0-1.0 of this <code>ChunkedArray</code>.","","Check if series are equal. Note that <code>None == None</code> …","Check if all values in series are equal where <code>None == None</code> …","","Shift the values by a given period and fill the parts that …","Shrink the capacity of this array to fit its length.","Shrink the capacity of this array to fit its length.","","","Get a zero copy view of the data.","","","Get the standard deviation of the Series as a new Series …","","Cast throws an error if conversion had overflows","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Struct]</code>","","","","","Compute the sum of all values in this Series. Returns …","Get the sum of the Series as a new Series of length 1. …","Get the tail of the Series.","Take by index. This operation is clone.","Traverse and collect every nth element in a new array.","Take by index. This operation is clone.","Take by index.","Take by index if ChunkedArray contains a single chunk.","Take by index. This operation is clone.","Take by index.","Take by index if ChunkedArray contains a single chunk.","Take by index if ChunkedArray contains a single chunk.","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Time]</code>","Convert a chunk in the Series to the correct Arrow type. …","","Cast numerical types to f64, and keep floats as is.","","","Cast a datelike Series to their physical representation. …","","","","","","","","","","","","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt16]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt32]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt64]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt8]</code>","Get unique values in the Series.","Compute the unique elements, but maintain order. This …","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Utf8]</code>","Get the variance of the Series as a new Series of length 1.","","","","Return this Series with a new name.","Create a new ChunkedArray with values from self where the …","","","","","","","","","","","","","","","","","","","","","","","","Checked integer division. Computes self / rhs, returning …","Checked integer division. Computes self / rhs, returning …","","","drop nulls","ignore nulls","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","A wrapper type that should make it a bit more clear that …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Swaps inner state with the <code>array</code>. Prefer …","","","","","","Temporary swaps out the array, and restores the original …"],"if":[0,0,0,0,0,0,[[],1],0,0,0,0,0,0,0,0,0,[[],2],0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[[5,[4]]],2],[[[5,[-1]]],[[5,[-1]]],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[9]],[5,[9]]]],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[10]],[12,[11]]]],[[[5,[10]],[5,[10]]]],[[[5,[9]],[5,[9]]]],[[[5,[10]],[5,[10]]]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[13]],[5,[13]]]],[[[5,[9]],14]],[[[5,[13]],[5,[13]]]],[[[5,[-1]],15],[[17,[15,16]]],18],[[[5,[13]],19],15],[[[5,[20]],19],15],[[[5,[[21,[-1]]]],19],15,22],[[[5,[-1]],19],15,6],[[[5,[4]],19],15],[[[5,[9]],19],15],[[[5,[10]],19],15],[[[5,[13]]],2],[[],23],[[[5,[13]]],[[24,[2]]]],[[[5,[4]]],[[26,[[0,[25]]]]]],[[[5,[20]]],[[26,[[0,[25]]]]]],[[[5,[4]],14],[[26,[[0,[25]]]]]],[[[5,[20]],14],[[26,[[0,[25]]]]]],[[[5,[13]]],2],[[[5,[13]]],[[24,[2]]]],[[[5,[-1]],[5,[-1]]],1,27],[[[5,[[21,[-1]]]],-2],[[5,[[21,[-1]]]]],22,[28,29]],[[[5,[10]],-1],[[5,[10]]],[28,29]],[[[5,[4]],-1],[[5,[4]]],[28,29]],[[[5,[13]],-1],[[5,[13]]],[28,29]],[[[5,[9]],-1],[[5,[9]]],[28,29]],[[[5,[-1]],-2],[[5,[-1]]],6,[28,29]],[[[5,[4]],-1],[[5,[4]]],30],[[[5,[4]],-1],[[5,[-2]]],[30,29],27],[[[5,[31]],-1],15,28],[[[5,[32]],-1],15,28],[[[5,[-1]],-2],[[5,[-3]]],27,30,27],[[[5,[-1]],-2],[[5,[-1]]],6,[28,29]],[[[5,[-1]],28],[[5,[-1]]],6],[[[5,[13]],28],[[5,[13]]]],[[[5,[9]],28],[[5,[9]]]],[[[5,[10]],28],[[5,[10]]]],[[[5,[9]],28],[[5,[-1]]],27],[[[5,[-1]],28],[[5,[-2]]],6,27],[[[5,[10]],28],[[5,[-1]]],27],[[[5,[13]],28],[[5,[-1]]],27],[[[5,[10]],-1],[[5,[10]]],30],[[[5,[-1]],-2],1,6,[28,29]],[[[5,[9]],-1],[[5,[9]]],30],[[[5,[-1]],33,-2],[[5,[-3]]],27,30,27],[[[5,[9]],-1],[[5,[9]]],30],[[[5,[20]],28],[[17,[[5,[20]],16]]]],[[[5,[4]],28],[[17,[[5,[4]],16]]]],[[[5,[9]],-1,[12,[-2]]],1,28,[]],[[[5,[10]],-1,[12,[-2]]],1,28,[]],[[[5,[-1]],-2,[12,[-3]]],1,6,28,[]],[[[5,[13]],-1,[12,[-2]]],1,28,[]],[[[5,[4]],-1,[12,[-2]]],1,28,[]],[[[5,[[21,[-1]]]],-2,[12,[-3]]],1,22,28,[]],[[[5,[[21,[-1]]]],-2],[[5,[[21,[-1]]]]],22,[28,29]],[[[5,[13]],-1],[[5,[13]]],[28,29]],[[[5,[-1]],-2],[[5,[-1]]],6,[28,29]],[[[5,[10]],-1],[[5,[10]]],[28,29]],[[[5,[4]],-1],[[5,[4]]],[28,29]],[[[5,[9]],-1],[[5,[9]]],[28,29]],[[[5,[-1]],-2],[[5,[-3]]],27,30,27],[[[5,[10]],34],[[5,[35]]]],[[[5,[32]],34],[[5,[35]]]],[[[5,[13]],34],[[5,[35]]]],[[[5,[-1]],34],[[5,[35]]],36],[[[5,[9]],34],[[5,[35]]]],[[[5,[31]],34],[[5,[35]]]],[[[5,[10]],37],[[17,[[5,[35]],16]]]],[[[5,[32]],37],[[17,[[5,[35]],16]]]],[[[5,[13]],37],[[17,[[5,[35]],16]]]],[[[5,[9]],37],[[17,[[5,[35]],16]]]],[[[5,[-1]],37],[[17,[[5,[35]],16]]],36],[[[5,[31]],37],[[17,[[5,[35]],16]]]],[[[5,[10]]],[[17,[[5,[35]],16]]]],[[[5,[13]]],[[17,[[5,[35]],16]]]],[[[5,[32]]],[[17,[[5,[35]],16]]]],[[[5,[9]]],[[17,[[5,[35]],16]]]],[[[5,[-1]]],[[17,[[5,[35]],16]]],36],[[[5,[[21,[-1]]]]],[[17,[[5,[35]],16]]],22],[[[5,[31]]],[[17,[[5,[35]],16]]]],0,[[[5,[20]]],[[5,[20]]]],[[[5,[9]]],[[5,[10]]]],[[[5,[10]]],[[5,[10]]]],[[[5,[4]]],[[5,[4]]]],[[[5,[-1]]],[[5,[-1]]],27],[[[5,[-1]]],33,27],[[[5,[9]]],[[5,[9]]]],[[[5,[9]]],[[5,[9]]]],[[[5,[13]],[5,[13]]]],[[[5,[-1]],[5,[-1]]],[],36],[[[5,[13]],[5,[13]]]],[[23,23],23],[[23,23],1],[[[5,[-1]],[5,[-1]]],[],36],[[[5,[13]],[5,[13]]]],[[[5,[13]],[5,[13]]]],[[23,23],23],[[23,23],1],[23,11],[23,11],[[[5,[-1]],[5,[-1]]],[],36],[[[5,[13]],[5,[13]]]],[[[5,[13]],[5,[13]]]],[[23,23],23],[[23,23],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[5,[-1]],33],[[17,[15,16]]],6],[[[5,[13]],33],[[17,[15,16]]]],[[[5,[10]],33],[[17,[15,16]]]],[[[5,[20]],33],[[17,[15,16]]]],[[[5,[9]],33],[[17,[15,16]]]],[[[5,[4]],33],[[17,[15,16]]]],[[[5,[-1]],-2],[[5,[-3]]],6,[28,29],6],[[[5,[4]],33],[[17,[15,16]]]],[[[5,[13]],33],[[17,[15,16]]]],[[[5,[20]],33],[[17,[15,16]]]],[[[5,[9]],33],[[17,[15,16]]]],[[[5,[-1]],33],[[17,[15,16]]],6],[[[5,[10]],33],[[17,[15,16]]]],[[[5,[-1]],15],[[17,[15,16]]],38],[[[5,[-1]],-2],[[17,[15,16]]],38,8],[[[5,[-1]]],[[43,[[42,[[41,[39,40]]]]]]],27],[[[5,[-1]]],[[44,[[41,[39,40]],40]]],27],[[[5,[-1]]],[[44,[[41,[39,40]],40]]],27],[[[5,[-1]]],[[5,[-1]]],27],[23,23],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[23,23],[[[5,[-1]]],[[17,[12,16]]],6],[[23,23],2],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]]],[[0,[25,45]]],6],[[],[[5,[-1]]],27],[[],23],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[23,23],23],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],15],[[17,[15,16]]],18],[46,1],[[[5,[-1]]],1,27],[46,1],[46,1],[[[5,[-1]]],33,27],[[],23],[[23,23],2],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[20]]],[[17,[15,16]]]],[[[5,[4]]],[[17,[[1,[15,[48,[47]]]],16]]]],[[[5,[20]]],[[17,[[1,[15,[48,[47]]]],16]]]],[[[5,[9]]],[[17,[[1,[15,[48,[47]]]],16]]]],[[[5,[-1]],[5,[-1]]],1,6],[[23,-1],1,49],[[[5,[13]],2],[[17,[[5,[13]],16]]]],[[[5,[-1]]],[[17,[[5,[-1]],16]]],6],[[[5,[10]],[12,[11]]],[[17,[[5,[10]],16]]]],[[[5,[20]],[5,[13]]],[[17,[[5,[20]],16]]]],[[[5,[10]],[5,[13]]],[[17,[[5,[10]],16]]]],[[[5,[9]],[5,[13]]],[[17,[[5,[9]],16]]]],[[[5,[4]],[5,[13]]],[[17,[[5,[4]],16]]]],[[[5,[13]],[5,[13]]],[[17,[[5,[13]],16]]]],[[[5,[[21,[-1]]]],[5,[13]]],[[17,[[5,[[21,[-1]]]],16]]],22],[[[5,[-1]],[5,[13]]],[[17,[[5,[-1]],16]]],6],[[[5,[-1]]],[[24,[46]]],27],0,[[[5,[10]],50],[[17,[1,51]]]],[[[5,[4]],50],[[17,[1,51]]]],[[[5,[[21,[-1]]]],50],[[17,[1,51]]],22],[[[5,[9]],50],[[17,[1,51]]]],[[[5,[-1]],50],[[17,[1,51]]],6],[[[5,[13]],50],[[17,[1,51]]]],[[[5,[20]],50],[[17,[1,51]]]],[[23,50],[[17,[1,51]]]],[[23,50],[[17,[1,51]]]],[[23,50],[[17,[1,51]]]],[[23,50],[[17,[1,51]]]],[[23,50],[[17,[1,51]]]],[[[5,[-1]],-2],1,27,30],[[[5,[4]],-1],1,30],[-1,-1,[]],[-1,[[5,[-2]]],39,27],[-1,-1,[]],[-1,-1,[]],[11,[[24,[23]]]],[11,23],[11,23],[11,23],[[14,-1],[[5,[-2]]],49,[27,27]],[[[5,[-1]],-2],[[5,[-1]]],[27,27],49],[[14,[44,[[41,[39,40]],40]]],[[5,[-1]]],27],[[14,[44,[[41,[39,40]],40]],33],[[5,[-1]]],27],[-1,[[5,[-2]]],49,6],[-1,[[5,[9]]],49],[-1,[[5,[4]]],49],[-1,[[5,[10]]],49],[-1,[[5,[-2]]],49,6],[-1,[[5,[13]]],49],[-1,[[5,[13]]],49],[-1,[[5,[4]]],49],[-1,[[5,[9]]],49],[-1,[[5,[[21,[-2]]]]],49,22],[-1,[[5,[10]]],49],[-1,[[5,[4]]],49],[-1,23,49],[[14,-1],[[5,[[21,[-2]]]]],25,22],[[14,-1],[[5,[13]]],25],[[14,-1],[[5,[10]]],25],[[14,-1],[[5,[9]]],25],[[14,-1],[[5,[-2]]],25,6],[-1,[[5,[9]]],49],[-1,[[5,[4]]],49],[-1,[[5,[10]]],49],[-1,[[5,[4]]],49],[-1,[[5,[-2]]],49,6],[-1,[[5,[[21,[-2]]]]],49,22],[-1,[[5,[13]]],49],[-1,[[5,[9]]],49],[-1,[[5,[13]]],49],[-1,[[5,[10]]],49],[[14,-1],[[5,[9]]],25],[[14,-1],[[5,[[21,[-2]]]]],25,22],[[14,-1],[[5,[13]]],25],[[14,-1],[[5,[-2]]],25,6],[[14,-1],[[5,[10]]],25],[14,[[24,[23]]]],[-1,[[5,[9]]],52],[-1,[[5,[9]]],52],[-1,[[5,[-2]]],52,6],[-1,[[5,[13]]],52],[-1,[[5,[13]]],52],[-1,[[5,[4]]],52],[[14,[12,[-1]]],[[5,[[21,[-1]]]]],22],[[14,[12,[-1]]],[[5,[9]]],[[53,[14]]]],[[14,[12,[2]]],[[5,[13]]]],[[14,[12,[-1]]],[[5,[10]]],[[53,[[12,[11]]]]]],[[14,12],[[5,[-1]]],6],[[14,[12,[[24,[-1]]]]],[[5,[10]]],[[53,[[12,[11]]]]]],[[14,[12,[[24,[-1]]]]],[[5,[[21,[-1]]]]],22],[[14,[12,[[24,[-1]]]]],[[5,[9]]],[[53,[14]]]],[[14,[12,[[24,[2]]]]],[[5,[13]]]],[[14,[12,[24]]],[[5,[-1]]],6],[-1,[[5,[13]]],54],[-1,[[5,[-2]]],54,6],[[14,[44,[40]]],[[5,[-1]]],6],[[14,-1,46],[[5,[[21,[-1]]]]],22],[[14,2,46],[[5,[13]]]],[[14,[12,[11]],46],[[5,[10]]]],[[14,46],[[5,[-1]]],6],[[14,14,46],[[5,[9]]]],[[14,15,46],[[5,[20]]]],[[14,15,46],[[5,[4]]]],[[14,46],[[5,[[21,[-1]]]]],22],[[14,46],[[5,[13]]]],[[14,46],[[5,[-1]]],6],[[14,46],[[5,[20]]]],[[14,46],[[5,[10]]]],[[14,46],[[5,[9]]]],[[14,46],[[5,[4]]]],[[14,46,33],[[5,[4]]]],[[14,46,33,46],[[5,[20]]]],[[[5,[-1]],[5,[35]]],[[17,[[5,[-1]],16]]],27],[[[5,[-1]],[12,[55]]],[[17,[[5,[-1]],16]]],27],[[[5,[-1]],46],24,27],[[[5,[[21,[-1]]]],46],[[17,[56,16]]],22],[[[5,[13]],46],[[17,[56,16]]]],[[[5,[9]],46],[[17,[56,16]]]],[[[5,[4]],46],[[17,[56,16]]]],[[[5,[10]],46],[[17,[56,16]]]],[[[5,[-1]],46],[[17,[56,16]]],6],[[[5,[20]],46],[[17,[56,16]]]],[[[5,[13]],46],56],[[[5,[20]],46],56],[[[5,[[21,[-1]]]],46],56,22],[[[5,[9]],46],56],[[[5,[4]],46],56],[[[5,[10]],46],56],[[[5,[-1]],46],56,6],[[[5,[20]],46],[[24,[15]]]],[[[5,[4]],46],[[24,[15]]]],[[[5,[-1]]],23,27],[[[5,[4]]],15],[[[5,[20]]],15],[[[5,[[21,[-1]]]],46],[[24,[57]]],22],[[[5,[[21,[-1]]]],46],[[24,[57]]],22],[23,58],[[[5,[-1]],46],24,27],[[[5,[9]]],46],[[[5,[20]]],46],[[[5,[4]]],46],[[[5,[10]]],46],[[[5,[10]],2,2],[[17,[19,16]]]],[[[5,[9]],2,2],[[17,[19,16]]]],[[[5,[[21,[-1]]]],2,2],[[17,[19,16]]],22],[[[5,[-1]],2,2],[[17,[19,16]]],6],[[[5,[4]],2,2],[[17,[19,16]]]],[[[5,[13]],2,2],[[17,[19,16]]]],[[[5,[20]],2,2],[[17,[19,16]]]],[[[5,[-1]],46,2,46],19,36],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[-1]]],2,27],[[[5,[-1]],[24,[46]]],[[5,[-1]]],27],[[],46],[[],46],[[],46],[[46,59,[24,[60]]],[[5,[-1]]],6],[[[5,[20]]],33],[[[5,[4]]],33],[[23,23],1],[[23,23],23],[[23,23],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[61]]],[[63,[62,61]]]],[[[5,[64]],65,[24,[66]]],[[63,[67,64]]]],[[[5,[68]],[24,[46]],46],[[17,[[63,[69,68]],16]]]],[[[5,[68]],[24,[46]],46],[[63,[69,68]]]],[[[5,[64]],65],[[63,[70,64]]]],[[[5,[13]]]],[[[5,[[21,[-1]]]]],[],22],[[[5,[4]]]],[[[5,[9]]]],[[[5,[10]]]],[[[5,[20]]]],[[[5,[-1]]],[],6],[23],[[[5,[-1]]],[[0,[25,71,72,73,45,54]]],6],[[[5,[-1]]],15,27],[[[5,[68]]],15],[[[5,[64]]],[[63,[74,64]]]],[23,2],[[[5,[-1]]],2,27],[23,2],[[[5,[-1]]],[[5,[13]]],75],[[[5,[-1]]],[[5,[13]]],75],[[[5,[-1]]],[[5,[13]]],75],[[[5,[-1]]],[[5,[13]]],75],[[[5,[-1]]],[[5,[13]]],27],[[[5,[-1]]],[[5,[13]]],27],[[[5,[-1]]],2,27],[[[5,[-1]]],58,27],[23,[[76,[23]]]],[23,[[77,[23]]]],[[[5,[-1]]],[[43,[[42,[[41,[39,40]]]]]]],27],0,[[[5,[-1]]],24,27],[[[5,[-1]]],[[24,[46]]],27],[[[5,[-1]]],[[78,[-1]]],27],[[[5,[-1]]],46,27],[[[5,[-1]],-2],[[5,[-1]]],6,[7,79]],[[[5,[-1]],-2],[[5,[-1]]],6,[7,79]],[[[5,[-1]],-2],[[5,[-1]]],6,[7,79]],[[[5,[-1]],46],[[5,[-1]]],27],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[-1]]],24,6],[[[5,[13]]],[[24,[2]]]],[[[5,[10]]],15],[[[5,[-1]]],15,6],[[[5,[4]]],15],[[[5,[13]]],15],[[[5,[20]]],15],[[[5,[9]]],15],[[[5,[13]]],[[24,[80]]]],[[[5,[-1]]],[[24,[80]]],6],[[[5,[31]]],[[24,[59]]]],[[[5,[-1]]],[[24,[80]]],36],[[[5,[32]]],[[24,[80]]]],[[[5,[-1]]],15,36],[[[5,[31]]],15],[[[5,[32]]],15],[[[5,[-1]]],24,6],[[[5,[13]]],[[24,[2]]]],[[[5,[10]]],15],[[[5,[13]]],15],[[[5,[9]]],15],[[[5,[20]]],15],[[[5,[-1]]],15,6],[[[5,[4]]],15],[[14,[12,[11]],46,46],[[5,[13]]]],[[14,12],[[5,[-1]]],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],15],[[17,[15,16]]],18],[[[5,[9]]],[[17,[46,16]]]],[[[5,[10]]],[[17,[46,16]]]],[[[5,[-1]]],[[17,[46,16]]],36],[[[5,[-1]]],14,27],[[14,-1],[[5,[31]]],[[53,[[12,[[24,[59]]]]]]]],[[14,[81,[55]]],[[5,[35]]]],[[14,-1],[[5,[9]]],[[53,[[12,[[24,[14]]]]]]]],[[14,-1],[[5,[32]]],[[53,[[12,[[24,[80]]]]]]]],[[14,-1],[[5,[35]]],[[53,[[12,[[24,[55]]]]]]]],[[14,-1],[[5,[10]]],[[53,[[12,[[24,[[12,[11]]]]]]]]]],[[14,-1],[[5,[10]]],[[53,[[12,[[12,[11]]]]]]]],[[14,-1],[[5,[10]]],[[53,[[12,[[82,[[12,[11]]]]]]]]]],[[14,[81,[60]]],[[5,[83]]]],[[14,-2],[[5,[[21,[-1]]]]],22,[[53,[[12,[[24,[-1]]]]]]]],[[14,-1],[[5,[84]]],[[53,[[12,[85]]]]]],[[14,-1],[[5,[31]]],[[53,[[12,[59]]]]]],[[14,[12,[-1]]],[[5,[[21,[-1]]]]],22],[[14,-1],[[5,[10]]],[[53,[[12,[[24,[[44,[11,40]]]]]]]]]],[[14,-1],[[5,[86]]],[[53,[[12,[87]]]]]],[[14,-1],[[5,[88]]],[[53,[[12,[[24,[89]]]]]]]],[[14,-1],[[5,[32]]],[[53,[[12,[80]]]]]],[[14,-1],[[5,[83]]],[[53,[[12,[60]]]]]],[[14,[81,[47]]],[[5,[64]]]],[[14,-1],[[5,[90]]],[[53,[[12,[[24,[11]]]]]]]],[[14,-1],[[5,[86]]],[[53,[[12,[[24,[87]]]]]]]],[[14,-1],[[5,[88]]],[[53,[[12,[89]]]]]],[[14,-1],[[5,[35]]],[[53,[[12,[55]]]]]],[[14,-1],[[5,[10]]],[[53,[[12,[[44,[11,40]]]]]]]],[[14,-1],[[5,[84]]],[[53,[[12,[[24,[85]]]]]]]],[[14,-1],[[5,[9]]],[[53,[[12,[[24,[66]]]]]]]],[[14,-1],[[5,[83]]],[[53,[[12,[[24,[60]]]]]]]],[[14,-1],[[5,[13]]],[[53,[[12,[[24,[2]]]]]]]],[[14,-1],[[5,[61]]],[[53,[[12,[91]]]]]],[[14,-1],[[5,[9]]],[[53,[[12,[[24,[[82,[14]]]]]]]]]],[[14,-1],[[5,[61]]],[[53,[[12,[[24,[91]]]]]]]],[[14,[81,[91]]],[[5,[61]]]],[[14,-1],[[5,[9]]],[[53,[[12,[14]]]]]],[[14,-1],[[5,[9]]],[[53,[[12,[[82,[14]]]]]]]],[[14,-1],[[5,[13]]],[[53,[[12,[2]]]]]],[[14,-1],[[5,[9]]],[[53,[[12,[66]]]]]],[[14,-1],[[5,[10]]],[[53,[[12,[[24,[[82,[[12,[11]]]]]]]]]]]],[[14,-1],[[5,[90]]],[[53,[[12,[11]]]]]],[[14,-1],[[5,[64]]],[[53,[[12,[[24,[47]]]]]]]],[[14,-1],[[5,[64]]],[[53,[[12,[47]]]]]],[14,[[5,[[21,[-1]]]]],22],[[[5,[13]],46,46],[[5,[13]]]],[[[5,[-1]],46,46],[[5,[-1]]],6],[[[5,[9]],46,46],[[5,[9]]]],[[[5,[4]],46,46],[[5,[4]]]],[[[5,[20]],46,46],[[5,[20]]]],[[[5,[[21,[-1]]]],46,46],[[5,[[21,[-1]]]]],22],[[[5,[10]],46,46],[[5,[10]]]],[[14,[44,[40]],[24,[92]]],[[5,[-1]]],6],[[14,[44,[-1,40]]],[[5,[[21,[-1]]]]],22],[[14,[44,[40]]],[[5,[-1]]],6],[[[5,[-1]]],[[5,[-1]]],75],[[[5,[13]]]],[[[5,[13]]]],[23,23],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[20]],[5,[20]]],[[5,[13]]]],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[9]],14],[[5,[13]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[10]],[5,[10]]],[[5,[13]]]],[[[5,[9]],[5,[9]]],[[5,[13]]]],[[[5,[20]],[5,[20]]]],[[[5,[13]],[5,[13]]],[[5,[13]]]],[[[5,[4]],[5,[4]]],[[5,[13]]]],[[[5,[-1]],-2],[[5,[13]]],6,8],[[[5,[-1]],[5,[-1]]],[[5,[13]]],6],[[[5,[10]],[12,[11]]],[[5,[13]]]],[[[5,[9]],14],[[5,[13]]]],[[[5,[-1]]],46,27],0,0,[[[5,[4]]],[[0,[93]]]],[[[5,[9]]],[[0,[93]]]],[[[5,[9]]],[[0,[94]]]],[[[5,[4]]],[[0,[94]]]],[[[5,[-1]]],15,6],[[[5,[31]],80,95],[[17,[[24,[59]],16]]]],[[[5,[32]],80,95],[[17,[[24,[80]],16]]]],[[[5,[-1]],80,95],[[17,[[24,[80]],16]]],36],[[[5,[-1]],80,95],[[17,[15,16]]],36],[[[5,[32]],80,95],[[17,[15,16]]]],[[[5,[31]],80,95],[[17,[15,16]]]],[[14,46,80],[[17,[[5,[13]],16]]]],[[14,46,80,80],[[17,[[5,[-1]],16]]],6],[[14,46],[[5,[-1]]],6],[[14,46,80,80],[[5,[-1]]],6],[[[5,[-1]]],[[5,[-1]]],27],[[[5,[-1]]],96,27],[[[5,[4]]],15],[[[5,[84]]],15],[[[5,[64]]],15],[[[5,[35]]],15],[[[5,[88]]],15],[[[5,[61]]],15],[[[5,[86]]],15],[[[5,[83]]],15],[[[5,[31]]],15],[[[5,[32]]],15],[[[5,[90]]],15],[[[5,[83]]],15],[[[5,[32]]],15],[[[5,[64]]],15],[[[5,[88]]],15],[[[5,[86]]],15],[[[5,[31]]],15],[[[5,[90]]],15],[[[5,[4]]],15],[[[5,[61]]],15],[[[5,[84]]],15],[[[5,[35]]],15],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],15],[[17,[15,16]]],18],[[23,23],1],[[[5,[-1]],14],1,27],[[[5,[4]]],[[5,[4]]]],[[[5,[10]]],[[5,[10]]]],[[[5,[13]]],[[5,[13]]]],[[[5,[20]]],[[5,[20]]]],[[[5,[[21,[-1]]]]],[[5,[[21,[-1]]]]],22],[[[5,[9]]],[[5,[9]]]],[[[5,[-1]]],[[5,[-1]]],6],[[[5,[-1]],28,97],[[17,[15,16]]],6],[[[5,[-1]],46,-2],[[17,[[5,[-1]],16]]],75,30],[[[5,[-1]],80,2,2,[24,[60]]],[[17,[[5,[-1]],16]]],27],[[[5,[-1]],46,2,2,[24,[60]]],[[17,[[5,[-1]],16]]],27],[[[5,[13]],[5,[13]],[24,[2]]],[[17,[[5,[13]],16]]]],[[[5,[-1]],[5,[13]],24],[[17,[[5,[-1]],16]]],6],[[[5,[10]],[5,[13]],[24,[[12,[11]]]]],[[17,[[5,[10]],16]]]],[[[5,[9]],[5,[13]],[24,[14]]],[[17,[[5,[9]],16]]]],[[23,23,2],1],[[[5,[13]],-1,[24,[2]]],[[17,[[5,[13]],16]]],49],[[[5,[-1]],-2,24],[[17,[[5,[-1]],16]]],6,49],[[[5,[10]],-1,[24,[[12,[11]]]]],[[17,[[5,[10]],16]]],49],[[[5,[9]],-1,[24,[14]]],[[17,[[5,[9]],16]]],49],[[[5,[9]],[12,[55]],-1],[[17,[15,16]]],49],[[[5,[-1]],[12,[55]],-2],[[17,[15,16]]],98,49],[[[5,[13]],[12,[55]],-1],[[17,[15,16]]],49],[[[5,[13]],-1,-2],[[17,[[5,[13]],16]]],49,28],[[[5,[-1]],-2,-3],[[17,[[5,[-1]],16]]],6,49,28],[[[5,[10]],-1,-2],[[17,[[5,[10]],16]]],49,28],[[[5,[9]],-1,-2],[[17,[[5,[9]],16]]],49,28],[[[5,[4]]],1],[[[5,[4]],33],1],[[[5,[-1]],58],1,27],[[23,58],1],[[[5,[13]],47],[[5,[13]]]],[[[5,[-1]],47],[[5,[-1]]],6],[[[5,[20]],47],[[5,[20]]]],[[[5,[9]],47],[[5,[9]]]],[[[5,[[21,[-1]]]],47],[[5,[[21,[-1]]]]],22],[[[5,[10]],47],[[5,[10]]]],[[[5,[4]],47],[[5,[4]]]],[[[5,[13]],47,[24,[2]]],[[5,[13]]]],[[[5,[10]],47,[24,[[12,[11]]]]],[[5,[10]]]],[[[5,[20]],47,[24,[15]]],[[5,[20]]]],[[[5,[4]],47,[24,[15]]],[[5,[4]]]],[[[5,[9]],47,[24,[14]]],[[5,[9]]]],[[[5,[[21,[-1]]]],47,[24,[[21,[-1]]]]],[[5,[[21,[-1]]]]],22],[[[5,[-1]],47,24],[[5,[-1]]],6],[[[5,[-1]]],1,27],[[[5,[-1]],47,46],[[5,[-1]]],27],[[[5,[-1]],2],[[5,[-1]]],36],[[[5,[13]],2],[[5,[13]]]],[[[5,[10]],2],[[5,[10]]]],[[[5,[32]],2],[[5,[32]]]],[[[5,[31]],2],[[5,[31]]]],[[[5,[9]],2],[[5,[9]]]],[[[5,[13]],34],[[5,[13]]]],[[[5,[-1]],34],[[5,[-1]]],36],[[[5,[10]],34],[[5,[10]]]],[[[5,[32]],34],[[5,[32]]]],[[[5,[31]],34],[[5,[31]]]],[[[5,[9]],34],[[5,[9]]]],[[[5,[-1]],11],[[24,[80]]],6],[[[5,[31]],11],15],[[[5,[32]],11],15],[[[5,[-1]],11],15,36],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[23,23],23],[[23,23],1],[[[5,[-1]],15],[[17,[15,16]]],18],[[[5,[13]]],[[24,[55]]]],[[[5,[-1]]],24,6],[[[5,[20]]],15],[[[5,[4]]],15],[[[5,[-1]]],15,6],[[[5,[9]]],15],[[[5,[13]]],15],[[[5,[10]]],15],[[23,23],23],[[[5,[-1]],[24,[46]]],[[5,[-1]]],27],[[[5,[-1]],-2],[[17,[[5,[-1]],16]]],27,[[53,[[12,[55]]]],99]],[[[5,[-1]],[5,[35]]],[[17,[[5,[-1]],16]]],27],[[[5,[-1]],-2],[[5,[-1]]],27,[[53,[[12,[55]]]],99]],[[[5,[-1]],[5,[35]]],[[5,[-1]]],27],0,[[[5,[-1]],46],[[5,[-1]]],6],[[[5,[9]],46],[[17,[15,16]]]],[[[5,[4]],33],1],[[[5,[4]]],[[17,[[103,[100,[102,[[101,[46]]]]]],16]]]],[[[5,[-1]]],[[17,[[103,[104,[102,[[101,[46]]]]]],16]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[20]],33],1],[[[5,[10]]],[[5,[9]]]],[[[5,[-1]]],[[44,[24,40]]],6],[[[5,[-1]]],[[105,[[44,[40]],[44,[24,40]]]]],6],[[23,23],1],[[[5,[[21,[-1]]]],-2],[[17,[[5,[[21,[-1]]]],16]]],22,[28,29]],[[[5,[4]],-1],[[17,[[5,[4]],16]]],[28,29]],[[[5,[10]],-1],[[17,[[5,[10]],16]]],[28,29]],[[[5,[9]],-1],[[17,[[5,[9]],16]]],[28,29]],[[[5,[-1]],-2],[[17,[[5,[-1]],16]]],6,[28,29]],[[[5,[13]],-1],[[17,[[5,[13]],16]]],[28,29]],[[[5,[4]],-1],[[17,[[5,[4]],16]]],30],[[[5,[20]],-1],[[17,[[5,[4]],16]]],30],[[[5,[-1]],-2],[[17,[[5,[-3]],-4]]],27,[30,29],27,[]],[[[5,[-1]],-2],[[17,[[5,[-3]],-4]]],27,30,27,[]],[[[5,[-1]],-2],[[17,[[5,[-3]],-4]]],27,30,27,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[14,-1],[[17,[[5,[-2]],-3]]],49,[27,27],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[[23,23],23],[[[5,[32]]],[[17,[[5,[32]],16]]]],[[[5,[9]]],[[17,[[5,[9]],16]]]],[[[5,[-1]]],[[17,[[5,[-1]],16]]],36],[[[5,[[21,[-1]]]]],[[17,[[5,[[21,[-1]]]],16]]],22],[[[5,[31]]],[[17,[[5,[31]],16]]]],[[[5,[10]]],[[17,[[5,[10]],16]]]],[[[5,[13]]],[[17,[[5,[13]],16]]]],[[[5,[-1]],15],[[17,[[5,[-1]],16]]],27],[[[5,[-1]]],1,27],0,[[[5,[-1]],46],[],27],[[[5,[-1]],11],[[24,[80]]],6],[[[5,[32]],11],15],[[[5,[-1]],11],15,36],[[[5,[31]],11],15],[[[5,[35]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[83]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[32]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[86]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[90]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[9]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[64]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[[21,[-1]]]],107,[44,[60,40]]],[[17,[1,16]]],22],[[[5,[13]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[88]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[10]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[31]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[84]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[61]],107,[44,[60,40]]],[[17,[1,16]]]],[[[5,[64]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[83]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[84]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[[21,[-1]]]],107,[12,[60]]],[[17,[1,16]]],22],[[[5,[61]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[88]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[86]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[31]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[13]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[9]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[90]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[10]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[32]],107,[12,[60]]],[[17,[1,16]]]],[[[5,[35]],107,[12,[60]]],[[17,[1,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[20]]],46],[[14,-1],[[5,[-2]]],39,[27,27]],[[[5,[-1]],[44,[[41,[39,40]],40]]],[[5,[-1]]],27],[[[5,[-1]],14],[[5,[-1]]],27],[[[5,[4]],[5,[-1]],-2],[[5,[4]]],27,30],[[[5,[10]],[5,[13]],[5,[10]]],[[17,[[5,[10]],16]]]],[[[5,[9]],[5,[13]],[5,[9]]],[[17,[[5,[9]],16]]]],[[[5,[4]],[5,[13]],[5,[4]]],[[17,[[5,[4]],16]]]],[[[5,[[21,[-1]]]],[5,[13]],[5,[[21,[-1]]]]],[[17,[[5,[[21,[-1]]]],16]]],22],[[[5,[13]],[5,[13]],[5,[13]]],[[17,[[5,[13]],16]]]],[[[5,[-1]],[5,[13]],[5,[-1]]],[[17,[[5,[-1]],16]]],6],[[[5,[20]],[5,[13]],[5,[20]]],[[17,[[5,[20]],16]]]],0,[[[108,[-1]],[108,[-1]]],[[108,[-1]]],[]],[[[108,[-1]],[108,[-1]]],[[108,[-1]]],[]],[[[108,[-1]],-1],[[108,[-1]]],[]],[[[108,[-1]],[108,[-1]]],[[108,[-1]]],[]],[[[108,[-1]],[108,[-1]]],[[108,[-1]]],[]],[[[108,[-1]],-1],[[108,[-1]]],[]],[[[108,[-1]],[108,[-1]]],[[108,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[109,39],1],[109,1],[110,1],[[111,-1],1,[25,54]],[[[112,[-1]],-2],1,6,[25,54]],[[[112,[-1]],-2],1,6,[25,54]],[-1,1,[]],[-1,1,[]],[113,1],[114,1],[109,1],[110,1],[115,1],[116,1],[111,1],[[[112,[-1]]],1,6],[117,1],[118,1],[[[119,[-1]]],1,6],[120,1],[[109,[24,[39]]],1],[[109,[24,[15]]],[[17,[1,16]]]],[[-1,[24,[15]]],[[17,[1,16]]],[]],[[[112,[-1]],[24,[12]]],1,6],[[113,[24,[-1]]],1,[[53,[[12,[11]]]]]],[[-1,[24,[-2]]],1,[],[]],[[120,[24,[-1]]],1,[[53,[14]]]],[[-1,15],[[17,[1,16]]],[]],[[109,15],[[17,[1,16]]]],[[110,15],[[17,[1,16]]]],[[115,15],[[17,[1,16]]]],[[116,15],[[17,[1,16]]]],[[111,15],[[17,[1,16]]]],[[[112,[-1]],15],[[17,[1,16]]],6],[[[112,[-1]],12],1,6],[[115,-1],1,[25,54]],[[116,-1],1,[25,54]],[[-1,-2],1,[],[]],[[113,-1],1,[[53,[[12,[11]]]]]],[[114,[82,[[12,[11]]]]],1],[[117,[82,[14]]],1],[[118,2],1],[[[119,[-1]]],1,6],[[120,-1],1,[[53,[14]]]],[[115,-1],1,25],[[116,-1],1,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[118,118],[[[119,[-1]]],[[119,[-1]]],[121,6]],[120,120],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],109],[[],110],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[115,2],[116,2],[111,2],[[[112,[-1]]],2,6],[-1,2,[]],[115,96],[116,96],[111,96],[[[112,[-1]]],96,6],[-1,96,[]],[-1,[[5,[-2]]],[],[]],[113,[[5,[10]]]],[114,[[5,[10]]]],[109,[[5,[4]]]],[110,[[5,[4]]]],[-1,[[5,[4]]],[]],[117,[[5,[9]]]],[118,[[5,[13]]]],[[[119,[-1]]],[[5,[-1]]],6],[120,[[5,[9]]]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[14,-1],-2,25,[]],[[14,-1],-2,25,[]],[[14,[12,[-1]]],-2,[],[]],[[14,[12,[[24,[-1]]]]],-2,[],[]],[[33,46,46,14],[[17,[[41,[122,40]],16]]]],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[115,[[41,[39,40]]]],[116,[[41,[39,40]]]],[111,[[41,[39,40]]]],[[[112,[-1]]],[[41,[39,40]]],6],[-1,[[41,[39,40]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[14,46,46],113],[[14,46],114],[[14,46,[24,[33]]],109],[[14,46,[24,[33]]],110],[[14,46,46],115],[[14,46,46],116],[[14,46,46],111],[[14,46,46,33],[[112,[-1]]],6],[[14,46],117],[[14,46],118],[[14,46],[[119,[-1]]],6],[[14,46,46],120],[-1,1,[]],[114,1],[117,1],[118,1],[[[119,[-1]]],1,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,1,[]],[[-1,[24,[15]]],[[17,[1,16]]],[]],[[-1,15],[[17,[1,16]]],[]],0,[-1,2,[]],[-1,96,[]],[-1,[[5,[4]]],[]],[[33,46,46,14],[[17,[[41,[122,40]],16]]]],[-1,[[41,[39,40]]],[]],0,0,[[-1,14],[[5,[-2]]],[],[]],[[-1,[5,[-2]]],[[5,[-2]]],[],[]],[[-1,14],[[5,[-2]]],54,[]],[[-1,[5,[-2]]],[[5,[-2]]],54,[]],[[-1,14,33],[[5,[-2]]],54,[]],[[-1,14,33],[[5,[-2]]],[],[]],[[-1,14],[[17,[[5,[-2]],-3]]],25,[],[]],[[-1,[5,[-2]]],[[17,[[5,[-2]],-3]]],25,[],[]],[[-1,14],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,[5,[-2]]],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,14,33],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,14,33],[[17,[[5,[-2]],-3]]],25,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[44,[66,40]]],[]],[-1,[[44,[[124,[123]],40]]],[]],[125,126],[[[127,[47]]],128],[[[129,[47]]],130],[[[131,[47]],33],132],[[133,33],134],[126,24],[128,24],[130,24],[132,24],[134,24],[135,24],[[[136,[-1]]],24,25],[126,24],[128,24],[130,24],[132,24],[134,24],[[[136,[-1]]],24,45],0,[126,[[1,[46,[24,[46]]]]]],[128,[[1,[46,[24,[46]]]]]],[130,[[1,[46,[24,[46]]]]]],[132,[[1,[46,[24,[46]]]]]],[134,[[1,[46,[24,[46]]]]]],[[[136,[-1]]],[[1,[46,[24,[46]]]]],25],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,3],1,[]],[[33,-1],[[137,[-2]]],49,22],[[33,-1],[[137,[-2]]],49,22],[-1,138,[]],[[[137,[-1]]],138,22],[[[137,[-1]]],138,22],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[137,[-1]]],[[137,[-1]]],[121,22]],[[-1,-2],1,[],[]],[[[137,[-1]]],139,22],[46,-1,[]],[46,-1,[]],[46,1],[[[137,[-1]],50],[[17,[1,51]]],[140,22]],[-1,-1,[]],[[[137,[-1]],46],[[24,[-1]]],22],[[],46],[-1,-2,[],[]],[[[137,[-1]]],[],22],[[[137,[-1]],46],2,22],[[[137,[-1]],46],2,22],[[-1,46],2,[]],[[[137,[-1]]],[[142,[-1,[42,[-1]],141]]],22],[[[137,[-1]]],[[142,[141]]],22],[[[137,[-1]]],46,22],[[[137,[-1]]],46,22],0,[[[137,[-1]],[24,[92]]],1,22],[[[137,[-1]],46,46],1,22],[[-1,46,46],-2,[],[]],[[-1,46,46],-2,[],[]],[[[137,[-1]],46,46],1,22],[-1,[[41,[57,40]]],[]],[[[137,[-1]]],[[41,[39,40]]],22],[-1,-2,[],[]],[[33,-1],[[17,[[137,[-2]],-3]]],49,22,[]],[[33,-1],[[17,[[137,[-2]],-3]]],49,22,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,14,[]],[[],14],[[[137,[-1]]],[[24,[92]]],22],[[[137,[-1]],46],-1,22],[[[137,[-1]],46],[],22],[[[137,[-1]],46],-1,22],[[[137,[-1]]],[[143,[[44,[-1,40]],40]]],22],[[[137,[-1]]],[],22],[[[137,[-1]]],[[42,[-1]]],22],[-1,-2,[],[]],[[[137,[-1]],[24,[92]]],[[41,[39,40]]],22],[[[137,[-1]],[24,[92]]],[[137,[-1]]],22],[[[137,[-1]],[24,[92]]],[[137,[-1]]],22],0,[[[144,[-1]]],1,22],[[[144,[-1]]],1,22],[[[144,[-1]],[24,[-1]]],1,22],[[[144,[-1]],138],1,22],[[[144,[-1]],-1],1,22],[[[144,[-1]],138],[[17,[1,16]]],22],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[144,[-1]]],22],[46,-1,[]],[46,-1,[]],[46,1],[[[144,[-1]]],[[5,[[21,[-1]]]]],22],[-1,-1,[]],[[],46],[-1,-2,[],[]],[[14,46],[[144,[-1]]],22],[[[144,[-1]]],15,22],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[[-1,138],1,[]],[[14,46],[[41,[145,40]]]],[[],[[143,[28,40]]]],[[],2],[[[41,[28,40]],[143,[28,40]]],1],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,-2],-1,[],[28,29]],[[-1,28],-1,[]],[[-1,28],[[5,[-2]]],[],27],[[-1,-2,[12,[-3]]],1,[],28,[]],[[-1,-2],-1,[],[28,29]],[[-1,34],[[5,[35]]],[]],[[-1,37],[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,33],[[17,[15,16]]],[]],[[-1,33],[[17,[15,16]]],[]],[34,34],[37,37],[146,146],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[],34],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],0,0,[46,1],[46,1],[46,1],[[34,34],2],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[17,[15,16]]],[]],[-1,[[17,[[1,[15,[48,[47]]]],16]]],[]],0,[[-1,-2],[[17,[-1,16]]],99,[]],[[-1,[5,[13]]],[[17,[[5,[-2]],16]]],99,[]],[[34,50],[[17,[1,51]]]],[[146,50],[[17,[1,51]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[14,-1,46],-2,[],99],[[14,46],-1,99],0,[[-1,46],[[17,[56,16]]],[]],[[-1,46],56,[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[34,-1],1,147],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[[5,[13]],16]]],[]],[-1,[[17,[[5,[13]],16]]],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],0,[-1,[[24,[-2]]],[],[]],[-1,[[24,[80]]],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],0,0,[-1,[[17,[46,16]]],[]],[[-1,46,46],[[5,[-2]]],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],0,0,[[-1,80,95],[[17,[[24,[-2]],16]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,-1,[]],[[-1,28,97],[[17,[15,16]]],99],[[-1,[5,[13]],[24,[-2]]],[[17,[-1,16]]],99,[]],[[-1,-2,[24,[-3]]],[[17,[-1,16]]],99,49,[]],[[-1,-2,-3],[[17,[-1,16]]],99,49,28],[[-1,47],[[5,[-2]]],[],[]],[[-1,47,-2],[[5,[-3]]],[],[],[]],0,[[-1,2],[[5,[-2]]],[],[]],[[-1,34],[[5,[-2]]],[],[]],[[-1,11],[[24,[80]]],[]],[-1,[[24,[-2]]],[],[]],[[-1,-2],[[17,[-1,16]]],99,[]],[[-1,-2],-1,[],[]],[-1,[[44,[[12,[11]],40]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[17,[-1,16]]],99,[28,29]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,[[17,[[5,[-2]],16]]],[],[]],[[-1,11],[[24,[80]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[5,[13]],[5,[-2]]],[[17,[[5,[-2]],16]]],[],[]],0,0,0,0,[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,[[148,[24,24]]],27],[[[5,[-1]],[5,[-2]],-3],1,27,27,30],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3,14],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3,2,2],[[5,[-1]]],27,27,30],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[5,[-5]]],27,27,27,[[149,[24,24,24]]],27],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,150],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,[]],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,[]],[[[5,[-1]],[5,[-2]],-3,2,2],[[17,[[5,[-1]],-4]]],27,27,30,150],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[17,[[5,[-5]],-6]]],27,27,27,30,27,[]],[[[5,[35]],55],[[17,[1,16]]]],[[[108,[55]],55],[[17,[1,16]]]],[[46,[44,[2,40]]],1],0,[[[12,[[1,[-1,-2]]]],2,2],1,[151,71],[151,71,152]],[[[12,[-1]]],1,[]],[[[12,[-1]]],1,[]],[[[12,[15]],[12,[2]],2],[[17,[153,16]]]],[[14,[12,[15]],[12,[2]],2],[[17,[[5,[10]],16]]]],[15,[[17,[[41,[39,40]],16]]]],0,[154,47],[154,47],[154,47],[155,47],[[],154],[154,47],[154,47],[154,47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[56,[[0,[25]]]],[[56,[44,[56,40]]],1],[[156,156],[[17,[[143,[157,40]],16]]]],[[[63,[69,68]],[63,[69,68]]]],[[56,56],56],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[9]],15],[[17,[15,16]]]],[[[5,[10]],15],[[17,[15,16]]]],[[[5,[13]],15],[[17,[15,16]]]],[[158,19],15],[[156,156],[[17,[1,16]]]],[159,1],[[159,14],1],[[156,34],[[5,[35]]]],[-1,-2,49,[]],[-1,-2,49,[]],[[33,-1],-2,49,[]],[[33,-1],-2,49,[]],[56,56],[[[63,[62,61]]],[[0,[25,54]]]],[[[63,[67,64]]],[[0,[25,54]]]],[-1,33,[]],[-1,[[24,[12]]],[]],[[[63,[74,64]]],[[0,[25,54]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,33],[[17,[15,16]]],[]],[[[63,[67,64]],33],[[17,[15,16]]]],[[[63,[62,61]],33],[[17,[15,16]]]],[[[63,[74,64]],33],[[17,[15,16]]]],[[[63,[70,64]],33],[[17,[15,16]]]],[[[63,[69,68]],33],[[17,[15,16]]]],[[156,33],[[17,[15,16]]]],[[158,33],[[17,[15,16]]]],[[56,33],[[17,[56,16]]]],[[[63,[67,64]],65],[[63,[67,64]]]],[[[63,[70,64]],65],[[63,[70,64]]]],0,[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[31]],15],[[17,[15,16]]]],[[[5,[32]],15],[[17,[15,16]]]],[[[63,[-1,-2]]],[[63,[-1,-2]]],27,27],[157,157],[160,160],[156,156],[158,158],[161,161],[56,56],[33,33],[96,96],[65,65],[90,90],[84,84],[35,35],[83,83],[88,88],[86,86],[61,61],[64,64],[31,31],[32,32],[62,62],[69,69],[67,67],[70,70],[162,162],[74,74],[9,9],[10,10],[13,13],[139,139],[163,163],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[96,33],1],[-1,-2,[],164],[-1,-2,54,164],[[-1,33],-2,54,165],[[-1,33],-2,[],165],[[[63,[67,64]],66],[[17,[[63,[67,64]],16]]]],[96,33],[[[63,[70,64]]],[[5,[64]]]],[[],157],[[],56],[[],33],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[63,[-1,-2]]],[],27,27],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[63,[-1,-2]]],[],27,27],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[63,[69,68]],[63,[69,68]]]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[159,-1],1,49],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[158,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[-1,33,[]],[[[63,[69,68]]],33],[[[63,[62,61]]],33],[[[63,[74,64]]],33],[[[63,[70,64]]],33],[[[63,[67,64]]],33],[156,33],[158,33],[56,33],0,[[160,160],2],[[56,56],2],[[33,33],2],[[33,139],2],[[96,96],2],[[65,65],2],[[139,139],2],[[163,163],2],[[158,158],[[5,[13]]]],[[158,158],[[5,[13]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[159,14],2],[[[63,[-1,-2]]],96,27,27],[[158,14],[[17,[15,16]]]],[158,[[12,[15]]]],[158,[[44,[15,40]]]],[[157,14],[[24,[55]]]],[159,156],[[157,50],[[17,[1,51]]]],[[161,50],[[17,[1,51]]]],[[56,50],[[17,[1,51]]]],[[56,50],[[17,[1,51]]]],[[33,50],[[17,[1,51]]]],[[33,50],[[17,[1,51]]]],[[96,50],[[17,[1,51]]]],[[65,50],[[17,[1,51]]]],[[65,50],[[17,[1,51]]]],[[139,50],[[17,[1,51]]]],[[163,50],[[17,[1,51]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[5,[64]]],[[63,[74,64]]]],[-1,-1,[]],[[[5,[61]]],[[63,[62,61]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,56,166],[[[24,[-1]]],56,[[167,[56]]]],[-1,-1,[]],[139,33],[56,33],[-1,-1,[]],[56,33],[-1,-1,[]],[56,96],[168,96],[163,65],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[169,139],[-1,-1,[]],[170,139],[-1,-1,[]],[[[5,[35]],[143,[157,40]]],156],[[14,-1,65],[[63,[70,64]]],49],[[14,-1,65],[[63,[70,64]]],49],[[[5,[35]]],156],[[14,-1],[[63,[62,61]]],49],[[14,-1],[[63,[62,61]]],49],[[14,-1,65],[[63,[67,64]]],49],[[14,-1,65],[[63,[67,64]]],49],[[14,-1],[[63,[74,64]]],49],[[14,-1],[[63,[74,64]]],49],[[[124,[123]],33],96],[[[44,[40]],33],-1,[]],[[[44,[40]],33],-1,[]],[[14,46],156],[[14,46],158],[[-1,46],24,[]],[[157,55],14],[[[63,[67,64]],46],[[17,[56,16]]]],[[[63,[62,61]],46],[[17,[56,16]]]],[[[63,[74,64]],46],[[17,[56,16]]]],[[[63,[70,64]],46],[[17,[56,16]]]],[[[63,[69,68]],46],[[17,[56,16]]]],[[-1,46],[[17,[56,16]]],[]],[[156,46],[[17,[56,16]]]],[[158,46],[[17,[56,16]]]],[[[63,[74,64]],46],56],[[[63,[70,64]],46],56],[[[63,[62,61]],46],56],[[[63,[69,68]],46],56],[[[63,[67,64]],46],56],[[-1,46],56,[]],[[156,46],56],[[158,46],56],[157,[[127,[47]]]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[157,55],[[24,[14]]]],[156,[[143,[157,40]]]],[56,[[24,[14]]]],[[-1,46],56,[]],[[-1,46],24,[]],[[158,158],[[5,[13]]]],[[158,158],[[5,[13]]]],[[160,-1],1,147],[[56,-1],1,147],[[33,-1],1,147],[[65,-1],1,147],[[139,-1],1,147],[[163,-1],1,147],[[56,-1,2],1,147],[[[63,[74,64]]],[[5,[35]]]],[[[63,[70,64]]],[[5,[64]]]],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[33,[[24,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[158],[[[63,[70,64]]],15],[[[63,[62,61]]],15],[[[63,[69,68]]],15],[[[63,[74,64]]],15],[[[63,[67,64]]],15],[156,15],[158,15],[56,[[17,[56,16]]]],[156,2],[158,2],[33,2],[157,2],[33,2],[157,2],[33,2],[56,2],[33,2],[33,2],[33,2],[56,2],[33,2],[33,2],[56,2],[33,2],[-1,[[142,[141]]],[]],[156,171],[-1,24,[]],[157,46],[156,46],[158,46],[156,[[5,[35]]]],[[158,158],[[5,[13]]]],[[158,158],[[5,[13]]]],[[33,33],[[17,[33,16]]]],[[[63,[70,64]]],[[5,[64]]]],[[[63,[70,64]]],[[5,[64]]]],[[[63,[74,64]]],[[5,[35]]]],[[[63,[70,64]]],[[5,[64]]]],[[[63,[62,61]],[24,[172]]],[[17,[[63,[62,61]],16]]]],[[[63,[67,64]],[24,[172]]],[[17,[[63,[67,64]],16]]]],[[[63,[67,64]],[24,[172]]],[[17,[[63,[67,64]],16]]]],[[[63,[62,61]],[24,[172]]],[[17,[[63,[62,61]],16]]]],[[[63,[69,68]],[63,[69,68]]]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[156,[[17,[46,16]]]],[156,14],[158,[[124,[123]]]],[96,[[124,[123]]]],0,[[[63,[74,64]]],[[5,[35]]]],[[[63,[70,64]]],[[5,[64]]]],[[]],[[14,46],159],[[14,-1],[[63,[74,64]]],[[53,[[12,[[24,[155]]]]]]]],[[14,-1],[[63,[62,61]]],[[53,[[12,[[24,[173]]]]]]]],[[14,-1],[[63,[70,64]]],[[53,[[12,[174]]]]]],[[14,-1],[[63,[67,64]]],[[53,[[12,[154]]]]]],[[14,-1],[[63,[62,61]]],[[53,[[12,[173]]]]]],[[14,-1],[[63,[70,64]]],[[53,[[12,[[24,[174]]]]]]]],[[14,-1],[[63,[74,64]]],[[53,[[12,[155]]]]]],[[14,-1],[[63,[67,64]]],[[53,[[12,[[24,[154]]]]]]]],[[14,[12,[15]]],[[17,[158,16]]]],[[14,33],96],[171,24],[[158,158],[[5,[13]]]],[[158,158],[[5,[13]]]],[158,46],[[14,[12,[14]],14],[[63,[62,61]]]],[[14,[12,[14]],14],[[63,[74,64]]]],[[56,56],[[24,[175]]]],[[65,65],[[24,[175]]]],[[[63,[69,68]]],[[24,[46]]]],[158,1],[158,96],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[158,14],1],[[[63,[67,64]],176,176,[24,[172]],[5,[9]]],[[17,[[63,[67,64]],16]]]],[[[63,[62,61]],176,176,[24,[172]],[5,[9]]],[[17,[[63,[62,61]],16]]]],[[157,157],2],[[[63,[69,68]]],46],[[[63,[74,64]]],[[5,[35]]]],[[[63,[70,64]]],[[5,[64]]]],[[156,2],1],[[96,[124,[123]]],1],[[[63,[67,64]],65],1],[[[63,[70,64]],65],1],[[[63,[67,64]],66],[[17,[1,16]]]],[171,[[1,[46,[24,[46]]]]]],[[156,2],156],[[156,34],156],[[[63,[67,64]],14],[[17,[[5,[9]],16]]]],[[[63,[74,64]],14],[[5,[9]]]],[[[63,[62,61]],14],[[5,[9]]]],[[[63,[69,68]],[63,[69,68]]]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[[63,[70,64]]],65],[[[63,[67,64]]],65],[[[63,[67,64]]],[[24,[66]]]],[33,139],[96,168],[65,163],[65,14],[156,156],[139,139],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[139,177],[[[63,[74,64]],14],[[5,[9]]]],[[[63,[67,64]],14],[[17,[[5,[9]],16]]]],[[[63,[62,61]],14],[[5,[9]]]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[158,46],[[[63,[67,64]],[24,[172]],[5,[9]],14,[5,[9]]],[[17,[[63,[67,64]],16]]]],[[[63,[62,61]],[24,[172]],[5,[9]],14,[5,[9]]],[[17,[[63,[62,61]],16]]]],[-1,[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-3,-4]]],25,[],[[164,[-2]]],[]],[-1,[[17,[-3,-4]]],[25,54],[],[[164,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],[25,54],[],[[165,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],25,[],[[165,[-2]]],[]],[56,[[17,[-1,16]]],79],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[156,[[17,[156,16]]]],[158,178],[156,2],[[-1,46],[],[]],[156,[[17,[178,16]]]],[[-1,46],[],[]],[[33,56],2],[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46],[[-1,[24,[92]]],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],179],[46,-1,[]],[46,-1,[]],[[],1],[179,1],[46,1],[[],1],[-1,-1,[]],[[],179],[[],46],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[[],2],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[180],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[46,1],0,[[180,50],[[17,[1,51]]]],[[180,50],[[17,[1,51]]]],[[16,50],[[17,[1,51]]]],[[16,50],[[17,[1,51]]]],[[181,50],[[17,[1,51]]]],[[181,50],[[17,[1,51]]]],[-1,180,[[167,[[82,[14]]]]]],[-1,-1,[]],[181,16],[-1,-1,[]],[182,16],[183,16],[184,181],[185,181],[186,181],[187,181],[188,181],[189,181],[-1,-1,[]],[190,181],[182,181],[-1,181,[150,71,72]],[[]],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,150],0,0,0,0,[[],1],[16,[[24,[150]]]],[-1,16,191],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,28],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[178,[44,[15,40]],192],[[17,[1,16]]]],[[178,[5,[13]]],[[17,[178,16]]]],[[178,[12,[[124,[123]]]]],[[17,[178,16]]]],[[178,[12,[[124,[123]]]]],[[17,[178,16]]]],[[178,47,46],178],[178,178],[178,178],[[178,14,-1],[[17,[178,16]]],193],[[178,46,-1],[[17,[178,16]]],193],[178,178],[178,178],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[178,178],[194,194],[195,195],[178,178],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[178,14],[[17,[15,16]]]],[[178,-1],[[17,[[44,[15,40]],16]]],49],[[],195],[[],178],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[178,[24,[[12,[80]]]]],[[17,[178,16]]]],[46,1],[46,1],[46,1],[46,1],[46,1],[[178,14],[[17,[178,16]]]],[[178,14],[[17,[15,16]]]],[[178,[12,[-1]]],178,[[53,[14]]]],[[178,[197,[14,107,196]]],178],[[178,[24,[[12,[-1]]]]],[[17,[178,16]]],[[53,[14]]]],[178,[[44,[33,40]]]],[[],178],[[195,195],2],[[178,178],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[178,46],0,[[178,-1],[[17,[178,16]]],49],[[178,[44,[15,40]]],[[17,[178,16]]]],[[178,178],[[17,[1,16]]]],[178,[[44,[96,40]]]],[[178,146],[[17,[178,16]]]],[[178,[5,[13]]],[[17,[178,16]]]],[[178,14],[[24,[46]]]],[[194,50],[[17,[1,51]]]],[[195,50],[[17,[1,51]]]],[[178,50],[[17,[1,51]]]],[[178,50],[[17,[1,51]]]],[[178,178],2],[[178,178],2],[[178,178],[[17,[1,16]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[158,178],[192,178],[-1,178,49],[[[12,[198]]],[[17,[178,16]]]],[[[12,[198]],192],[[17,[178,16]]]],[[-1,192],[[17,[178,16]]],25],[[178,46],[[24,[[44,[56,40]]]]]],[178,[[44,[14,40]]]],[178,[[44,[[124,[123]],40]]]],[178,[[12,[15]]]],[178,[[44,[15,40]]]],[[178,46],[[17,[198,16]]]],[[178,46,198],[[17,[1,16]]]],[[178,46,198],1],[178,[[24,[[17,[33,16]]]]]],0,[[178,-1],[[17,[199,16]]],49],[[178,[44,[15,40]],200],[[17,[[1,[15,[44,[15,40]],19]],16]]]],[[178,[44,[15,40]],201],[[17,[[1,[15,[44,[15,40]],19]],16]]]],[[178,-1],[[17,[199,16]]],49],[[178,[44,[15,40]],2,2],[[17,[199,16]]]],[[178,[24,[46]]],178],[178,46],[178,[[17,[[24,[15]],16]]]],[[178,194],[[17,[[24,[15]],16]]]],[178,[[17,[[24,[15]],16]]]],[[178,[12,[15]]],[[17,[178,16]]]],[[178,[12,[15]]],[[17,[178,16]]]],[[178,[12,[15]]],178],[[178,194],[[17,[[24,[15]],16]]]],[[178,202]],[[178,[203,[46]]]],[[178,[81,[46]]]],[[178,46]],[[178,[204,[46]]]],[[178,[205,[46]]]],[[178,14]],[[178,[206,[46]]]],[[],46],[[],46],[[],46],[[],46],[[],46],[[178,46,-1],[[17,[178,16]]],207],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[178,14],158],[178,[[17,[[5,[13]],16]]]],[178,2],[178,[[17,[[5,[13]],16]]]],[178,[[42,[15]]]],[178,208],[178,209],[178,210],[178,178],[178,178],[178,178],[[178,-1,-2],[[17,[178,16]]],[[211,[[124,[123]]]]],[[211,[[124,[123]]]]]],[[178,212],[[17,[178,16]]]],[178,178],[178,46],[[[44,[-1,40]]],[[17,[178,16]]],207],[[[44,[15,40]]],178],[208,24],[209,24],[178,178],[[178,-1],[[17,[-2,16]]],28,[]],[[178,-1],[[17,[-2,16]]],28,[]],[[178,-1,-2],[[17,[-3,16]]],28,[],[]],[178,[[24,[15]]]],[[178,178],2],[[178,80,95],[[17,[178,16]]]],[[178,14,14],[[17,[178,16]]]],[[178,14,-1],[[17,[178,16]]],207],[[178,46,-1],[[17,[178,16]]],207],[[178,14,-1],[[17,[178,16]]],207],[178,178],0,[[178,80,2,2,[24,[60]]],[[17,[178,16]]]],[[178,15,2,2,[24,[60]]],[[17,[178,16]]]],[[178,46,2,2,[24,[60]]],[[17,[178,16]]]],[178,192],[[178,-1],[[17,[178,16]]],49],[[178,46],[[24,[15]]]],[[178,-1],[[17,[178,16]]],[[213,[46]]]],[[178,-1],[[17,[178,16]]],49],[[178,-1],[[17,[[44,[15,40]],16]]],[[211,[[124,[123]]]]]],[[178,-1,[143,[192,40]]],[[17,[178,16]]],49],[[178,-1,192],[[17,[178,16]]],49],[[178,[12,[-1]]],[[17,[1,16]]],[[53,[14]]]],[178,[[1,[46,46]]]],[[178,47],178],[178,2],[178,1],[208,[[1,[46,[24,[46]]]]]],[209,[[1,[46,[24,[46]]]]]],[[178,47,46],178],[[178,47,46],178],[[178,-1,-2,2],[[17,[178,16]]],[[211,[[124,[123]]]]],[[211,[2]]]],[[178,[44,[15,40]],[44,[2,40]],2,2,[24,[[1,[47,46]]]],2],[[17,[178,16]]]],[[178,-1,-2,2],[[17,[178,16]]],[[211,[[124,[123]]]]],[[211,[2]]]],[[178,14,34],[[17,[178,16]]]],[[178,11],178],[178,178],[[178,[24,[46]]],178],[[178,[5,[35]]],[[17,[178,16]]]],[[178,[5,[35]]],178],[178,178],[[178,214],[[17,[[103,[100,[102,[[101,[46]]]]]],16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,66,[]],[[178,46,-1,-2],[[17,[178,16]]],[[211,[2]]],[[211,[[124,[123]]]]]],[[178,[24,[14]],[24,[[105,[66,[44,[66,40]]]]]]],[[17,[178,16]]]],[[178,14,-1],[[17,[178,16]]],193],[[178,46,-1],[[17,[178,16]]],193],[[178,14],[[17,[46,16]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[1,[[215,[[41,[39,40]]]],[12,[168]]]]],[[17,[178,16]]]],[-1,[[17,[-2]]],[],[]],[216,[[17,[178,16]]]],[[-1,192],[[17,[178,16]]],25],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[[178,[24,[[12,[66]]]],195,[24,[[1,[47,46]]]]],[[17,[178,16]]]],[[178,2,[24,[[12,[66]]]],195,[24,[[1,[47,46]]]]],[[17,[178,16]]]],[[178,[24,[[12,[66]]]],195,[24,[[1,[47,46]]]]],[[17,[178,16]]]],[[178,-1],[[17,[178,16]]],[[211,[66]]]],[[178,-1,14,176,176],[[17,[178,16]]],[[211,[66]]]],[[178,-1,14,176,176],[[17,[178,16]]],[[211,[66]]]],[[178,11],178],[[178,178],[[17,[178,16]]]],[[178,178],[[17,[178,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[178,46],[[178,-1],[[17,[178,16]]],207],[[178,-1,192],[[17,[178,16]]],207],[[178,15],178],[[178,14,[24,[55]]],[[17,[178,16]]]],[[178,14,[24,[55]]],178],0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[212,212],[[-1,-2],1,[],[]],[[],212],[46,-1,[]],[46,-1,[]],[46,1],[[212,212],2],[[212,50],[[17,[1,51]]]],[-1,-1,[]],0,[[],46],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],0,0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[199,[[17,[178,16]]]],0,[217,[[12,[[44,[55,40]]]]]],[[199,-1],[[17,[178,16]]],[30,71,72]],[19,[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[217,217],[19,19],[199,199],[218,218],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[199,[[17,[178,16]]]],[[],217],[[],19],[46,-1,[]],[46,-1,[]],[46,-1,[]],[219],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],0,[[220,-1],[],221],[46,1],[46,1],[46,1],[46,1],[46,1],[217,1],[46,1],[46,1],[46,1],[[217,217],2],[[19,19],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[222,55],[217,[[12,[55]]]],[199,[[17,[178,16]]]],[217,[[44,[55,40]]]],[[217,50],[[17,[1,51]]]],[[19,50],[[17,[1,51]]]],[[199,50],[[17,[1,51]]]],[[218,50],[[17,[1,51]]]],[[218,50],[[17,[1,51]]]],[[14,218],66],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[44,[[44,[[1,[55,[44,[55,40]]]],40]],40]]],217],[[[44,[[1,[[44,[55,40]],[44,[[44,[55,40]],40]]]],40]]],217],[[[44,[[1,[55,[44,[55,40]]]],40]]],217],[217,19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[223,218],[-1,217,49],[-1,217,52],[[19,46],222],[199,19],[199,19],[19,[[5,[35]]]],[[19,14],[[5,[35]]]],[[-1,2,2],[[17,[19,16]]],[]],[199,[[17,[178,16]]]],[19,217],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,217],[-1,-2,[],[]],[217],[217],[-1,-2,[],[]],[217],[217],[222,2],[19,2],[217,2],[217,[[225,[[224,[[42,[55]]]],[42,[[44,[55,40]]]]]]]],[19,226],[199,[[44,[15,40]]]],[[199,[24,[[1,[47,46]]]]],[[44,[15,40]]]],[199,[[17,[178,16]]]],[222,46],[19,46],[199,[[17,[178,16]]]],[199,[[17,[178,16]]]],[199,[[17,[178,16]]]],[199,[[17,[178,16]]]],[199,[[17,[178,16]]]],[[[44,[55,40]],[44,[[44,[55,40]],40]],2],217],[[178,[44,[15,40]],19,[24,[[44,[66,40]]]]],199],[226,24],[[226,46],24],[[199,-1],[[17,[178,16]]],[28,71,72]],[-1,[],[]],[19,220],[[199,80,95],[[17,[178,16]]]],[[199,-1],199,49],[[19,47,46],219],[217,1],[19,1],[[199,11],[[17,[178,16]]]],[199,[[17,[178,16]]]],[19,[[44,[55,40]]]],[19,[[44,[55,40]]]],[199,19],[199,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,66,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[19,19],[19,217],[19,[[44,[[101,[55]],40]]]],[[199,11],[[17,[178,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[217,-1],15,[28,71,72]],[[217,-1],15,[28,71,72]],[[[12,[[101,[55]]]],-1],15,[28,71,72]],[[[12,[[101,[55]]]],-1],15,[28,71,72]],[[[12,[-1]],-2,[24,[[143,[138,40]]]]],[[108,[-1]]],[152,227],[25,54]],[[[12,[-1]],92,-2,[24,[[143,[138,40]]]]],[[108,[-1]]],[152,227],[25,54]],[[[5,[-1]],55,55],[[5,[-1]]],27],[[[44,[[101,[55]],40]],[12,[[41,[39,40]]]]],2],[[-1,19],15,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,[[-1,178,19],[[17,[15,16]]],[]],[-1,[[17,[14,16]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[228,56],[[24,[1]]]],[[229,56],1],[[229,56],1],[[[12,[56]]],[[17,[[1,[33,46]],16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[228,228],[229,229],[198,198],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[12,[-1]]],33,[[230,[33]]]],[[],198],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[46,1],[[198,198],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[198,50],[[17,[1,51]]]],[-1,-1,[]],[[[1,[33,46]]],228],[[[1,[33,46]]],229],[-1,-1,[]],[-1,-1,[]],[[-1,46],192,25],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[228,15],[229,15],[[33,46],228],[[33,46],229],[[[44,[56,40]]],198],[[228,46],15],[[229,46],15],[[[12,[198]],[24,[46]]],192],[[[12,[198]],[24,[46]]],[[17,[192,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[178]]],[[17,[178,16]]]],[[[12,[178]]],[[17,[178,16]]]],[[[5,[-1]],[5,[-1]]],[[24,[80]]],6],[[[5,[-1]],[5,[-1]],11],[[24,[80]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,[12,[55]],2,2],178,[]],[[-1,[1,[[44,[55,40]],[44,[[24,[55]],40]]]],178,231],[[17,[178,16]]],[]],[[[232,[-1]],[24,[[143,[233,40]]]],[24,[[12,[46]]]]],[[17,[178,16]]],234],[[-1,60],60,[]],[[14,14],66],[[-1,178,15,15,231,2],[[17,[178,16]]],[]],[[-1,178,15,15,231],[[17,[178,16]]],[]],[[15,15,2,235],[[17,[[1,[[1,[[44,[55,40]],[44,[55,40]]]],2]],16]]]],[-1,15,[]],[[-1,[24,[[44,[14,40]]]],[24,[14]],2],[[17,[178,16]]],[]],[[210,2],210],[236,236],[[-1,15],[],[]],[[236,236]],[[176,47,[24,[172]]],[[17,[47,16]]]],[[176,47,[24,[172]]],[[17,[47,16]]]],[[-1,15],[[17,[15,16]]],[]],[[176,47,[24,[172]]],[[17,[47,16]]]],[[237,-1],210,[[53,[[12,[236]]]]]],[236,236],0,[[236,14],236],[[],236],[[236,2],236],[[[12,[15]]],[[17,[15,16]]]],[[[143,[-1,-2]]],-2,[],238],[[239,2],239],0,[-1,2,[]],[-1,2,[]],[240,2],[-1,2,[]],0,[[236,-1],236,[[167,[236]]]],[[[143,[241,40]],242],[[17,[210,16]]]],[[236,2],236],[[[12,[15]]],[[17,[15,16]]]],[[236,-1,2],236,[[167,[236]]]],[-1,1,[]],[-1,1,[]],[[-1,[24,[15]]],[[17,[1,16]]],[]],[[-1,[24,[-2]]],1,[],[]],[[-1,15],[[17,[1,16]]],[]],[[-1,-2],1,[],[]],[[-1,-2],-1,[],[28,29]],[[237,-1,[143,[192,40]]],210,[28,71,72]],[[236,-1,[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,236,-1,[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,30],[[17,[245,16]]]],[[-1,28],-1,[]],[[-1,28],[[5,[-2]]],[],27],[[236,-1,[12,[236]],[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,246,[12,[236]],2,2],236],[[-1,-2,[244,[[143,[243,40]]]],2],236,[28,71,72],[[53,[[12,[236]]]]]],[[-1,-2,[12,[-3]]],1,[],28,[]],[[-1,-2],-1,[],[28,29]],[[236,236,47],236],[216,[[143,[39,40]]]],[-1,[[24,[46]]],[]],[247,236],[236,236],[-1,[[24,[46]]],[]],[247,236],[236,236],[[-1,34],[[5,[35]]],[]],[[236,34],236],[[-1,34],[[5,[35]]],[]],[[-1,[12,[2]]],236,[[53,[[12,[236]]]]]],[[-1,37],[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[236,236],[-1,[[17,[[5,[35]],16]]],[]],[-1,236,[[167,[236]]]],0,0,[236,248],[-1,-2,49,[]],[-1,-2,49,[]],[[33,-1],-2,49,[]],[[33,-1],-2,49,[]],0,[[[249,[-1]]],[[17,[250,16]]],234],[[[251,[-1]]],[[17,[250,16]]],252],[-1,138,[]],[-1,138,[]],[240,138],[-1,138,[]],[216,138],[-1,138,[]],[216,138],[-1,[[5,[10]]],[]],[[-1,[24,[14]],2],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]]],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]],65,2,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[[-1,[24,[14]],65,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[-1,[[24,[236]]],[]],[[[143,[-1,40]]],253,254],[-1,[[5,[4]]],[]],[-1,[[24,[255]]],[]],[[[143,[-1,-2]]],[],99,238],[[[143,[-1,40]]],91,256],[257,236],[[[143,[-1,-2]]],-1,99,238],[-1,33,[]],[-1,15,[]],[-1,[[17,[46,16]]],[]],[-1,[[24,[12]]],[]],[-1,[[12,[11]]],[]],[-1,[[24,[258]]],[]],[259,[[24,[258]]]],[[[44,[236,40]]],236],[[-1,[24,[14]],2],[[17,[[63,[74,64]],16]]],[]],[-1,[[5,[9]]],[]],[[[143,[[12,[[260,[-1]]]],-2]]],[[143,[[12,[-1]],-2]]],[],[121,238]],[[[143,[[260,[-1]],-2]]],[[143,[-1,-2]]],[],[121,238]],[14,236],[[236,[24,[55]]],236],[-1,[[17,[[5,[9]],16]]],[]],[-1,[[5,[9]]],[]],[[[63,[67,64]],65,172],[[63,[70,64]]]],0,[[[261,[-1]],192],[[17,[[262,[-1]],16]]],263],[[[264,[-1]],192],[[17,[[265,[-1]],16]]],263],[[[232,[-1]],46],[[17,[266,16]]],234],[[[267,[-1]],192],[[17,[[268,[-1]],16]]],263],[[[269,[-1]]],[[17,[270,16]]],234],[[[269,[-1]]],[[17,[271,16]]],234],[[[269,[[41,[234,40]]]],[24,[[143,[192,40]]]]],[[17,[272,16]]]],[[[269,[[41,[234,40]]]],[24,[[143,[192,40]]]]],[[17,[273,16]]]],0,[236,274],[[236,275,236],236],[[-1,15],[[17,[15,16]]],[]],[[-1,15],[[17,[15,16]]],[]],[[-1,15],[[17,[15,16]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[143,[-1,-2]]],-1,99,238],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[210,55,-1,-2,2,2],210,[[53,[[12,[236]]]]],[[53,[[12,[2]]]]]],[216,[[41,[39,40]]]],0,0,0,[210,210],0,0,0,[[-1,14],[[17,[66,16]]],[]],[[276,[44,[236,40]]],[[17,[236,16]]]],[[-1,[12,[15]]],[[17,[[24,[15]],16]]],[]],[[-1,15,15],[[17,[15,16]]],[]],[[276,[44,[236,40]]],236],0,0,[[236,33],236],[[-1,33],[[17,[15,16]]],[]],[[-1,33],[[17,[15,16]]],[]],[[-1,33],[[17,[15,16]]],[]],[[210,[277,[14,33,107,196]],2],210],[[236,33],236],[[210,33,2],210],[[-1,33],[[17,[15,16]]],[]],0,[236,278],[[[143,[-1,40]]],[[24,[150]]],[150,99]],[236,236],[236,236],0,0,0,0,0,[[-1,15],[[17,[15,16]]],[]],[[-1,15],[[17,[15,16]]],[]],[[-1,-2],[[17,[15,16]]],[],8],[-1,[[43,[[42,[[41,[39,40]]]]]]],[]],0,[-1,[[44,[[41,[39,40]],40]]],[]],[-1,[[44,[[41,[39,40]],40]]],[]],[[15,15,15],[[17,[15,16]]]],[[236,236,236],236],[[15,15],[[17,[15,16]]]],[[236,236],236],[[15,15],[[17,[15,16]]]],[[236,236],236],[279,279],[200,200],[201,201],[280,280],[176,176],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[290,290],[231,231],[291,291],[292,292],[235,235],[293,293],[294,294],[295,295],[296,296],[297,297],[95,95],[298,298],[299,299],[300,300],[301,301],[302,302],[303,303],[210,210],[237,237],[242,242],[304,304],[305,305],[240,240],[306,306],[307,307],[308,308],[309,309],[310,310],[311,311],[257,257],[236,236],[312,312],[275,275],[[[244,[-1]]],[[244,[-1]]],121],[313,313],[246,246],[314,314],[315,315],[316,316],[317,317],[318,318],[319,319],[320,320],[276,276],[321,321],[322,322],[323,323],[324,324],[325,325],[326,326],[327,327],[[[143,[-1,-2]]],[[143,[-1,-2]]],99,[238,121]],[97,97],[214,214],[192,192],[216,216],[168,168],[250,250],[-1,[[143,[328,40]]],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,[-1,[[24,[329]]],[]],0,[[176,176],175],[[[143,[-1,-2]],[143,[-1,-2]]],175,[330,99],238],[[[12,[236]]],236],[14,236],[210,[[17,[178,16]]]],[-1,[[17,[[44,[178,40]],16]]],52],[-1,-2,[],164],[-1,-2,54,164],[[-1,33],-2,54,165],[[-1,33],-2,[],165],[[-1,14],[[5,[-2]]],[],[]],[[-1,[5,[-2]]],[[5,[-2]]],[],[]],[[-1,14],[[5,[-2]]],54,[]],[[-1,[5,[-2]]],[[5,[-2]]],54,[]],[[-1,14,33],[[5,[-2]]],54,[]],[[-1,14,33],[[5,[-2]]],[],[]],[-1,236,[[211,[66]]]],[[-1,[44,[14,40]],[24,[14]],2],[[17,[178,16]]],[]],[[-1,-2],175,[],[]],[[-1,-2],175,[],[]],0,0,[[-1,303],[[17,[210,16]]],[[53,[[12,[210]]]]]],[[-1,[5,[9]]],[[5,[9]]],[]],[[-2,2],[[17,[236,16]]],[[167,[236]],121],[[53,[[12,[-1]]]]]],[[-1,[44,[210,40]]],[[17,[210,16]]],[]],[[304,[44,[210,40]]],[[17,[210,16]]]],[[-1,303],[[17,[210,16]]],[[53,[[12,[210]]]]]],[-2,[[17,[236,16]]],[[167,[236]],121],[[53,[[12,[-1]]]]]],[[-1,14],236,[[53,[[12,[236]]]]]],[[-1,[12,[11]]],[[5,[13]]],[]],[[-1,14,2],[[17,[[5,[13]],16]]],[]],[[247,-1],236,[[167,[236]]]],[[192,14],2],[[-1,[5,[10]]],[[5,[13]]],[]],[[-1,[5,[9]],2,2],[[17,[[5,[13]],16]]],[]],[[-1,14],[[17,[[5,[13]],16]]],[]],[[],236],[236,236],[[-1,14,2],[[17,[[5,[35]],16]]],[]],[[-1,[5,[9]],2],[[17,[[5,[35]],16]]],[]],[[236,236],236],[[331,-1],[[41,[332,40]]],263],[[333,-1],[[41,[332,40]]],263],[[-1,178,[24,[14]],[24,[[1,[47,46]]]]],[[17,[178,16]]],[]],[[210,210],210],[[-1,178,[24,[[1,[47,46]]]],2],[[17,[[1,[178,178]],16]]],[]],[[236,2],236],[[236,-1,-2,2],236,[28,71,72,121],[[53,[[12,[236]]]]]],[[-1,2],[[5,[-2]]],[],[]],[[236,2],236],[[-1,2],[[5,[-2]]],[],[]],[[236,2],236],[[-1,2],[[5,[-2]]],[],[]],[[236,2],236],[[-1,-2],236,[28,71,72,121],[[53,[[12,[236]]]]]],[[-1,2],[[5,[-2]]],[],[]],[[236,2],236],[[-1,236,46,2],236,[]],0,[216,139],[168,139],0,0,0,[[236,236,176,281,[24,[65]],[24,[66]]],236],0,[314,236],0,[[236,236,176,281,[24,[65]],[24,[66]]],236],[[236,236,176,281,[24,[65]],[24,[66]]],236],[154,47],[154,47],[154,47],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[-1,[[5,[64]]],[]],[176,47],0,[176,2],0,0,[[],1],[-1,1,238],[[],331],[[],333],[[],279],[[],200],[[],201],[[],283],[[],287],[[],288],[[],290],[[],292],[[],235],[[],294],[[],297],[[],95],[[],298],[[],302],[[],303],[[],210],[[],242],[[],305],[[],306],[[],236],[[],[[244,[[143,[334,40]]]]]],[[],[[244,[[143,[243,40]]]]]],[[],[[244,[[143,[335,40]]]]]],[[],314],[[],315],[[],317],[[],318],[[],319],[[],320],[[],321],[[],323],[[],324],[[],325],[[],326],[[],327],[[],[[143,[-1,40]]],336],[[],97],[[],214],[[],192],[[],250],0,[[],[[44,[[24,[55]],40]]]],[46,-1,[]],[[[337,[-1]]],[],[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[244,[-1]]],[],[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[143,[-1,-2]]],-1,99,238],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[[337,[-1]]],[],[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],0,0,0,[327,66],[210,[[17,[66,16]]]],[210,66],[[[143,[-1,40]]],14,[150,99]],0,0,[[247,47,338],236],[[236,47,338],236],[[-1,15],[],[]],[[236,236]],[[-1,15],[[17,[15,16]]],[]],[[236,-1],236,[[167,[236]]]],[[327,66,[1,[46,46]],339,[277,[66,66,107,196]]],[[17,[1,51]]]],[[[143,[138,-1]]],[[17,[[143,[-2,-1]],[143,[138,-1]]]]],[238,121],[138,71,72]],[[[143,[138,-1]]],[[143,[-2,-1]]],[238,121],[138,71,72]],[[[143,[-1,-2]]],[[340,[-1,-2]]],99,[121,238]],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[[[143,[-1,-2]]],1,99,238],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[[210,-1],210,49],[236,236],[[210,[24,[[44,[236,40]]]]],210],[236,236],[-1,15,[]],[[[63,[67,64]],65,172],[[63,[70,64]]]],0,[236,341],[-1,33,[]],[-1,33,[]],0,[33,236],[-1,236,[[53,[[12,[33]]]]]],[315,236],0,0,[-1,-2,[],[[343,[342]]]],[-1,-2,[],[[343,[342]]]],[[-1,[12,[11]]],[[5,[13]]],[]],[[-1,[5,[10]]],[[5,[13]]],[]],[[200,200],2],[[201,201],2],[[176,176],2],[[281,281],2],[[282,282],2],[[283,283],2],[[285,285],2],[[286,286],2],[[287,287],2],[[288,288],2],[[289,289],2],[[290,290],2],[[231,231],2],[[291,291],2],[[292,292],2],[[235,235],2],[[293,293],2],[[294,294],2],[[295,295],2],[[296,296],2],[[297,297],2],[[95,95],2],[[298,298],2],[[257,257],2],[[236,-1],236,[[167,[236]]]],[[236,236],2],[[312,312],2],[[275,275],2],[[[244,[15]],[244,[15]]],2],[[[244,[[143,[-1,40]]]],[244,[[143,[-1,40]]]]],2,99],[[313,313],2],[[246,246],2],[[316,316],2],[[317,317],2],[[318,318],2],[[319,319],2],[[320,320],2],[[322,322],2],[[323,323],2],[[324,324],2],[[325,325],2],[[326,326],2],[[[143,[39,40]],39],2],[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],[[[143,[344,40]],344],2],[[214,214],2],[[192,192],2],[[216,39],2],[[216,216],2],[[168,168],2],[[250,250],2],[[236,-1],236,[[167,[236]]]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,236,2],236,[]],[[-1,178,345],[[17,[15,16]]],[]],[[259,178],[[17,[15,16]]]],[[-1,178,19,345],[[17,[346,16]]],[]],[[-1,178,19,345],[[17,[15,16]]],[]],0,0,[[236,-1],236,[[211,[66]]]],[[236,-1],236,[[53,[[12,[33]]]]]],[[-1,-2],[[17,[-3,182]]],[],347,[]],[[210,2],[[17,[66,16]]]],[-1,[[17,[15,16]]],[]],[[210,-2],210,[[167,[236]],121],[[53,[[12,[-1]]]]]],[236,236],[-1,[[17,[[1,[15,[48,[47]]]],16]]],[]],0,0,[331,348],[333,348],[[-1,14,46],[[17,[[5,[9]],16]]],[]],[[-1,14],[[17,[[5,[4]],16]]],[]],[[-1,[5,[9]]],[[17,[[5,[4]],16]]],[]],[[-1,14,33],[[17,[15,16]]],[]],[-1,2,[]],0,0,[[210,46],[[17,[178,16]]]],[-1,96,[]],[-1,[[82,[96]]],[]],[[349,47],236],[[349,14],236],[216,[[12,[168]]]],0,0,0,[[210,-1],210,[[167,[236]]]],[[236,-1],236,[[167,[236]]]],0,[[210,-1],210,[[167,[236]]]],[[236,-1],236,[[167,[236]]]],[[-1,-2],[[17,[-1,16]]],99,[]],[[-1,[5,[13]]],[[17,[[5,[-2]],16]]],99,[]],[[-1,[5,[13]]],[[17,[15,16]]],[]],[[210,236],210],[[236,-1],236,[[167,[236]]]],[[250,-1],250,28],[[-1,15,19,345],[[17,[15,16]]],[]],[-1,[[17,[178,16]]],[]],[[-1,178],[[17,[1,16]]],[]],[-1,[[5,[-2]]],[],[]],[239,210],[[[269,[-1]]],[[17,[178,16]]],234],[[[261,[-1]],178],[[17,[1,16]]],263],[[[249,[-1]]],[[17,[178,16]]],234],[[[251,[-1]]],[[17,[178,16]]],252],[[[350,[-1]],178],[[17,[1,16]]],263],[[[264,[-1]],178],[[17,[1,16]]],263],[[[351,[-1]],178],[[17,[1,16]]],263],[[[352,[-1]]],[[17,[178,16]]],234],[[[353,[-1]]],[[17,[178,16]]],234],[[[232,[-1]]],[[17,[178,16]]],234],[[[267,[-1]],178],[[17,[60,16]]],263],[-1,[[17,[210,16]]],[]],[-1,[[5,[4]]],[]],[-1,[[17,[210,16]]],[]],[304,[[17,[210,16]]]],[240,[[17,[210,16]]]],[[[249,[-1]],[24,[[143,[233,40]]]],2],[[17,[178,16]]],234],[[],236],[247,236],[210,210],[236,236],0,[236,236],0,[[],[[244,[[143,[243,40]]]]]],[236,236],[[236,236],236],[[15,15],[[17,[15,16]]]],[[[143,[354,40]]],[[17,[1,182]]]],[[355,50],[[17,[1,51]]]],[[335,50],[[17,[1,51]]]],[[356,50],[[17,[1,51]]]],[[200,50],[[17,[1,51]]]],[[201,50],[[17,[1,51]]]],[[280,50],[[17,[1,51]]]],[[176,50],[[17,[1,51]]]],[[281,50],[[17,[1,51]]]],[[282,50],[[17,[1,51]]]],[[283,50],[[17,[1,51]]]],[[357,50],[[17,[1,51]]]],[[285,50],[[17,[1,51]]]],[[241,50],[[17,[1,51]]]],[[286,50],[[17,[1,51]]]],[[287,50],[[17,[1,51]]]],[[358,50],[[17,[1,51]]]],[[288,50],[[17,[1,51]]]],[[289,50],[[17,[1,51]]]],[[290,50],[[17,[1,51]]]],[[231,50],[[17,[1,51]]]],[[291,50],[[17,[1,51]]]],[[291,50],[[17,[1,51]]]],[[292,50],[[17,[1,51]]]],[[235,50],[[17,[1,51]]]],[[235,50],[[17,[1,51]]]],[[293,50],[[17,[1,51]]]],[[294,50],[[17,[1,51]]]],[[295,50],[[17,[1,51]]]],[[296,50],[[17,[1,51]]]],[[297,50],[[17,[1,51]]]],[[95,50],[[17,[1,51]]]],[[298,50],[[17,[1,51]]]],[[299,50],[[17,[1,51]]]],[[300,50],[[17,[1,51]]]],[[346,50],[[17,[1,51]]]],[[307,50],[[17,[1,51]]]],[[236,50],[[17,[1,51]]]],[[236,50],[[17,[1,51]]]],[[312,50],[[17,[1,51]]]],[[275,50],[[17,[1,51]]]],[[275,50],[[17,[1,51]]]],[[[244,[-1]],50],[[17,[1,51]]],[]],[[313,50],[[17,[1,51]]]],[[313,50],[[17,[1,51]]]],[[246,50],[[17,[1,51]]]],[[246,50],[[17,[1,51]]]],[[314,50],[[17,[1,51]]]],[[315,50],[[17,[1,51]]]],[[316,50],[[17,[1,51]]]],[[317,50],[[17,[1,51]]]],[[318,50],[[17,[1,51]]]],[[319,50],[[17,[1,51]]]],[[320,50],[[17,[1,51]]]],[[276,50],[[17,[1,51]]]],[[321,50],[[17,[1,51]]]],[[322,50],[[17,[1,51]]]],[[323,50],[[17,[1,51]]]],[[324,50],[[17,[1,51]]]],[[325,50],[[17,[1,51]]]],[[326,50],[[17,[1,51]]]],[[327,50],[[17,[1,51]]]],[[[143,[-1,-2]],50],[[17,[1,51]]],99,238],[[[143,[-1,-2]],50],[[17,[1,51]]],[140,99],238],[[[143,[-1,-2]],50],[[17,[1,51]]],[191,99],238],[[214,50],[[17,[1,51]]]],[[192,50],[[17,[1,51]]]],[[216,50],[[17,[1,51]]]],[[168,50],[[17,[1,51]]]],[[250,50],[[17,[1,51]]]],[[14,218],66],0,0,0,0,[[236,-1,-2],236,[28,71,72,121],[[53,[[12,[236]]]]]],[[239,2],239],0,0,[[14,-1],[[17,[236,16]]],[[53,[[12,[236]]]]]],[[236,[24,[55]]],236],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[359,279],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[291,231],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[327,210],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[87,236],[-1,-1,[]],[2,236],[89,236],[47,236],[59,236],[55,236],[85,236],[257,236],[60,236],[91,236],[80,236],[14,236],[11,236],[-1,-1,[]],[-1,-1,[]],[360,[[244,[[143,[355,40]]]]]],[361,[[244,[[143,[355,40]]]]]],[362,[[244,[[143,[355,40]]]]]],[-1,-1,[]],[363,[[244,[[143,[355,40]]]]]],[364,[[244,[[143,[355,40]]]]]],[313,[[244,[[143,[355,40]]]]]],[246,[[244,[[143,[355,40]]]]]],[-1,-1,[]],[361,246],[-1,-1,[]],[364,246],[313,246],[362,246],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[320,319],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[365,[[143,[366,40]]]],[[[44,[-1,-2]]],[[143,[[12,[-1]],-2]]],[],[238,121]],[[[101,[-1]]],[[143,[[12,[-1]],40]]],[]],[367,-1,[]],[366,[[143,[366,40]]]],[14,[[143,[14,40]]]],[-1,-1,[]],[-1,[[143,[-1,40]]],[]],[[[82,[-1]]],[[143,[-1,40]]],[368,99]],[[[41,[-1,-2]]],[[143,[-1,-2]]],99,238],[369,[[143,[370,40]]]],[[[12,[-1]]],[[143,[[12,[-1]],40]]],121],[371,[[143,[371,40]]]],[370,[[143,[370,40]]]],[66,[[143,[14,40]]]],[[[143,[14,40]]],[[143,[[12,[11]],40]]]],[348,[[143,[371,40]]]],[279,97],[359,97],[-1,-1,[]],[-1,-1,[]],[[[12,[15]]],192],[198,192],[-1,-1,[]],[-1,-1,[]],[372,216],[373,216],[-1,-1,[]],[[[44,[168,40]]],250],[-1,-1,[]],[[-1,[24,[92]]],-2,[],[]],[[[374,[47]],[374,[11]],[24,[92]]],-1,[]],[[[374,[47]],[374,[11]],[24,[92]]],-1,[]],[-1,[[337,[[5,[13]]]]],49],[-1,[[337,[[5,[-2]]]]],49,6],[-1,[[143,[[12,[-2]],40]]],49,[]],[-1,192,49],[[-1,46],[[131,[47]]],49],[-1,[[131,[47]]],49],[[14,-1],-2,25,[]],[[-1,139],[[131,[47]]],49],[-1,[[337,[[5,[-2]]]]],49,6],[-1,[[337,[[5,[13]]]]],49],[[-1,46],[[131,[47]]],49],[[14,-1],-2,25,[]],[-1,[[337,[[5,[-2]]]]],52,6],[-1,[[143,[[12,[-2]],40]]],52,71],[-1,[[17,[[269,[354]],16]]],[[167,[348]]]],[-1,[[17,[[353,[354]],16]]],[[167,[348]]]],[[],[[143,[-1,40]]],99],[-1,[[143,[-2,-1]]],238,99],[[14,[12,[-1]]],-2,[],[]],[[14,[12,[[24,[-1]]]]],-2,[],[]],[-1,[[337,[[5,[-2]]]]],54,6],[-1,[[337,[[5,[13]]]]],54],[33,[[244,[[143,[243,40]]]]]],[[14,-1],-2,[],[]],[[[44,[40]],33],-1,[]],[[[44,[40]],33],-1,[]],0,[[14,-1,46],-2,[],99],[[14,46],-1,99],0,[[236,-1,[244,[[143,[243,40]]]],375],236,[28,71,72]],0,0,[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],[[-1,46],[[17,[56,16]]],[]],[[247,236],236],[[-1,46],24,[]],[[192,14],[[24,[33]]]],[[-1,46],[[17,[56,16]]],[]],[[-1,46],[[17,[56,16]]],[]],[[-1,46],56,[]],[[-1,46],56,[]],[[192,46],[[24,[[1,[[124,[123]],33]]]]]],[[192,46],[[24,[[1,[[124,[123]],33]]]]]],[278,236],[210,321],[322,33],[[],33],[[284,47,[24,[172]]],[[17,[280,16]]]],[[284,47,[24,[172]]],[[17,[280,16]]]],[[284,47,[24,[172]]],[[17,[280,16]]]],[[-1,192,376,96,96],[[24,[96]]],[]],[[-1,192,376,[12,[96]]],96,[]],[[192,14],[[24,[96]]]],[139,[[12,[168]]]],[377,46],[[192,14],[[24,[[1,[46,[124,[123]],33]]]]]],[107,60],[[[232,[-1]]],[[17,[[143,[378,40]],16]]],234],[[[143,[-1,-2]]],[[24,[-1]]],99,238],[[[143,[-1,-2]]],-1,99,238],[-1,[[44,[14,40]]],[]],[192,[[44,[14,40]]]],[250,[[44,[14,40]]]],[[-1,46],[[24,[57]]],[]],[-1,[[24,[[244,[[143,[243,40]]]]]]],[]],[[284,280,65,[24,[172]],283],[[17,[379,16]]]],[-1,[[17,[380,16]]],[252,234,99]],[[-1,192],[[17,[[143,[192,40]],16]]],[]],[[-1,46],56,[]],[[-1,46],24,[]],[[-1,46],56,[]],[-1,46,[]],[[210,-2],237,[[167,[236]],121],[[53,[[12,[-1]]]]]],[[-1,[44,[15,40]],200],[[17,[[1,[15,[44,[15,40]],19]],16]]],[]],[[210,236,-1,200],237,[[53,[[12,[236]]]]]],[[-1,[44,[15,40]],201],[[17,[[1,[15,[44,[15,40]],19]],16]]],[]],[[210,236,-1,201],237,[[53,[[12,[236]]]]]],[[210,-2],237,[[167,[236]],121],[[53,[[12,[-1]]]]]],[[176,176,[12,[47]],281,65,[24,[172]]],[[17,[[44,[[101,[55]],40]],16]]]],[[284,[12,[47]],281,65,[24,[66]],2,2,283],[[1,[[44,[[101,[55]],40]],[44,[47,40]],[44,[47,40]]]]]],[[-1,2,2],[[17,[19,16]]],[]],[[-1,-2],[],[],[]],[[236,-1],236,[[167,[236]]]],[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],[[-1,-2],[],[],[]],[[236,-1],236,[[167,[236]]]],[[[269,[-1]],2],[[269,[-1]]],234],[[[261,[-1]],2],[[261,[-1]]],263],[[304,2],304],0,[-1,2,[]],[-1,2,[]],0,[[201,-1],1,147],[[176,-1],1,147],[[281,-1],1,147],[[282,-1],1,147],[[283,-1],1,147],[[287,-1],1,147],[[288,-1],1,147],[[289,-1],1,147],[[290,-1],1,147],[[293,-1],1,147],[[295,-1],1,147],[[296,-1],1,147],[[95,-1],1,147],[[298,-1],1,147],[[236,-1],1,147],[[312,-1],1,147],[[275,-1],1,147],[[313,-1],1,147],[[246,-1],1,147],[[316,-1],1,147],[[317,-1],1,147],[[319,-1],1,147],[[320,-1],1,147],[[322,-1],1,147],[[[143,[-1,-2]],-3],1,[381,99],238,147],[[214,-1],1,147],[[168,-1],1,147],[[-1,15,235],[[17,[[1,[[1,[[44,[55,40]],[44,[55,40]]]],2]],16]]],[]],[[-1,15,235],[[17,[[44,[[1,[[24,[55]],[24,[55]]]],40]],16]]],[]],[[247,236],236],[[237,[24,[46]]],210],[[236,[24,[46]]],236],[-1,[[17,[[5,[9]],16]]],[]],[-1,[[5,[9]]],[]],0,[[[12,[[5,[9]]]],14],[[17,[[5,[9]],16]]]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[-1,[[5,[64]]],[]],0,[[239,291],239],0,0,[236,236],[154,2],0,[[],1],[-1,1,[121,238]],0,0,[[-1,14],[[24,[46]]],[]],[[192,14],[[24,[46]]]],[[250,14],[[24,[46]]]],[[[12,[55]]],[[0,[25]]]],[[[269,[-1]],[24,[46]]],[[269,[-1]]],234],[[[352,[-1]],[24,[46]]],[[352,[-1]]],234],[[[353,[-1]],[24,[46]]],[[353,[-1]]],234],0,[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[-1,[[41,[39,40]]],[]],[[-1,178,-2,-2],[[17,[178,16]]],[],49],[[210,210,-1,-1],210,[[167,[236]]]],0,[[192,46,[124,[123]],33],[[17,[[24,[33]],16]]]],[[236,236,47],236],[[236,236,47],236],0,[[15,289],15],[[236,289],236],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[216,[[1,[[44,[168,40]],[44,[[41,[39,40]],40]],[24,[92]]]]]],[[[337,[-1]]],-1,[]],[[[143,[-1,-2]]],[[24,[-1]]],[],238],[-1,-2,[],[]],[236],[192],[216],[-1,247,[]],[247,247],[[[143,[-1,-2]]],[],99,238],[-1,15,99],[[[143,[328,40]]],15],[-1,[[44,[-2,40]]],[],[]],[176,2],[-1,2,[]],[192,2],[[],2],[[],2],[236,236],[15,[[17,[[5,[13]],16]]]],[-1,[[17,[[5,[13]],16]]],[]],[236,236],[[],2],[176,2],[[15,15],[[17,[[5,[13]],16]]]],[[236,-1],236,[[167,[236]]]],[236,236],[15,[[17,[[5,[13]],16]]]],[-1,[[17,[[5,[13]],16]]],[]],[236,236],[-1,[[5,[13]]],[]],[-1,[[5,[13]]],[]],[-1,[[17,[[5,[13]],16]]],[]],[-1,2,[]],[-1,2,99],[236,236],[236,236],[236,236],[-1,[[5,[13]]],[]],[236,236],[236,236],[-1,[[5,[13]]],[]],[236,236],0,[[[143,[354,40]]],2],[[],2],[[-1,34],[[17,[2,16]]],[]],[-1,2,[]],[-1,2,[]],[[235,291,46],[[17,[1,16]]]],[[[143,[354,40]]],2],[176,2],[-1,[[5,[61]]],[]],[-1,[[5,[61]]],[]],[-1,[[17,[[5,[61]],16]]],[]],[-1,[[142,[141]]],[]],[192,[[0,[25]]]],[216,[[142,[[44,[[41,[344,40]],40]],382,141]]]],[192,[[0,[25,73]]]],[192,[[0,[25,73]]]],[192,[[0,[25,73]]]],[-1,[[17,[[24,[[41,[25,40]]]],16]]],[]],[[247,236],236],[[-1,178,-2,-2,231],[[17,[178,16]]],[],49],[[210,210,-1,-1,231],210,[[53,[[12,[236]]]]]],[[-1,178,14,14,297,[24,[56]],[24,[66]]],[[17,[178,16]]],[]],[210,239],[[-1,14],[[17,[[5,[9]],16]]],[]],[[-1,[5,[9]]],[[17,[[5,[9]],16]]],[]],[236,236],[-1,[[24,[[143,[192,40]]]]],[]],0,[[],236],[247,236],[210,210],[236,236],[-1,24,[]],[-1,210,[]],[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],0,[[-1,178,-2,-2],[[17,[178,16]]],[],49],[[210,210,-1,-1],210,[[167,[236]]]],[[239,-1],239,[[53,[[12,[236]]]]]],[-1,46,[]],[247,236],[192,46],[216,46],[[210,55],210],[[-1,46],15,[]],0,[236,247],[-1,236,383],[-1,236,[]],[384,236],[322,236],0,0,[[[269,[-1]],2],[[269,[-1]]],234],[[[353,[-1]],2],[[353,[-1]]],234],[[304,2],304],[[240,2],240],0,[236,236],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[[-1,[12,[15]]],[[17,[[5,[4]],16]]],[]],[[-1,47,338],[[17,[[5,[4]],16]]],[]],[[-1,47],[[17,[15,16]]],[]],[[-1,[5,[9]]],[[17,[[5,[9]],16]]],[]],[-1,[[5,[35]]],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,[[5,[4]]],[]],[[-1,15],[[17,[[5,[4]],16]]],[]],[[-1,47,46],[[5,[4]]],[]],[[-1,34],[[5,[4]]],[]],[-1,15,[]],[-1,[[17,[[5,[4]],16]]],[]],[-1,[[17,[[5,[4]],16]]],[]],[[-1,-2],[],[],[]],[[236,-1],236,[[167,[236]]]],[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],[[-1,-2],[],[],[]],[[236,-1],236,[[167,[236]]]],0,0,0,0,[[[143,[-1,-2]]],-1,121,[238,121]],[[210,-1,321,[24,[[143,[358,40]]]],[24,[14]]],210,[28,71,72]],[[236,-1,[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,-1],236,[28,71,72]],[[236,236,-1,[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,30],[[17,[236,16]]]],[[377,[24,[66]]],[[17,[96,16]]]],[[377,-1],[[17,[96,16]]],28],[-1,[[244,[[143,[243,40]]]]],[28,71,72]],[-1,[[244,[[143,[243,40]]]]],[28,71,72]],[-1,[[244,[[143,[243,40]]]]],[28,71,72]],[-1,[[244,[[143,[243,40]]]]],[28,71,72]],[[236,-1,[244,[[143,[243,40]]]]],236,[28,71,72]],[[-1,-2,[244,[[143,[243,40]]]]],236,[28,71,72],[[53,[[12,[236]]]]]],[[236,-1,[12,[236]],[244,[[143,[243,40]]]]],236,[28,71,72]],[[236,246,[12,[236]],2,2],236],[[-1,-2,[244,[[143,[243,40]]]]],236,[28,71,72],[[53,[[12,[236]]]]]],[377,[[17,[96,16]]]],[377,[[17,[96,16]]]],[377,[[17,[96,16]]]],[377,[[17,[96,16]]]],[377,[[17,[96,16]]]],[[[24,[[12,[66]]]],192,[24,[[12,[15]]]],2],[[24,[[44,[46,40]]]]]],[14,236],[248,236],[247,236],[-1,[[24,[-2]]],[],[]],[210,210],[236,236],[-1,15,[]],[-1,15,[]],[[[12,[15]]],[[17,[[24,[15]],16]]]],[14,236],[247,236],[-1,[[24,[80]]],[]],[210,210],[236,236],[-1,[[24,[80]]],[]],[14,236],[-1,[[24,[-2]]],[],[]],[210,210],[236,236],[-1,[[24,[80]]],[]],[-1,15,[]],[-1,15,[]],[[210,212],210],0,[[[249,[-1]],2],[[249,[-1]]],234],[[192,192],1],[[33,33],[[17,[33,16]]]],0,0,0,0,[-1,[[5,[64]]],[]],0,[-1,[[5,[64]]],[]],0,[14,236],[248,236],[247,236],[-1,[[24,[-2]]],[],[]],[210,210],[236,236],[-1,15,[]],[-1,15,[]],[[[12,[15]]],[[17,[[24,[15]],16]]]],0,0,0,0,[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[-1,[[5,[64]]],[]],0,0,[236,236],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[[-1,[24,[172]]],[[17,[-1,16]]],99],[[-1,[24,[172]]],[[17,[-1,16]]],99],[176,47],[176,2],[[-1,15],[],[]],[[176,47],176],[[236,236]],[[-1,15],[[17,[15,16]]],[]],0,0,[236,385],[-1,46,[]],[-1,[[24,[46]]],[]],[304,[[24,[46]]]],[240,[[24,[46]]]],0,0,0,[-1,[[17,[46,16]]],[]],[236,236],[-1,[[17,[46,16]]],[]],[-1,14,[]],0,0,0,0,0,[236,236],[236,236],0,[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[5,[64]]],[]],[176,47],0,[[[143,[-1,-2]],[143,[-1,-2]]],2,[],238],[235,2],[[-1,46],[[24,[46]]],[]],[[236,-1],236,[[167,[236]]]],[[236,-1],236,[[167,[236]]]],[377,[[17,[96,16]]]],[-1,-2,[],[]],[-1,-2,[],99],[[]],[[14,-1],-2,[],[]],[-1,[[337,[-1]]],[]],[210,239],[-1,[[269,[-1]]],234],[-1,[[261,[-1]]],263],[[[12,[96]]],377],[-1,[[249,[-1]]],234],[-1,[[251,[-1]]],252],[-1,[[350,[-1]]],263],[[],331],[-1,[[264,[-1]]],263],[[],333],[-1,[[351,[-1]]],263],[-1,[[352,[-1]]],234],[-1,[[353,[-1]]],234],[47,176],[-1,[[232,[-1]]],234],[[176,176,176],284],[[386,[143,[378,40]],[143,[192,40]],46,[24,[[44,[46,40]]]],[24,[[143,[233,40]]]],[24,[387]],46,2,[24,[[44,[15,40]]]]],[[17,[266,16]]]],[-1,[[267,[-1]]],[263,263]],[291,231],[-1,304,[[53,[371]]]],[-1,240,[[53,[371]]]],[-1,[[244,[-1]]],[]],[[236,236,236],314],[[],315],[[14,[44,[96,40]],[244,[[143,[243,40]]]],-1],276,355],[-1,[[143,[-1,40]]],[]],[[],192],[[139,[44,[[41,[39,40]],40]],[24,[92]]],216],[[-1,139,2],168,[[167,[66]]]],[-1,[[143,[-2,40]]],193,[]],[139,216],[[-1,46,46],[[5,[-2]]],[],[]],[[-1,46,46],15,[]],[[-1,-2],[[143,[-1,-2]]],[],238],[[192,46,[124,[123]],33],[[17,[192,16]]]],[[139,46],216],[[[44,[348,40]]],304],[[[44,[348,40]]],240],[[],[[143,[[260,[-1]],40]]],[]],[-1,[[143,[[260,[-2]],-1]]],238,[]],[46,[[143,[[12,[[260,[-1]]]],40]]],[]],[[46,-1],[[143,[[12,[[260,[-2]]]],-1]]],238,[]],[[],[[143,[[260,[-1]],40]]],[]],[-1,[[143,[[260,[-2]],-1]]],238,[]],[46,[[143,[[12,[[260,[-1]]]],40]]],[]],[[46,-1],[[143,[[12,[[260,[-2]]]],-1]]],238,[]],[379,24],[[266,46],[[17,[[24,[[44,[178,40]]]],16]]]],[[236,[44,[236,40]]],1],[[236,[44,[236,40]]],1],[236,236],[236,236],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],0,0,[-1,46,[]],[210,210],[236,236],0,[[[232,[-1]]],[[17,[46,16]]],234],0,0,0,[[239,-1],239,[[53,[[12,[236]]]]]],[[210,[389,[388]],[389,[390]]],[[17,[391,16]]]],0,[[236,-1],236,[[167,[236]]]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[61]],16]]],[]],0,[[309,-1],236,[[167,[236]]]],[[311,-1],236,[[167,[236]]]],[[-1,178,-2,-2],[[17,[178,16]]],[],49],[[210,210,-1,-1],210,[[167,[236]]]],[[236,-2],236,[[167,[236]],121],[[53,[[12,[-1]]]]]],[[236,-2,320],236,[[167,[236]],121],[[53,[[12,[-1]]]]]],0,0,[14,176],[[14,[12,[14]],14],[[63,[62,61]]]],[[14,[12,[14]],14],[[63,[74,64]]]],[[14,[12,[14]],14,65],[[63,[67,64]]]],[[-1,55,2],[[17,[[5,[61]],16]]],[]],0,[[176,176],[[24,[175]]]],[[[143,[-1,-2]],[143,[-1,-2]]],[[24,[175]]],[],238],[-1,371,[]],[304,371],[240,371],[-1,[[12,[348]]],[]],[304,[[12,[348]]]],[240,[[12,[348]]]],[[236,236,11],236],0,0,[[],236],[-1,[[392,[[143,[-1,40]]]]],[]],[[-1,-2],[[392,[[143,[-1,-2]]]]],[],238],0,0,0,0,[[236,-1],236,[[167,[236]]]],0,0,0,[[236,14],236],[[178,178,[24,[[12,[[101,[55]]]]]],[24,[[12,[[101,[55]]]]]]],[[1,[[44,[55,40]],[44,[[24,[55]],40]]]]]],0,[-1,15,[]],[236,236],[210,[[17,[[1,[178,178]],16]]]],0,0,[[[143,[-1,40]],393],1,[150,99]],[[[143,[-1,-2]],[143,[-1,-2]]],2,99,238],[[14,236,95],236],[[-1,80,95],[[17,[[24,[-2]],16]]],[],[]],[[210,236,95],210],[[236,236,95],236],[[-1,80,95],[[17,[15,16]]],[]],[[-1,80,95],[[17,[15,16]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[[-1,-2],[[17,[-3,182]]],[],347,[]],0,0,[[[269,[-1]],2],[[269,[-1]]],234],[[304,2],304],[[-1,302,[24,[60]]],15,[]],[[236,302,[24,[60]]],236],[[[143,[354,40]],[12,[11]]],[[17,[46,182]]]],[[[143,[354,40]],394],[[17,[1,182]]]],0,[[[232,[-1]],292],[[232,[-1]]],234],[[[143,[354,40]],[44,[11,40]]],[[17,[46,182]]]],[[[143,[354,40]],66],[[17,[46,182]]]],[-1,[[17,[-2,182]]],[],395],[[[143,[354,40]],[12,[396]]],[[17,[46,182]]]],[-1,2,[]],[-1,15,[]],[304,2],[240,2],0,0,0,[[-1,-2],236,[28,71,72,121],[[53,[[12,[236]]]]]],[-1,15,[]],[-1,15,[]],[[-1,15],[],[]],[[236,236]],[[-1,15],[[17,[15,16]]],[]],[[192,14],[[24,[33]]]],[[-1,14],1,[]],[[210,-1,-2],210,49,49],[[192,14,[124,[123]]],[[24,[[124,[123]]]]]],[[349,[44,[66,40]]],236],[[-1,236],236,[[167,[236]]]],[[15,[5,[35]]],[[17,[[5,[4]],16]]]],[[236,-1],236,[[167,[236]]]],[[-1,14,14],[[17,[[5,[9]],16]]],[]],[[-1,14,14],[[17,[[5,[9]],16]]],[]],[[-1,14,14,46],[[17,[[5,[9]],16]]],[]],[[-1,14,14],[[17,[[5,[9]],16]]],[]],[[[63,[67,64]],[24,[14]],[5,[9]]],[[17,[[63,[67,64]],16]]]],[[236,[12,[47]]],236],[371,348],0,[-1,-1,[]],[-1,15,[]],[247,236],[210,210],[236,236],0,[[239,-1],239,[[53,[[12,[236]]]]]],[[236,201],236],[[236,236,316],236],[[236,236,316],236],[[-1,28,97],[[17,[15,16]]],99],[[236,[143,[28,40]],[244,[[143,[243,40]]]],97],236],[[-1,28,97],[[17,[15,16]]],[]],[[236,46,-1],236,[30,71,72,29]],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,279],[[17,[15,16]]],[]],[[236,359],236],[[-1,176,176,[24,[172]],[5,[9]]],[[17,[-1,16]]],99],[[236,55],236],[[284,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]],14],[[17,[47,16]]]],[-1,[[24,[387]]],[]],[304,[[24,[387]]]],[240,[[24,[387]]]],0,0,0,0,0,0,[[-1,[5,[4]]],[[5,[4]]],[]],[[],[[244,[[143,[243,40]]]]]],[[236,80,2,2,[24,[60]]],236],[[236,236,2,2,[24,[60]]],236],[[[269,[-1]],46],[[269,[-1]]],234],[[-1,397],[[17,[178,16]]],[]],[[240,397],[[17,[178,16]]]],[[-1,305],[[17,[210,16]]],[[53,[371]]]],[[[44,[348,40]],305],[[17,[210,16]]]],[[-1,306],[[17,[210,16]]],[[53,[371]]]],[[[44,[348,40]],306],[[17,[210,16]]]],[[[249,[-1]]],[[17,[192,16]]],234],[[[251,[-1]]],[[17,[192,16]]],252],[[[232,[-1]]],[[17,[[143,[192,40]],16]]],234],[[-1,[24,[46]]],[[17,[[143,[192,40]],16]]],[]],[210,[[17,[[143,[192,40]],16]]]],[[240,[24,[46]]],[[17,[[143,[192,40]],16]]]],[327,[[17,[[82,[[143,[192,40]]]],16]]]],0,[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[-1,[[5,[64]]],[]],0,[[[143,[354,40]],398],[[17,[60,182]]]],[[210,-1],210,[[53,[[12,[236]]]]]],[[210,-1],210,[[53,[[12,[236]]]]]],0,0,0,[[-1,[5,[13]],[24,[-2]]],[[17,[-1,16]]],99,[]],[[-1,-2,[24,[-3]]],[[17,[-1,16]]],99,49,[]],[[-1,[12,[55]],-2],[[17,[15,16]]],[],49],[[-1,-2,-3],[[17,[-1,16]]],99,49,28],[[-1,46,2],1,[]],[[192,14,33],[[24,[33]]]],[[192,46,33],[[24,[33]]]],[[-1,[143,[192,40]]],1,[]],[[[232,[-1]],2],[[232,[-1]]],234],[[278,307],236],[[[267,[-1]],2],[[267,[-1]]],263],[[[249,[-1]],2],[[249,[-1]]],234],[[[251,[-1]],2],[[251,[-1]]],252],[[[352,[-1]],2],[[352,[-1]]],234],[[[232,[-1]],2],[[232,[-1]]],234],[[-1,2],-1,99],[[236,58],236],[[216,[24,[92]]],1],[[-1,47],[[5,[-2]]],[],[]],[[-1,47],15,[]],[[247,236],236],[[210,47],210],[[236,47],236],[[-1,47,-2],[[5,[-3]]],[],[],[]],[[210,47,-1],210,[[167,[236]]]],[[236,47,-1],236,[[167,[236]]]],[[192,14],[[24,[33]]]],[[192,46],[[24,[[1,[[124,[123]],33]]]]]],[236,236],[-1,1,[]],[-1,1,[]],[[236,[24,[60]]],236],0,0,[[210,348,325],[[17,[1,16]]]],[[210,348,324],[[17,[1,16]]]],[[210,348,323],[[17,[1,16]]]],0,0,0,[[-1,47,46],15,[]],[[247,236,236],236],[[210,47,55],210],[[236,-1,-2],236,[[167,[236]]],[[167,[236]]]],[[216,46,46],1],[[216,46,46],1],0,0,0,[[-1,46,46],-1,99],[[-1,46,46],-2,[],[]],[[-1,46,46],-1,99],[[-1,46,46],-2,[],[]],[[216,46,46],1],[[216,46,46],1],[[216,46,46],216],[[216,46,46],216],0,[[-1,2],[[5,[-2]]],[],[]],[[247,34],236],[[210,14,34],210],[[236,2],236],[[236,-2,-3],236,[[167,[236]],121],[[53,[[12,[-1]]]]],[[53,[[12,[2]]]]]],[[210,-1,-2,2,2],210,[[53,[[12,[236]]]]],[[53,[[12,[2]]]]]],[[-1,34],[[5,[-2]]],[],[]],[[236,34],236],[[-1,34],15,[]],[[[143,[-1,40]]],[[24,[150]]],[150,99]],[[[143,[-1,40]],[399,[1]]],[[17,[1,400]]],[401,99]],[[[143,[-1,40]],[402,[1]]],[[17,[1,400]]],[403,99]],[[236,236,11,2],236],[[-1,[5,[9]]],[[5,[4]]],[]],[[-1,[5,[9]],46],[[17,[158,16]]],[]],[[-1,[5,[9]],46],[[17,[158,16]]],[]],[[[5,[9]],[5,[9]],-1],[[5,[4]]],28],[[-1,[5,[9]]],[[5,[4]]],[]],[[[5,[9]],[5,[9]],46,-1],[[17,[158,16]]],28],[[-1,[5,[9]],46],[[17,[158,16]]],[]],[236,236],0,[[-1,[12,[11]]],[[5,[13]]],[]],[[-1,[5,[10]]],[[5,[13]]],[]],0,[[[143,[-1,40]]],[[17,[1,400]]],[403,99]],[[[143,[-1,40]]],[[17,[1,400]]],[401,99]],[[-1,11],[[24,[80]]],[]],[[210,11],210],[[236,11],236],[[-1,11],15,[]],[[-1,11],15,[]],[236,404],[[[5,[9]],14],[[5,[9]]]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[[-1,47,[24,[60]]],[[5,[9]]],[]],0,0,0,0,[[-1,14],[[17,[15,16]]],[]],0,[[236,33],236],0,[[[5,[9]],[5,[9]]],[[5,[9]]]],[[-1,15],[[17,[[5,[9]],16]]],[]],[[[5,[9]],[5,[9]]],[[5,[9]]]],[[-1,15],[[17,[[5,[9]],16]]],[]],[[[5,[9]],[5,[9]]],[[5,[9]]]],[[-1,15],[[17,[[5,[9]],16]]],[]],[[[5,[9]],[5,[9]]],[[5,[9]]]],[[-1,[5,[9]]],[[5,[9]]],[]],[[[5,[9]],[5,[9]]],[[5,[9]]]],[[-1,[5,[9]]],[[5,[9]]],[]],[[[143,[-1,-2]]],46,99,238],[236,349],[[-1,15],[],[]],[[236,236]],[[-1,15],[[17,[15,16]]],[]],[[239,-1],239,[[53,[14]]]],[231,14],[[236,14],236],0,[14,236],[248,236],[247,236],[-1,[[24,[-2]]],[],[]],[210,210],[236,236],[-1,15,[]],[[[12,[15]]],[[17,[15,16]]]],[[],[[244,[[143,[243,40]]]]]],[[-1,-2],[[17,[-3,182]]],[],193,[]],[[247,236],236],[[210,55],210],[[237,[24,[46]]],210],[[236,[24,[46]]],236],[[-1,-2],[[17,[-1,16]]],99,[]],[[-1,[5,[35]]],[[17,[15,16]]],[]],[[236,-1],236,[[167,[236]]]],[[-1,[12,[55]]],[[17,[15,16]]],[]],[[-1,[12,[55]]],15,[]],[[-1,-2],-1,[],[]],[[-1,[5,[35]]],15,[]],[[236,236,236],236],[[308,-1],309,[[167,[236]]]],[[310,-1],311,[[167,[236]]]],[[-1,46],15,[]],0,[[236,236,176,281],236],0,0,0,[[-1,65],[[17,[[5,[64]],16]]],[]],[210,[[17,[[1,[391,[389,[388]],[389,[390]]]],16]]]],[327,[[17,[[1,[391,[389,[388]],[389,[390]]]],16]]]],[210,[[17,[[1,[391,[389,[388]],[389,[390]]]],16]]]],[322,[[24,[56]]]],[192,250],[216,[[41,[39,40]]]],[-1,[[44,[[12,[11]],40]]],[]],[[210,2],[[17,[66,16]]]],[236,[[17,[66,16]]]],[[-1,[24,[14]],2],[[17,[178,16]]],[]],[[-1,[24,[14]],2],[[17,[178,16]]],[]],[[-1,192],[[17,[96,16]]],[]],[[236,192,376],[[17,[96,16]]]],[-1,[[5,[9]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[236,236],[377,[[17,[96,16]]]],[[-1,14],[[17,[15,16]]],[]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,66,[]],[[192,192],[[17,[2,16]]]],0,[-1,[[5,[9]]],[]],[-1,[[5,[9]]],[]],0,0,[[210,55,-1,-2,2,2],210,[[53,[[12,[236]]]]],[[53,[[12,[2]]]]]],[[-1,[24,[172]],[5,[9]],14,[5,[9]]],[[17,[-1,16]]],99],[[176,47,[24,[172]],-1,-2,-3,14],[[17,[47,16]]],28,28,28],[[176,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]]],[[17,[47,16]]]],[[284,47,[24,[172]]],[[17,[47,16]]]],[[284,47,[24,[172]]],[[17,[47,16]]]],[[176,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]],14],[[17,[47,16]]]],[[[269,[-1]],2],[[269,[-1]]],234],[[304,2],304],[[176,47,[24,[172]],14],[[17,[47,16]]]],[[284,47,[24,[172]],14],[[17,[47,16]]]],[[-1,-2],[[17,[-1,16]]],99,[28,29]],[-1,[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-3,-4]]],25,[],[[164,[-2]]],[]],[-1,[[17,[-3,-4]]],[25,54],[],[[164,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],[25,54],[],[[165,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],25,[],[[165,[-2]]],[]],[[-1,14],[[17,[[5,[-2]],-3]]],25,[],[]],[[-1,[5,[-2]]],[[17,[[5,[-2]],-3]]],25,[],[]],[[-1,14],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,[5,[-2]]],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,14,33],[[17,[[5,[-2]],-3]]],[25,54],[],[]],[[-1,14,33],[[17,[[5,[-2]],-3]]],25,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[56,[[17,[322,16]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[143,[[12,[-1]],-2]]],[[17,[[143,[[101,[-1]],-2]]]]],[],[238,121]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[192,14],[[17,[33,16]]]],[[192,46],[[17,[[1,[[124,[123]],33]],16]]]],[[192,14],[[17,[96,16]]]],[[192,14],[[17,[[1,[46,[124,[123]],33]],16]]]],[[192,14],[[17,[33,16]]]],[[-1,14],[[17,[46,16]]],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[377,-1],[[17,[96,16]]],28],[[377,-1],[[17,[96,16]]],28],[[377,-1],[[17,[96,16]]],28],[11,[[17,[293,16]]]],[55,[[17,[295,16]]]],[91,[[17,[296,16]]]],[-1,[[17,[[143,[-1,40]],405]]],[]],[[139,[44,[[41,[39,40]],40]],[24,[92]]],[[17,[216,181]]]],[[-1,-2],[[17,[[143,[-1,-2]],405]]],[],238],[[],[[17,[[143,[[260,[-1]],40]],405]]],[]],[-1,[[17,[[143,[[260,[-2]],-1]],405]]],238,[]],[[],[[17,[[143,[[260,[-1]],40]],405]]],[]],[-1,[[17,[[143,[[260,[-2]],-1]],405]]],238,[]],[-1,[[17,[[392,[[143,[-1,40]]]],405]]],[]],[[-1,-2],[[17,[[392,[[143,[-1,-2]]]],405]]],[],238],[[-1,[44,[11,40]]],[[17,[1,16]]],[]],[[[143,[-1,-2]]],[[17,[-1,[143,[-1,-2]]]]],[],238],0,0,0,[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[[],14],0,0,[-1,[[17,[[5,[-2]],16]]],[],[]],[248,236],[247,236],[[210,[24,[[44,[66,40]]]],195],210],[236,236],[-1,[[17,[15,16]]],[]],[248,236],[247,236],[[210,[24,[[44,[66,40]]]],195],210],[236,236],[[],154],[[210,-1],210,49],[[[143,[[406,[-1]],40]]],[[17,[-1,1]]],71],[[[143,[-1,-2]]],-1,121,[238,121]],[236,236],[[-1,-2,14,176,176],[[17,[178,16]]],[],[[211,[66]]]],[[-1,-2,14,176,176],[[17,[178,16]]],[],[[211,[66]]]],[[[232,[-1]],2],[[232,[-1]]],234],0,0,[[239,235],239],0,[216,[[24,[92]]]],[216,[[24,[92]]]],[[-1,46],[],[]],[[-1,2,2],[[17,[178,16]]],[]],[[236,2,2],236],0,[[-1,46],[],[]],0,[216,[[12,[[41,[39,40]]]]]],[-1,[],[]],[216,382],[[-1,11],[[24,[80]]],[]],[[210,11],210],[[236,11],236],[[-1,11],15,[]],[[-1,11],15,[]],0,[[-1,107,[44,[60,40]]],[[17,[1,16]]],[]],[[-1,107,[12,[60]]],[[17,[1,16]]],[]],[[[143,[[406,[-1]],40]],-2],[[17,[-3,1]]],71,193,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[143,[-1,-2]]],46,99,238],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[283,[[24,[55]]]],[176,47],0,[176,2],0,0,0,[-1,308,[[167,[236]]]],[[309,-1],310,[[167,[236]]]],[[311,-1],310,[[167,[236]]]],0,0,0,0,[[239,210],239],[[314,236],314],[[[261,[-1]],46],[[261,[-1]]],263],[[[352,[-1]],46],[[352,[-1]]],234],[[240,[24,[46]]],240],[[304,2],304],[46],[46,192],[[[269,[-1]],46],[[269,[-1]]],234],[[[353,[-1]],[24,[46]]],[[353,[-1]]],234],[[210,236],210],[[192,[124,[123]],33],[[24,[33]]]],[[[269,[-1]],[24,[[44,[66,40]]]]],[[269,[-1]]],234],[[[249,[-1]],[24,[[44,[66,40]]]]],[[249,[-1]]],234],[[[251,[-1]],[24,[[44,[66,40]]]]],[[251,[-1]]],252],[[[232,[-1]],[24,[[44,[66,40]]]]],[[232,[-1]]],234],[[210,-1],210,[[53,[[12,[236]]]]]],[[210,-1],210,[[53,[[12,[236]]]]]],[[[269,[-1]],[24,[11]]],[[269,[-1]]],234],[[304,[24,[11]]],304],[[[350,[-1]],[24,[290]]],[[350,[-1]]],[]],[[331,[24,[290]]],331],[[[264,[-1]],[24,[290]]],[[264,[-1]]],263],[[333,[24,[290]]],333],[[[267,[-1]],298],[[267,[-1]]],263],[[210,-1],210,[[53,[[12,[210]]]]]],[[[267,[-1]],[24,[46]]],[[267,[-1]]],263],[[[261,[-1]],[24,[66]]],[[261,[-1]]],263],[[[261,[-1]],[24,[66]]],[[261,[-1]]],263],[[314,236],314],[[315,236],315],[[377,33],[[17,[96,16]]]],[[304,[24,[192]]],304],[[[269,[-1]],[24,[[143,[192,40]]]]],[[269,[-1]]],234],[[[269,[-1]],[24,[[12,[33]]]]],[[269,[-1]]],234],[[[269,[-1]],285],[[269,[-1]]],234],[[304,285],304],[[[269,[-1]],11],[[269,[-1]]],234],[[304,11],304],[[331,348],331],[[333,348],333],[[[261,[-1]],[24,[46]]],[[261,[-1]]],263],[[315,236,236,236],315],[[[232,[-1]],[24,[[44,[15,40]]]]],[[232,[-1]]],234],[[314,236,236,236],314],[[315,236,236,236],315],[[314,236],314],[[315,236],315],[[[269,[-1]],2],[[269,[-1]]],234],[[[352,[-1]],2],[[352,[-1]]],234],[[304,2],304],[[304,[24,[46]]],304],[[240,[24,[46]]],240],[[[351,[-1]],407],[[351,[-1]]],263],[[[352,[-1]],407],[[352,[-1]]],234],[[[261,[-1]],66],[[261,[-1]]],263],[[168,[408,[66,66,40]]],168],[[250,[408,[66,66,40]]],250],[[314,236],314],[[315,236],315],[[315,236],315],[[314,236],314],[[315,236],315],[[[269,[-1]],2],[[269,[-1]]],234],[[304,2],304],[[314,236],314],[[[269,[-1]],[24,[46]]],[[269,[-1]]],234],[[[249,[-1]],[24,[46]]],[[249,[-1]]],234],[[[251,[-1]],[24,[46]]],[[251,[-1]]],252],[[[353,[-1]],[24,[46]]],[[353,[-1]]],234],[[[232,[-1]],[24,[46]]],[[232,[-1]]],234],[[304,[24,[46]]],304],[[240,[24,[46]]],240],[[[269,[-1]],[24,[46]]],[[269,[-1]]],234],[[[353,[-1]],[24,[46]]],[[353,[-1]]],234],[[315,236],315],[[[261,[-1]],66],[[261,[-1]]],263],[[[269,[-1]],[24,[286]]],[[269,[-1]]],234],[[304,[24,[286]]],304],[[210,321],210],[[-1,348],-1,[]],[[[269,[-1]],[24,[-2]]],[[269,[-1]]],234,[[167,[348]]]],[[[353,[-1]],[24,[-2]]],[[353,[-1]]],234,[[167,[348]]]],[[304,348],304],[[240,348],240],[[-1,[44,[348,40]]],-1,[]],[[304,[44,[348,40]]],304],[[240,[44,[348,40]]],240],[[[269,[-1]],[24,[[143,[233,40]]]]],[[269,[-1]]],234],[[210,2],210],[[[269,[-1]],[24,[[44,[46,40]]]]],[[269,[-1]]],234],[[[249,[-1]],[24,[[44,[46,40]]]]],[[249,[-1]]],234],[[[251,[-1]],[24,[[44,[46,40]]]]],[[251,[-1]]],252],[[[352,[-1]],[24,[[44,[66,40]]]]],[[352,[-1]]],234],[[[232,[-1]],[24,[[44,[46,40]]]]],[[232,[-1]]],234],[[210,2],210],[[[269,[-1]],[24,[11]]],[[269,[-1]]],234],[[[261,[-1]],11],[[261,[-1]]],263],[[304,[24,[11]]],304],[[[261,[-1]],287],[[261,[-1]]],263],[[-1,2],-1,[]],[[[269,[-1]],2],[[269,[-1]]],234],[[[353,[-1]],2],[[353,[-1]]],234],[[304,2],304],[[240,2],240],[[[269,[-1]],[24,[387]]],[[269,[-1]]],234],[[[249,[-1]],[24,[387]]],[[249,[-1]]],234],[[[251,[-1]],[24,[387]]],[[251,[-1]]],252],[[[232,[-1]],[24,[387]]],[[232,[-1]]],234],[[210,14,[24,[55]]],210],[[304,[24,[387]]],304],[[240,[24,[387]]],240],[[[267,[-1]],[24,[46]]],[[267,[-1]]],263],[377,[[17,[96,16]]]],[[[269,[-1]],[24,[[143,[192,40]]]]],[[269,[-1]]],234],[[[352,[-1]],[143,[192,40]]],[[352,[-1]]],234],[[[353,[-1]],[143,[192,40]]],[[353,[-1]]],234],[[304,[24,[[143,[192,40]]]]],304],[[240,[24,[[143,[192,40]]]]],240],[[304,-1],[[17,[304,16]]],28],[[[352,[-1]],192],[[352,[-1]]],234],[[[353,[-1]],192],[[353,[-1]]],234],[[314,236],314],[[315,236],315],[[[269,[-1]],11],[[269,[-1]]],234],[[[261,[-1]],11],[[261,[-1]]],263],[[304,11],304],[[210,2],210],[[[269,[-1]],46],[[269,[-1]]],234],[[304,46],304],[[[269,[-1]],46],[[269,[-1]]],234],[[304,46],304],[[210,2],210],[[[267,[-1]],2],[[267,[-1]]],263],[[210,2],210],[[[261,[-1]],[24,[66]]],[[261,[-1]]],263],[[314,65],314],[[314,[24,[66]]],314],[[[269,[-1]],2],[[269,[-1]]],234],[[304,2],304],[[210,2],210],[[216,[24,[92]]],[[41,[39,40]]]],[[216,[24,[92]]],216],[[-1,[24,[92]]],-1,[]],[[315,236],315],[[314,236],314],[210,210],[[[143,[354,40]],[12,[11]]],[[17,[46,182]]]],[[-1,-2],[[17,[46,182]]],[],395],[[[143,[354,40]],[12,[409]]],[[17,[46,182]]]],[[236,-1],236,[[167,[236]]]],[-1,[[5,[61]]],[]],[-1,[[5,[61]]],[]],[-1,[[17,[[5,[61]],16]]],[]],0,0,[[-1,[5,[13]],[5,[-2]]],[[17,[[5,[-2]],16]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[217,-1],15,[28,71,72]],[[217,-1],15,[28,71,72]],[[[12,[[101,[55]]]],-1],15,[28,71,72]],[[[12,[[101,[55]]]],-1],15,[28,71,72]],[[[12,[-1]],-2,[24,[[143,[138,40]]]]],[[108,[-1]]],[152,227],[25,54]],[[[12,[-1]],92,-2,[24,[[143,[138,40]]]]],[[108,[-1]]],[152,227],[25,54]],[[[5,[-1]],55,55],[[5,[-1]]],27],[[[44,[[101,[55]],40]],[12,[[41,[39,40]]]]],2],[[-1,19],15,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,[[148,[24,24]]],27],[[[5,[-1]],[5,[-2]],-3],1,27,27,30],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3,14],[[5,[-4]]],27,27,30,27],[[[5,[-1]],[5,[-2]],-3,2,2],[[5,[-1]]],27,27,30],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[5,[-5]]],27,27,27,[[149,[24,24,24]]],27],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,150],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,[]],[[[5,[-1]],[5,[-2]],-3],[[17,[[5,[-4]],-5]]],27,27,30,27,[]],[[[5,[-1]],[5,[-2]],-3,2,2],[[17,[[5,[-1]],-4]]],27,27,30,150],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[17,[[5,[-5]],-6]]],27,27,27,30,27,[]],0,0,[-1,15,[]],[-1,15,[]],[-1,[[17,[15,16]]],[]],[-1,[[17,[[5,[4]],16]]],[]],[-1,[[17,[[5,[4]],16]]],[]],[-1,[[5,[20]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[274,236],236],[46,-1,[]],[46,-1,[]],[46,1],[[274,236],236],[-1,-1,[]],[[],46],[-1,-2,[],[]],[[274,236],236],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,[24,[14]],2],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]]],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]],65,2,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[[-1,[24,[14]],65,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[[-1,[24,[14]],2],[[17,[[63,[74,64]],16]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[359,359],[[-1,-2],1,[],[]],0,0,[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[64]]],[]],[[],359],[46,-1,[]],[46,-1,[]],[46,1],0,0,[-1,-1,[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[64]]],[]],[[],46],[-1,-2,[],[]],[-1,[[5,[13]]],[]],[-1,[[5,[13]]],[]],[-1,[[5,[61]]],[]],[-1,[[5,[61]]],[]],[-1,[[5,[64]]],[]],[-1,[[5,[64]]],[]],0,0,[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[64]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[64]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[[14,[12,[14]],14],[[63,[62,61]]]],[[14,[12,[14]],14],[[63,[74,64]]]],[[14,[12,[14]],14,65],[[63,[67,64]]]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[[-1,279],[[17,[15,16]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[64]]],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],0,[-1,106,[]],0,[[],154],0,[-1,-2,[],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],[-1,[[5,[35]]],[]],0,0,0,0,[-1,[[5,[61]]],[]],[-1,[[5,[61]]],[]],0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,[24,[14]],2],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]]],[[17,[[63,[62,61]],16]]],[]],[[-1,[24,[14]],65,2,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[[-1,[24,[14]],65,2,[24,[66]],[5,[9]]],[[17,[[63,[67,64]],16]]],[]],[[-1,[24,[14]],2],[[17,[[63,[74,64]],16]]],[]],[-1,[[5,[9]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[410,410],[[-1,-2],1,[],[]],[46,-1,[]],[46,-1,[]],[46,1],[[410,410],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[410,50],[[17,[1,51]]]],[-1,-1,[]],[[410,-1],1,147],0,[[],46],[-1,-2,[],[]],[[410,14],2],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[411,[-1]]],[[411,[-1]]],[121,6]],[[-1,-2],1,[],[]],[46,-1,[]],[46,-1,[]],[46,1],[-1,-1,[]],[14,[[24,[410]]]],[[],46],[-1,-2,[],[]],0,[[[411,[-1]],14],24,6],[[-1,[12,[11]],[24,[65]]],[[24,[-2]]],[],[]],[[[411,[61]],[12,[11]],[24,[65]]],[[24,[91]]]],[[[411,[64]],[12,[11]],[24,[65]]],[[24,[47]]]],0,[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[[-1,[24,[65]]],[[17,[-2,16]]],[],[]],[[410,[24,[65]]],[[17,[[411,[64]],16]]]],[[410,[24,[65]]],[[17,[[411,[61]],16]]]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[329,329],[[-1,-2],1,[],[]],[[],329],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[[329,329],2],[[412,412],2],[[329,50],[[17,[1,51]]]],[-1,-1,[]],[-1,-1,[]],[14,[[17,[412]]]],[[14,-1],[[17,[329,16]]],49],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,49,[]],[-1,-2,49,[]],[[33,-1],-2,49,[]],[[33,-1],-2,49,[]],[-1,33,[]],[-1,[[24,[12]]],[]],[[-1,33],[[17,[15,16]]],[]],0,[-1,-2,[],164],[-1,-2,54,164],[[-1,33],-2,54,165],[[-1,33],-2,[],165],[-1,33,[]],0,[[[44,[40]],33],-1,[]],[[[44,[40]],33],-1,[]],[[-1,46],24,[]],[[-1,46],[[17,[56,16]]],[]],[[-1,46],56,[]],[[],33],[[-1,46],56,[]],[[-1,46],24,[]],[-1,[[142,[141]]],[]],[-1,24,[]],[[33,33],[[17,[33,16]]]],0,[[]],[-1,[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[[33,-1],[[17,[-2,-3]]],49,[],[]],[-1,[[17,[-3,-4]]],25,[],[[164,[-2]]],[]],[-1,[[17,[-3,-4]]],[25,54],[],[[164,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],[25,54],[],[[165,[-2]]],[]],[[-1,33],[[17,[-3,-4]]],25,[],[[165,[-2]]],[]],[[-1,46],[],[]],[[-1,46],[],[]],[-1,[],[]],[46],[[-1,[24,[92]]],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],2],[[[63,[67,64]],[24,[14]],[5,[9]]],[[17,[[63,[67,64]],16]]]],0,0,0,[[-1,[24,[92]]],-2,[],[]],[[[374,[47]],[374,[11]],[24,[92]]],-1,[]],[[[374,[47]],[374,[11]],[24,[92]]],-1,[]],0,[341,236],[-1,-2,[],[]],[-1,-2,[],[]],[[341,65],236],[[341,236,65],236],[[341,66],236],[341,236],[341,236],[341,236],[46,-1,[]],[46,-1,[]],[46,1],[341,236],[-1,-1,[]],[341,236],[[],46],[-1,-2,[],[]],[341,236],[341,236],[341,236],[341,236],[341,236],[341,236],[341,236],[341,236],[341,236],[[341,[24,[66]],236],236],[[341,-1,-1,236],236,[[53,[14]]]],[341,236],[[341,14],236],[341,236],[[341,65],236],[[341,14],236],[[341,236,66,236],236],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],[341,236],[341,236],[[341,65],236],[341,236],0,[[-1,178,19],[[17,[15,16]]],[]],[-1,[[17,[14,16]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],413],[46,-1,[]],[46,-1,[]],[46,1],[[413,[24,[139]]],[[17,[133,16]]]],[-1,-1,[]],[[],46],[-1,-2,[],[]],[413,2],[[46,46],413],[[413,[41,[39,40]]],1],[413,1],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,[[[5,[35]],55],[[17,[1,16]]]],[[[108,[55]],55],[[17,[1,16]]]],0,[[-1,-2],[[17,[-1,16]]],[],[]],[15,[[17,[15,16]]]],0,[[15,19],15],[[15,19],15],[[15,14],15],[[15,14],15],0,[414,138],[414,[[41,[39,40]]]],[414,138],[-1,-2,[],[]],[-1,-2,[],[]],[414,139],[[],414],[46,-1,[]],[46,-1,[]],[46,1],[[414,46],1],[[414,50],[[17,[1,51]]]],[-1,-1,[]],[[],46],[-1,-2,[],[]],[414,46],[414,1],[[414,46],1],[414,1],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[414,[[24,[415]]]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,1],[46,1],[272,1],[46,1],[46,1],[273,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],46],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[270,46],[[17,[[24,[[44,[178,40]]]],16]]]],[[272,46],[[17,[[24,[[44,[178,40]]]],16]]]],[[271,46],[[17,[[24,[[44,[178,40]]]],16]]]],[[273,46],[[17,[[24,[[44,[178,40]]]],16]]]],[[[269,[[41,[234,40]]]],[143,[192,40]]],272],[[[269,[[41,[234,40]]]],[143,[192,40]]],273],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,15,[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[13]],16]]],[]],[-1,[[17,[[5,[61]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[61]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[[-1,14],[[17,[15,16]]],[]],[[-1,65],[[17,[[5,[64]],16]]],[]],[[-1,14],[[17,[15,16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[35]],16]]],[]],[-1,[[17,[[5,[61]],16]]],[]],0,[[-1,46,46],-1,99],[[-1,46,46],-1,99],[[46,[44,[2,40]]],1],0,[[[12,[[1,[-1,-2]]]],2,2],1,[151,71],[151,71,152]],[[[12,[-1]]],1,[]],[[[12,[-1]]],1,[]],[[[12,[15]],[12,[2]],2],[[17,[153,16]]]],[[14,[12,[15]],[12,[2]],2],[[17,[[5,[10]],16]]]],[15,[[17,[[41,[39,40]],16]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[404,14],236],[[404,236,2],236],[[404,236],236],[[404,236,2],236],[46,-1,[]],[46,-1,[]],[46,1],[[404,236],236],[404,236],[[404,14,46],236],[[404,236],236],[[404,14],[[17,[236,16]]]],[-1,-1,[]],[[404,55,2],236],[[],46],[-1,-2,[],[]],[404,236],[404,236],[[404,236,236,2],236],[[404,236,236,2],236],[[404,236,236,2,47],236],[[404,47,[24,[60]]],236],[[404,236],236],[[404,236,46],236],[[404,236,46],236],[[404,236],236],[[404,236,46],236],[[404,236],236],[[404,236],236],[[404,236],236],[[404,236],236],[[404,236],236],[[404,236],236],[[404,33,317,236],236],[[404,317],236],[[404,[24,[65]],[24,[66]],317,236],236],[[404,46],236],[404,236],[[404,317],236],[404,236],[404,236],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[380,11,[24,[46]],2,[24,[192]],46,46,[24,[11]],[24,[11]],11,[24,[286]],2,2],[[17,[[1,[192,46,46]],16]]]],[[380,11,[24,[46]],2,[24,[192]],46,46,[24,[11]],[24,[11]],11,[24,[286]],2,11,2],[[17,[[1,[192,46,46]],16]]]],[[[12,[11]]],2],0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[-1,15,[]],[[14,[44,[[41,[39,40]],40]],139],[[17,[15,16]]]],[15,[[17,[15,16]]]],[[15,15]],[[15,15]],[[15,-1],[],[7,79]],[[15,-1],[],[7,79]],[[15,15],[[17,[15,16]]]],[15,[[24,[46]]]],[15,[[24,[46]]]],[[-1,34],[[5,[35]]],[]],[-1,[[17,[[5,[35]],16]]],[]],0,[15,[[17,[[5,[20]],16]]]],[[15,46],[[41,[39,40]]]],[-1,138,[]],[-1,138,[]],[15,[[5,[4]]]],[328,[[5,[-1]]],27],[328,[[5,[-1]]],27],[15,328],[15,15],[15,15],[-1,[[17,[46,16]]],[]],[15,[[17,[46,16]]]],[15,[[17,[[5,[10]],16]]]],[[-1,15],[[17,[15,16]]],[]],[[-1,15],[[17,[15,16]]],[]],[[-1,15],[[17,[15,16]]],[]],[15,[[17,[[5,[13]],16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,33],[[17,[15,16]]],[]],[[15,33],[[17,[15,16]]]],[[15,33],[[17,[15,16]]]],[15,[[17,[156,16]]]],[15,[[17,[15,16]]]],[[-1,15],[[17,[15,16]]],[]],[[15,15],[[17,[15,16]]]],[[15,-1],[[17,[15,16]]],8],[-1,[[43,[[42,[[41,[39,40]]]]]]],[]],[-1,[[44,[[41,[39,40]],40]]],[]],[-1,[[44,[[41,[39,40]],40]]],[]],[15,[[44,[[41,[39,40]],40]]]],[15,15],[58,58],[15,15],[-1,[[143,[328,40]]],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[15,2],15],[[15,2],15],[[15,2],15],[[15,2],15],[15,[[17,[[63,[62,61]],16]]]],[15,[[17,[[63,[67,64]],16]]]],[15,[[17,[[63,[69,68]],16]]]],[[],15],[46,-1,[]],[46,-1,[]],[15],[46,-1,[]],[46,-1,[]],[46,-1,[]],[46,-1,[]],[[15,47,338],[[17,[15,16]]]],[[15,-1],[],[7,79]],[[15,-1],[],[7,79]],[[15,15]],[[15,15]],[46,1],[46,1],[46,1],[-1,15,[]],[-1,33,[]],[15,[[17,[[63,[70,64]],16]]]],[[58,58],2],[[15,15],2],[[-1,-2],[],[],[]],[[15,-1],[[17,[[5,[13]],16]]],166],[[15,14],[[17,[[5,[13]],16]]]],[[15,15],[[17,[[5,[13]],16]]]],[[-1,-2],[],[],[]],[[15,15],[[17,[[5,[13]],16]]]],[[15,-1],[],166],[[15,14]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[15,46],[15,[[17,[15,16]]]],[[15,15],[[17,[15,16]]]],[[15,56,46],[[17,[15,16]]]],[15,[[17,[[5,[31]],16]]]],[15,[[17,[[5,[32]],16]]]],[-1,[[82,[96]]],[]],[[15,146],[[17,[15,16]]]],[[-1,[5,[13]]],[[17,[15,16]]],[]],[[15,[5,[13]],2],[[17,[15,16]]]],[15,[[17,[15,16]]]],[[58,50],[[17,[1,51]]]],[[15,50],[[17,[1,51]]]],[[15,50],[[17,[1,51]]]],[15,66],[-1,-1,[]],[-1,-1,[]],[[[63,[67,64]]],15],[-1,-1,[]],[[[5,[-1]]],15,27],[[[63,[74,64]]],15],[[[63,[70,64]]],15],[[[63,[62,61]]],15],[[14,[12,[56]],2],[[17,[15,16]]]],[[14,[12,[56]],33,2],[[17,[15,16]]]],[[14,[41,[39,40]]],[[17,[15,16]]]],[[14,[44,[[41,[39,40]],40]],33],15],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[-1,15,49],[[14,[44,[85,40]]],15],[[14,[44,[80,40]]],15],[[14,[44,[89,40]]],15],[[14,[44,[60,40]]],15],[[14,[44,[55,40]]],15],[[14,[44,[59,40]]],15],[[14,[44,[11,40]]],15],[[14,[44,[87,40]]],15],[[14,[44,[47,40]]],15],[[14,[44,[91,40]]],15],[[14,46,33],15],[[-1,46],[[17,[56,16]]],[]],[15,46],[15,23],[[-1,46],[[24,[57]]],[]],[[-1,46],56,[]],[[-1,-2],[],[],[]],[[15,-1],[[17,[[5,[13]],16]]],166],[[15,14],[[17,[[5,[13]],16]]]],[[15,15],[[17,[[5,[13]],16]]]],[[-1,-2],[],[],[]],[[15,14],[[17,[[5,[13]],16]]]],[[15,15],[[17,[[5,[13]],16]]]],[[15,-1],[[17,[[5,[13]],16]]],166],[-1,2,[]],[[15,[24,[46]]],15],[15,[[17,[[5,[86]],16]]]],[15,[[17,[[5,[61]],16]]]],[15,[[17,[[5,[64]],16]]]],[15,[[17,[[5,[88]],16]]]],[15,[[17,[[5,[35]],16]]]],0,[15,[[17,[[5,[4]],16]]]],[[],46],[[],46],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,178],[-1,-2,[],[]],[-1,15,99],[15,15],[-1,2,[]],[15,[[17,[[5,[13]],16]]]],[15,[[17,[[5,[13]],16]]]],[15,[[17,[[5,[13]],16]]]],[15,[[17,[[5,[13]],16]]]],[-1,[[5,[13]]],[]],[-1,[[5,[13]]],[]],[[],2],[[],2],[15,58],[15,416],[-1,46,[]],[[-1,46],15,[]],[15,[[17,[[5,[4]],16]]]],[15,236],[[-1,-2],[],[],[]],[[15,14],[[17,[[5,[13]],16]]]],[[15,-1],[[17,[[5,[13]],16]]],166],[[15,15],[[17,[[5,[13]],16]]]],[[-1,-2],[],[],[]],[[15,15],[[17,[[5,[13]],16]]]],[[15,14],[[17,[[5,[13]],16]]]],[[15,-1],[[17,[[5,[13]],16]]],166],[15,[[24,[-1]]],79],[-1,15,[]],[-1,[[24,[80]]],[]],[15,15],[-1,[[24,[80]]],[]],[-1,15,[]],[15,[[24,[-1]]],79],[-1,15,[]],[[15,-1],[],[7,79]],[[15,-1],[],[7,79]],[[15,15]],[[15,15]],[-1,46,[]],[-1,[[17,[46,16]]],[]],[-1,14,[]],[[14,-1],15,[[53,[[12,[89]]]]]],[[14,-1],15,207],[[14,-1],15,[[53,[[12,[[24,[60]]]]]]]],[[14,-1],15,[[53,[[12,[15]]]]]],[[14,[81,[55]]],15],[[14,-1],15,[[53,[[12,[[24,[14]]]]]]]],[[14,-1],15,[[53,[[12,[66]]]]]],[[14,-1],15,[[53,[[12,[[24,[15]]]]]]]],[[14,-1],15,[[53,[[12,[91]]]]]],[[14,15],15],[[14,-1],15,[[53,[[12,[59]]]]]],[[14,-1],15,[[53,[[12,[87]]]]]],[[14,-1],15,[[53,[[12,[[24,[174]]]]]]]],[[14,-1],15,[[53,[[12,[55]]]]]],[[14,-1],15,[[53,[[12,[[24,[87]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[85]]]]]]]],[[14,[81,[47]]],15],[[14,-1],15,[[53,[[12,[47]]]]]],[[14,-1],15,[[53,[[12,[[12,[11]]]]]]]],[[14,-1],15,[[53,[[12,[2]]]]]],[[14,-1],15,[[53,[[12,[[24,[80]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[2]]]]]]]],[[14,[81,[60]]],15],[[14,-1],15,[[53,[[12,[173]]]]]],[[14,-1],15,[[53,[[12,[[24,[59]]]]]]]],[[14,-1],15,[[53,[[12,[85]]]]]],[[14,-1],15,[[53,[[12,[[24,[55]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[91]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[[44,[11,40]]]]]]]]]],[[14,-1],15,[[53,[[12,[56]]]]]],[[14,-1],15,[[53,[[12,[11]]]]]],[[14,-1],15,[[53,[[12,[[44,[11,40]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[66]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[[82,[[12,[11]]]]]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[[82,[14]]]]]]]]]],[[14,[81,[91]]],15],[[14,-1],15,[[53,[[12,[[24,[154]]]]]]]],[[14,-1],15,[[53,[[12,[155]]]]]],[[14,-1],15,[[53,[[12,[[24,[89]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[47]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[[12,[11]]]]]]]]]],[[14,-1],15,[[53,[[12,[[82,[14]]]]]]]],[[14,-1],15,[[53,[[12,[174]]]]]],[[14,-1],15,[[53,[[12,[[24,[11]]]]]]]],[[14,-1],15,[[53,[[12,[60]]]]]],[[14,-1],15,[[53,[[12,[154]]]]]],[[14,-1],15,[[53,[[12,[[82,[[12,[11]]]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[155]]]]]]]],[[14,-1],15,[[53,[[12,[[24,[173]]]]]]]],[[14,-1],15,[[53,[[12,[80]]]]]],[[14,-1],15,[[53,[[12,[14]]]]]],[[14,33],15],[[-1,46,46],15,[]],[[14,46],15],[416,24],[[-1,-2],[],[],[]],[[15,14],[[17,[[5,[13]],16]]]],[[15,-1],[[17,[[5,[13]],16]]],166],[[15,15],[[17,[[5,[13]],16]]]],[[-1,-2],[],[],[]],[[15,15],[[17,[[5,[13]],16]]]],[[15,-1],[],166],[[15,14]],[15,[[17,[417,16]]]],[-1,46,[]],0,[15,[[41,[73,40]]]],[15,15],[[-1,80,95],[[17,[15,16]]],[]],[-1,15,[]],[[15,-1],[],[7,79]],[[15,-1],[],[7,79]],[[15,15]],[[-1,14],1,[]],[[15,14],15],[[15,[12,[47]]],[[17,[15,16]]]],[-1,15,[]],[[-1,28,97],[[17,[15,16]]],[]],[[15,55],[[17,[15,16]]]],[[15,80,2,2,[24,[60]]],[[17,[15,16]]]],[[15,46,2,2,[24,[60]]],[[17,[15,16]]]],[[15,15],2],[[15,15],2],[[15,58],1],[[-1,47],15,[]],[-1,1,[]],[15,1],[[15,[24,[60]]],15],[416,[[1,[46,[24,[46]]]]]],[[-1,47,46],15,[]],[[15,2],15],[[-1,34],15,[]],[[-1,11],15,[]],[[15,46],[[17,[[82,[14]],16]]]],[[15,33],[[17,[15,16]]]],[15,[[17,[158,16]]]],[[15,-1],[],[7,79]],[[15,15]],[[15,15]],[[15,-1],[],[7,79]],[15,[[24,[-1]]],79],[15,15],[[15,[24,[46]]],15],[[-1,[5,[35]]],[[17,[15,16]]],[]],[[15,46],15],[[-1,[12,[55]]],[[17,[15,16]]],[]],[[-1,[12,[55]]],15,[]],[[15,[12,[55]],2],15],[[15,[5,[35]],2],[[17,[15,16]]]],[[-1,[5,[35]]],15,[]],[[15,[12,[55]]],15],[[15,[5,[35]],2],15],[[-1,46],15,[]],[15,[[17,[[63,[74,64]],16]]]],[[15,46],[[41,[39,40]]]],[[15,[24,[14]],2],[[17,[178,16]]]],[15,[[17,[15,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[15,[[82,[15]]]],[-1,66,[]],[[15,15],[[17,[15,16]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[1,[14,[44,[[41,[39,40]],40]]]]],[[17,[15,16]]]],[[[1,[14,[41,[39,40]]]]],[[17,[15,16]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,106,[]],[-1,106,[]],[15,[[17,[[5,[84]],16]]]],[15,[[17,[[5,[35]],16]]]],[15,[[17,[[5,[83]],16]]]],[15,[[17,[[5,[90]],16]]]],[-1,[[17,[15,16]]],[]],[15,[[17,[15,16]]]],[328,[[17,[[5,[-1]],16]]],27],0,[15,[[17,[[5,[9]],16]]]],[[-1,11],15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,14],15],[[15,[5,[13]],15],[[17,[15,16]]]],0,0,0,0,[[15,15,-1],15,30],[[-1,15],[],[]],[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],0,[[-1,15],[],[]],[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[-1,15],[],[]],[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[-1,15],[],[]],[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[-1,15],[],[]],[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],0,0,[[-1,15],[[17,[15,16]]],[]],[[[5,[-1]],15],[[17,[15,16]]],[]],[[-1,-2],[[17,[15,16]]],[],8],[[[5,[-1]],-2],[[17,[15,16]]],[],8],0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[338,338],[[-1,-2],1,[],[]],[[],338],[46,-1,[]],[46,-1,[]],0,[46,1],[[338,338],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[338,50],[[17,[1,51]]]],[-1,-1,[]],[[338,-1],1,147],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],0,0,[[-1,3],1,[]],[418,15],[418,15],[-1,-2,[],[]],[-1,-2,[],[]],[418,418],[[-1,-2],1,[],[]],[418,15],[46,-1,[]],[46,-1,[]],[46,1],[-1,-1,[]],[[],46],[-1,-2,[],[]],[15,418],[[418,[41,[39,40]]],1],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,106,[]],[-1,-2,[],[]],[[418,[41,[39,40]],-1],-2,28,[]]],"c":[3197,3270,3331,3334,3335,3336,3337,3338,3343,3346,3351,3352,3389],"p":[[15,"tuple"],[15,"bool"],[3,"Private",9032],[3,"ListType",1542],[3,"ChunkedArray",17],[8,"PolarsNumericType",1542],[8,"Num",9033],[8,"ToPrimitive",9034],[3,"Utf8Type",1542],[3,"BinaryType",1542],[15,"u8"],[15,"slice"],[3,"BooleanType",1542],[15,"str"],[3,"Series",8555],[4,"PolarsError",2778],[4,"Result",9035],[8,"NumOpsDispatchInner",8953],[4,"GroupsProxy",3161],[3,"FixedSizeListType",1542],[3,"ObjectType",1542],[8,"PolarsObject",1239],[3,"Settings",17],[4,"Option",9036],[8,"Iterator",9037],[3,"AmortizedListIter",9038],[8,"PolarsDataType",1542],[8,"Fn",9039],[8,"Copy",9040],[8,"FnMut",9039],[3,"Float32Type",1542],[3,"Float64Type",1542],[4,"DataType",1542],[3,"SortOptions",1331],[3,"UInt32Type",1542],[8,"PolarsIntegerType",1542],[3,"SortMultipleOptions",1331],[8,"NumOpsDispatchCheckedInner",8974],[8,"Array",9041],[3,"Global",9042],[3,"Box",9043],[3,"Iter",9044],[3,"Map",9045],[3,"Vec",9046],[8,"DoubleEndedIterator",9047],[15,"usize"],[15,"i64"],[3,"OffsetsBuffer",9048],[8,"IntoIterator",9049],[3,"Formatter",9050],[3,"Error",9050],[8,"IntoParallelIterator",9051],[8,"AsRef",9052],[8,"TrustedLen",9053],[15,"u32"],[4,"AnyValue",1542],[8,"PolarsObjectSafe",1239],[4,"IsSorted",8555],[15,"f32"],[15,"u64"],[3,"Int32Type",1542],[3,"DateType",1542],[3,"Logical",1542],[3,"Int64Type",1542],[4,"TimeUnit",1542],[3,"String",9054],[3,"DatetimeType",1542],[3,"Int128Type",1542],[3,"DecimalType",1542],[3,"DurationType",1542],[8,"Send",9040],[8,"Sync",9040],[8,"ExactSizeIterator",9055],[3,"TimeType",1542],[8,"PolarsFloatType",1542],[3,"Iter",9056],[3,"IterNames",9056],[4,"ChunkedArrayLayout",17],[8,"NumCast",9034],[15,"f64"],[3,"Range",9057],[4,"Cow",9058],[3,"UInt64Type",1542],[3,"UInt16Type",1542],[15,"u16"],[3,"Int16Type",1542],[15,"i16"],[3,"Int8Type",1542],[15,"i8"],[3,"UInt8Type",1542],[15,"i32"],[3,"Bitmap",9059],[8,"ParallelIterator",9051],[8,"IndexedParallelIterator",9051],[4,"QuantileInterpolOptions",3526],[3,"Field",1542],[3,"RollingOptionsFixedWindow",3526],[8,"PolarsOpsNumericType",9060],[8,"Sized",9040],[3,"OwnedRepr",9061],[15,"array"],[3,"Dim",9062],[3,"ArrayBase",9063],[3,"ViewRepr",9063],[4,"Either",9064],[3,"TypeId",9065],[3,"RandomState",9066],[3,"PrimitiveArray",9067],[3,"AnonymousListBuilder",810],[3,"AnonymousOwnedListBuilder",810],[3,"ListBooleanChunkedBuilder",810],[3,"ListPrimitiveChunkedBuilder",810],[3,"BinaryChunkedBuilder",810],[3,"BinaryChunkedBuilderCow",810],[3,"ListUtf8ChunkedBuilder",810],[3,"ListBinaryChunkedBuilder",810],[3,"Utf8ChunkedBuilderCow",810],[3,"BooleanChunkedBuilder",810],[3,"PrimitiveChunkedBuilder",810],[3,"Utf8ChunkedBuilder",810],[8,"Clone",9068],[8,"ListBuilderTrait",810],[3,"LazyCompact",9069],[3,"SmartString",9070],[3,"BooleanArray",9071],[3,"BoolIterNoNull",1111],[3,"Utf8Array",9072],[3,"Utf8IterNoNull",1111],[3,"BinaryArray",9073],[3,"BinaryIterNoNull",1111],[3,"ListArray",9074],[3,"ListIterNoNull",1111],[3,"FixedSizeListArray",9075],[3,"FixedSizeListIterNoNull",1111],[3,"StructIter",1111],[3,"SomeIterator",1111],[3,"ObjectArray",1239],[8,"Any",9065],[4,"ArrowDataType",1542],[8,"Debug",9050],[3,"BitmapIter",9076],[4,"ZipValidity",9077],[3,"Arc",3526],[3,"ObjectChunkedBuilder",1298],[8,"AnonymousObjectBuilder",1321],[4,"FillNullStrategy",1331],[8,"Hasher",9078],[8,"BinaryFnMut",1506],[8,"TernaryFnMut",1506],[8,"Error",9079],[8,"PartialOrd",9080],[8,"IsFloat",3526],[3,"RowsEncoded",9081],[3,"NaiveDateTime",9082],[3,"NaiveTime",9083],[3,"CategoricalChunked",1542],[4,"RevMapping",1542],[3,"StructChunked",1542],[3,"CategoricalChunkedBuilder",1542],[3,"StrHashLocal",1542],[3,"OwnedObject",1542],[3,"CategoricalType",1542],[4,"ArrowTimeUnit",1542],[8,"ArrayFromIter",1542],[8,"ArrayFromIterDtype",1542],[8,"NumericNative",1542],[8,"Into",9052],[3,"ArrowField",3526],[4,"PrimitiveType",9084],[4,"IntegerType",9085],[3,"CatIter",1542],[4,"Tz",9086],[3,"NaiveDate",9087],[3,"Duration",9088],[4,"Ordering",9080],[3,"Duration",3526],[4,"PhysicalType",9085],[3,"DataFrame",2878],[3,"StringCacheHolder",2756],[3,"ErrString",2778],[4,"ArrowError",2778],[3,"Error",9089],[4,"Error",9090],[4,"OutOfSpecKind",9091],[3,"TryReserveError",9092],[3,"Utf8Error",9093],[3,"FromUtf8Error",9054],[3,"Error",9094],[3,"Utf8Error",9095],[4,"Error",9096],[8,"Display",9050],[3,"Schema",3526],[8,"FnOnce",9039],[4,"NullStrategy",2878],[4,"UniqueKeepStrategy",2878],[3,"Global",9097],[3,"HashSet",9098],[3,"Row",3416],[3,"GroupBy",3161],[3,"DynamicGroupOptions",3526],[3,"RollingGroupOptions",3526],[3,"RangeFull",9057],[3,"RangeInclusive",9057],[3,"RangeFrom",9057],[3,"RangeTo",9057],[3,"RangeToInclusive",9057],[8,"IntoSeries",8555],[3,"RecordBatchIter",2878],[3,"PhysRecordBatchIter",2878],[3,"LazyFrame",3526],[8,"IntoVec",3526],[3,"MeltArgs",3136],[8,"RangeBounds",9057],[4,"IndexOrder",3526],[3,"Chunk",9099],[3,"StructArray",3526],[3,"GroupsIdx",3161],[4,"GroupByMethod",3161],[3,"SlicedGroups",3161],[3,"GroupsProxyParIter",3161],[8,"UnindexedConsumer",9100],[4,"GroupsIndicator",3161],[4,"AAggExpr",9101],[3,"Copied",9102],[3,"Zip",9103],[3,"GroupsProxyIter",3161],[8,"NativeType",9104],[4,"AnyValueBuffer",3416],[4,"AnyValueBufferTrusted",3416],[8,"Borrow",9105],[3,"JoinArgs",3526],[3,"ParquetReader",3526],[8,"PhysicalIoExpr",9106],[8,"MmapBytesReader",9107],[4,"JoinValidation",3526],[4,"Expr",3526],[3,"LazyGroupBy",3526],[8,"Allocator",9108],[3,"JoinBuilder",3526],[3,"LazyJsonLineReader",3526],[8,"AnonymousScan",3526],[3,"ScanArgsAnonymous",3526],[8,"FunctionOutputField",3526],[3,"SpecialEq",3526],[4,"VisitRecursion",9109],[4,"FunctionExpr",3526],[3,"ListNameSpace",3526],[3,"ArrayNameSpace",3526],[3,"IpcReader",3526],[3,"ArrowSchema",3526],[3,"IpcStreamReader",3526],[8,"Read",9110],[3,"BorrowedFd",9111],[8,"AsFd",9111],[8,"PartitionedAggregation",3526],[8,"AsRawFd",9112],[4,"AggExpr",3526],[8,"StatsEvaluator",9106],[3,"PhysicalIoHelper",3526],[19,"MaybeUninit",9113],[3,"CsvWriter",3526],[3,"BatchedWriter",9114],[8,"Write",9110],[3,"IpcWriter",3526],[3,"BatchedWriter",9115],[3,"BatchedParquetReader",3526],[3,"ParquetWriter",3526],[3,"BatchedWriter",9116],[3,"CsvReader",3526],[3,"BatchedCsvReaderMmap",8407],[3,"BatchedCsvReaderRead",8407],[3,"OwnedBatchedCsvReaderMmap",8407],[3,"OwnedBatchedCsvReader",8407],[3,"BinaryNameSpace",7818],[4,"Operator",3526],[3,"UserDefinedFunction",3526],[3,"HashMap",9117],[3,"CategoricalNameSpace",3526],[3,"RollingOptionsImpl",3526],[3,"Bounds",3526],[4,"ClosedWindow",3526],[4,"Label",3526],[4,"StartBy",3526],[3,"Window",3526],[4,"CsvEncoding",3526],[4,"NullValues",3526],[4,"QuoteStyle",3526],[3,"SerializeOptions",3526],[4,"InterpolationMethod",3526],[4,"IpcCompression",3526],[4,"JoinType",3526],[4,"ParallelStrategy",3526],[3,"GzipLevel",3526],[3,"AsOfOptions",3526],[3,"BrotliLevel",3526],[3,"ZstdLevel",3526],[4,"AsofStrategy",3526],[4,"ParquetCompression",3526],[3,"RollingVarParams",3526],[3,"RollingQuantileParams",3526],[4,"RankMethod",3526],[3,"RankOptions",3526],[3,"UnionArgs",3526],[3,"LazyCsvReader",3526],[3,"ScanArgsIpc",3526],[3,"ScanArgsParquet",3526],[4,"CategoricalOrdering",3526],[3,"When",3526],[3,"Then",3526],[3,"ChainedWhen",3526],[3,"ChainedThen",3526],[4,"Excluded",3526],[4,"BooleanFunction",3526],[3,"DatetimeArgs",3526],[3,"DurationArgs",3526],[3,"RollingCovOptions",3526],[3,"StrptimeOptions",3526],[3,"JoinOptions",3526],[4,"WindowType",3526],[4,"WindowMapping",3526],[3,"OptState",3526],[4,"LiteralValue",3526],[3,"ParquetWriteOptions",3526],[3,"IpcWriterOptions",3526],[3,"CsvWriterOptions",3526],[3,"AnonymousScanOptions",3526],[4,"LogicalPlan",3526],[8,"SeriesTrait",8555],[3,"CloudOptions",7999],[8,"Ord",9080],[3,"IpcStreamWriterOption",3526],[8,"SerWriter",3526],[3,"IpcWriterOption",3526],[8,"BinaryUdfOutputField",3526],[8,"SeriesBinaryUdf",3526],[8,"Default",9118],[3,"NoNull",3526],[4,"NullBehavior",8980],[3,"DotNode",9119],[3,"Weak",9120],[3,"DateLikeNameSpace",8306],[15,"char"],[8,"FromIterator",9049],[8,"Scalar",9121],[3,"ExecutionState",9122],[3,"AggregationContext",3526],[8,"Command",9123],[3,"PathBuf",9124],[3,"StructNameSpace",3526],[3,"IpcStreamWriter",3526],[3,"JsonWriter",3526],[3,"JsonReader",3526],[3,"JsonLineReader",3526],[3,"File",9125],[8,"SeriesUdf",3526],[8,"RenameAliasFn",3526],[8,"PhysicalExpr",3526],[8,"UdfSchema",3526],[3,"RollingOptions",7838],[4,"RangeFunction",9126],[4,"CategoricalFunction",9127],[4,"StringFunction",9128],[4,"TemporalFunction",9129],[4,"BinaryFunction",9130],[3,"CString",9131],[3,"CStr",9132],[15,"never"],[8,"ToOwned",9058],[3,"OsString",9133],[3,"OsStr",9133],[3,"Path",9124],[3,"MutableStructArray",9134],[3,"GrowableStruct",9135],[3,"Buffer",9136],[3,"FunctionOptions",9137],[4,"Context",9138],[3,"FieldsMapper",3526],[3,"FileMetaData",9139],[3,"BoundsIter",3526],[4,"ReaderBytes",9107],[8,"Hash",9078],[3,"StructValueIter",9140],[8,"Literal",3526],[3,"Null",3526],[3,"ExprMut",9141],[4,"RowGroupFetcher",9142],[3,"RowCount",9143],[4,"ALogicalPlan",9144],[3,"Arena",9145],[4,"AExpr",9101],[3,"Node",9145],[3,"Pin",9146],[3,"Request",9079],[3,"BorrowedCursor",9147],[8,"VarInt",9148],[3,"IoSliceMut",9110],[3,"AnonymousScanArgs",9149],[4,"SeekFrom",9110],[3,"LocalFutureObj",9150],[3,"SpawnError",9151],[8,"LocalSpawn",9151],[3,"FutureObj",9150],[8,"Spawn",9151],[3,"StringNameSpace",8498],[3,"AllocError",9108],[3,"RwLock",9152],[4,"JsonFormat",3526],[3,"BTreeMap",9153],[3,"IoSlice",9110],[4,"Pattern",7930],[3,"DatetimeInfer",7969],[4,"CloudType",7999],[3,"AnonymousBuilder",8352],[3,"MutableNullArray",8382],[3,"MutableBitmap",9154],[3,"SeriesIter",8555],[3,"NullChunked",9155],[3,"UnstableSeries",9008],[8,"ArrayArithmetics",802],[8,"ChunkedBuilder",810],[8,"NewChunkedArray",810],[8,"ChunkedCollectInferIterExt",1097],[8,"ChunkedCollectIterExt",1097],[8,"ChunkApply",1331],[8,"ChunkCompare",8555],[6,"FillNullLimit",1331],[8,"ChunkApplyKernel",1331],[8,"ChunkSort",1331],[8,"ChunkUnique",1331],[8,"ChunkCast",1331],[8,"ChunkCumAgg",1331],[8,"ChunkExplode",1331],[8,"ChunkFillNullValue",1331],[8,"ChunkFilter",1331],[8,"ChunkFull",1331],[8,"ChunkFullNull",1331],[8,"ChunkAnyValue",1331],[8,"IsFirstDistinct",1331],[8,"IsLastDistinct",1331],[8,"ChunkAgg",1331],[8,"ChunkQuantile",1331],[8,"ChunkExpandAtIndex",1331],[8,"Reinterpret",1331],[8,"ChunkReverse",1331],[8,"ChunkRollApply",1331],[8,"ChunkSet",1331],[8,"ChunkShift",1331],[8,"ChunkShiftFill",1331],[8,"ChunkVar",1331],[8,"ChunkTake",1331],[8,"ChunkTakeUnchecked",1331],[8,"ChunkBytes",1331],[8,"ChunkZip",1331],[4,"RevMappingBuilder",1542],[8,"InitHashMaps",1542],[8,"StaticArray",1542],[8,"AsRefDataType",1542],[3,"Nested",1542],[3,"Flat",1542],[8,"LogicalType",1542],[8,"ArrayCollectIterExt",1542],[8,"GetAnyValue",1542],[6,"PolarsResult",2778],[8,"IntoGroupsProxy",3161],[13,"Slice",7721],[8,"AggList",3400],[8,"TakeExtremum",3400],[8,"PhysicalAggExpr",3413],[6,"ArrowResult",3526],[6,"DynArgs",3526],[8,"LhsNumOps",8953],[8,"JoinDispatch",3526],[8,"FxHash",3526],[8,"DataFrameOps",3526],[8,"NumOpsDispatch",8953],[8,"ArgAgg",3526],[8,"AsBinary",3526],[8,"Utf8Methods",7838],[8,"AsList",3526],[8,"SeriesSealed",3526],[8,"MutableBitmapExtension",3526],[8,"AsUtf8",3526],[8,"Utf8NameSpaceImpl",3526],[8,"NumOpsDispatchChecked",8974],[8,"LazyFileListReader",3526],[8,"BinaryNameSpaceImpl",3526],[8,"CrossJoin",3526],[8,"ExprEvalExtension",3526],[8,"DateMethods",7838],[8,"DatetimeMethods",7838],[8,"TemporalMethods",8467],[8,"DurationMethods",7838],[6,"AllowedOptimizations",3526],[8,"ListNameSpaceExtension",3526],[8,"SerReader",3526],[8,"FromData",8300],[8,"FromDataUtf8",8300],[8,"FromDataBinary",8300],[8,"ListFromIter",3526],[8,"NamedFromOwned",3526],[8,"IndexOfSchema",3526],[8,"ValueSize",3526],[8,"PolarsTemporalGroupby",3526],[8,"PolarsArray",3526],[8,"SeriesJoin",3526],[8,"TimeMethods",7838],[8,"DataFrameJoinOps",3526],[8,"IntoListNameSpace",3526],[8,"SeriesMethods",3526],[8,"AsofJoin",3526],[8,"ListNameSpaceImpl",3526],[8,"IntoLazy",3526],[8,"ChunkAggSeries",3526],[8,"QuantileAggSeries",3526],[8,"PolarsMonthEnd",3526],[8,"PolarsMonthStart",3526],[8,"IndexToUsize",3526],[8,"NamedFrom",3526],[8,"SeriesRank",3526],[8,"SeriesOpsTime",7838],[8,"PolarsRound",3526],[8,"ChunkedSet",3526],[8,"SlicedArray",3526],[8,"VarAggSeries",3526],[8,"ToDummies",3526],[8,"PolarsTruncate",3526],[8,"PolarsUpsample",3526],[8,"VecHash",3526],[13,"Quantile",7661],[13,"Min",7661],[13,"Max",7661],[13,"Any",7668],[13,"All",7668],[13,"SortBy",7670],[13,"Filter",7670],[13,"Cast",7670],[13,"Sort",7670],[13,"Take",7670],[13,"RenameAlias",7670],[13,"Ternary",7670],[13,"Function",7670],[13,"Window",7670],[13,"AnonymousFunction",7670],[13,"Slice",7670],[13,"BinaryExpr",7670],[13,"Correlation",7703],[13,"Round",7703],[13,"Clip",7703],[13,"BackwardFill",7703],[13,"ForwardFill",7703],[13,"Random",7703],[13,"ValueCounts",7703],[13,"ShiftAndFill",7703],[13,"Cumcount",7703],[13,"Cumsum",7703],[13,"Cumprod",7703],[13,"Cummin",7703],[13,"Cummax",7703],[13,"FillNull",7703],[13,"Range",7723],[13,"Aggregate",7726],[13,"Sort",7726],[13,"ExtContext",7726],[13,"Cache",7726],[13,"DataFrameScan",7726],[13,"Error",7726],[13,"Projection",7726],[13,"HStack",7726],[13,"Scan",7726],[13,"MapFunction",7726],[13,"Selection",7726],[13,"Distinct",7726],[13,"Slice",7726],[13,"Sink",7726],[13,"Join",7726],[13,"Union",7726],[8,"ArrayNameSpace",7810],[8,"AsArray",7810],[8,"AsUtf8",7930],[8,"TryFromWithUnit",7969],[8,"StrpTimeParser",7969],[8,"ChunkGatherSkipNulls",8374],[8,"AsSeries",8467]],"b":[[32,"impl-Add%3CN%3E-for-%26ChunkedArray%3CT%3E"],[33,"impl-Add-for-%26ChunkedArray%3CT%3E"],[34,"impl-Add-for-ChunkedArray%3CUtf8Type%3E"],[35,"impl-Add%3CN%3E-for-ChunkedArray%3CT%3E"],[36,"impl-Add%3C%26%5Bu8%5D%3E-for-%26ChunkedArray%3CBinaryType%3E"],[37,"impl-Add-for-ChunkedArray%3CBinaryType%3E"],[38,"impl-Add-for-%26ChunkedArray%3CUtf8Type%3E"],[39,"impl-Add-for-%26ChunkedArray%3CBinaryType%3E"],[40,"impl-Add-for-ChunkedArray%3CT%3E"],[41,"impl-Add-for-%26ChunkedArray%3CBooleanType%3E"],[42,"impl-Add%3C%26str%3E-for-%26ChunkedArray%3CUtf8Type%3E"],[43,"impl-Add-for-ChunkedArray%3CBooleanType%3E"],[45,"impl-AggList-for-ChunkedArray%3CBooleanType%3E"],[46,"impl-AggList-for-ChunkedArray%3CFixedSizeListType%3E"],[47,"impl-AggList-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[48,"impl-AggList-for-ChunkedArray%3CT%3E"],[49,"impl-AggList-for-ChunkedArray%3CListType%3E"],[50,"impl-AggList-for-ChunkedArray%3CUtf8Type%3E"],[51,"impl-AggList-for-ChunkedArray%3CBinaryType%3E"],[55,"impl-ChunkedArray%3CListType%3E"],[56,"impl-ChunkedArray%3CFixedSizeListType%3E"],[57,"impl-ChunkedArray%3CListType%3E"],[58,"impl-ChunkedArray%3CFixedSizeListType%3E"],[62,"impl-ChunkApply%3C\'a,+%26T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[63,"impl-ChunkApply%3C\'a,+%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[64,"impl-ChunkApply%3C\'a,+Series%3E-for-ChunkedArray%3CListType%3E"],[65,"impl-ChunkApply%3C\'a,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[66,"impl-ChunkApply%3C\'a,+%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[67,"impl-ChunkApply%3C\'a,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[70,"impl-ChunkedArray%3CFloat32Type%3E"],[71,"impl-ChunkedArray%3CFloat64Type%3E"],[74,"impl-ChunkApplyKernel%3CPrimitiveArray%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[75,"impl-ChunkApplyKernel%3CBooleanArray%3E-for-ChunkedArray%3CBooleanType%3E"],[76,"impl-ChunkApplyKernel%3CUtf8Array%3Ci64%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[77,"impl-ChunkApplyKernel%3CBinaryArray%3Ci64%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[78,"impl-ChunkApplyKernel%3CUtf8Array%3Ci64%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[79,"impl-ChunkApplyKernel%3CPrimitiveArray%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[80,"impl-ChunkApplyKernel%3CBinaryArray%3Ci64%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[81,"impl-ChunkApplyKernel%3CBooleanArray%3E-for-ChunkedArray%3CBooleanType%3E"],[82,"impl-ChunkedArray%3CBinaryType%3E"],[83,"impl-ChunkedArray%3CT%3E"],[84,"impl-ChunkedArray%3CUtf8Type%3E"],[87,"impl-ChunkedArray%3CFixedSizeListType%3E"],[88,"impl-ChunkedArray%3CListType%3E"],[89,"impl-ChunkApply%3C\'a,+%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[90,"impl-ChunkApply%3C\'a,+%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[91,"impl-ChunkApply%3C\'a,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[92,"impl-ChunkApply%3C\'a,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[93,"impl-ChunkApply%3C\'a,+Series%3E-for-ChunkedArray%3CListType%3E"],[94,"impl-ChunkApply%3C\'a,+%26T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[95,"impl-ChunkApply%3C\'a,+%26T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[96,"impl-ChunkApply%3C\'a,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[97,"impl-ChunkApply%3C\'a,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[98,"impl-ChunkApply%3C\'a,+%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[99,"impl-ChunkApply%3C\'a,+Series%3E-for-ChunkedArray%3CListType%3E"],[100,"impl-ChunkApply%3C\'a,+%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[102,"impl-ChunkSort%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[103,"impl-ChunkSort%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[104,"impl-ChunkSort%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[105,"impl-ChunkSort%3CT%3E-for-ChunkedArray%3CT%3E"],[106,"impl-ChunkSort%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[107,"impl-ChunkSort%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[108,"impl-ChunkSort%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[109,"impl-ChunkSort%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[110,"impl-ChunkSort%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[111,"impl-ChunkSort%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[112,"impl-ChunkSort%3CT%3E-for-ChunkedArray%3CT%3E"],[113,"impl-ChunkSort%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[114,"impl-ChunkUnique%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[115,"impl-ChunkUnique%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[116,"impl-ChunkUnique%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[117,"impl-ChunkUnique%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[118,"impl-ChunkUnique%3CT%3E-for-ChunkedArray%3CT%3E"],[119,"impl-ChunkUnique%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[120,"impl-ChunkUnique%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[123,"impl-ChunkedArray%3CUtf8Type%3E"],[124,"impl-AsBinary-for-ChunkedArray%3CBinaryType%3E"],[128,"impl-AsUtf8-for-ChunkedArray%3CUtf8Type%3E"],[129,"impl-AsUtf8-for-ChunkedArray%3CUtf8Type%3E"],[130,"impl-BitAnd-for-ChunkedArray%3CBooleanType%3E"],[131,"impl-BitAnd-for-%26ChunkedArray%3CT%3E"],[132,"impl-BitAnd-for-%26ChunkedArray%3CBooleanType%3E"],[135,"impl-BitOr-for-%26ChunkedArray%3CT%3E"],[136,"impl-BitOr-for-%26ChunkedArray%3CBooleanType%3E"],[137,"impl-BitOr-for-ChunkedArray%3CBooleanType%3E"],[140,"impl-Flags-for-Settings"],[141,"impl-Settings"],[142,"impl-BitXor-for-%26ChunkedArray%3CT%3E"],[143,"impl-BitXor-for-%26ChunkedArray%3CBooleanType%3E"],[144,"impl-BitXor-for-ChunkedArray%3CBooleanType%3E"],[155,"impl-ChunkCast-for-ChunkedArray%3CT%3E"],[156,"impl-ChunkCast-for-ChunkedArray%3CBooleanType%3E"],[157,"impl-ChunkCast-for-ChunkedArray%3CBinaryType%3E"],[158,"impl-ChunkCast-for-ChunkedArray%3CFixedSizeListType%3E"],[159,"impl-ChunkCast-for-ChunkedArray%3CUtf8Type%3E"],[160,"impl-ChunkCast-for-ChunkedArray%3CListType%3E"],[162,"impl-ChunkCast-for-ChunkedArray%3CListType%3E"],[163,"impl-ChunkCast-for-ChunkedArray%3CBooleanType%3E"],[164,"impl-ChunkCast-for-ChunkedArray%3CFixedSizeListType%3E"],[165,"impl-ChunkCast-for-ChunkedArray%3CUtf8Type%3E"],[166,"impl-ChunkCast-for-ChunkedArray%3CT%3E"],[167,"impl-ChunkCast-for-ChunkedArray%3CBinaryType%3E"],[196,"impl-Div%3CN%3E-for-ChunkedArray%3CT%3E"],[197,"impl-Div-for-%26ChunkedArray%3CT%3E"],[198,"impl-Div%3CN%3E-for-%26ChunkedArray%3CT%3E"],[199,"impl-Div-for-ChunkedArray%3CT%3E"],[208,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[209,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[210,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[211,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[212,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[213,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[214,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[215,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[216,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[217,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[218,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[219,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[220,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[221,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[222,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[223,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[224,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[225,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[227,"impl-ChunkExplode-for-ChunkedArray%3CListType%3E"],[228,"impl-ChunkExplode-for-ChunkedArray%3CFixedSizeListType%3E"],[229,"impl-ChunkExplode-for-ChunkedArray%3CUtf8Type%3E"],[232,"impl-ChunkFillNullValue%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[233,"impl-ChunkFillNullValue%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[234,"impl-ChunkFillNullValue%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[235,"impl-ChunkFilter%3CFixedSizeListType%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[236,"impl-ChunkFilter%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[237,"impl-ChunkFilter%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[238,"impl-ChunkFilter%3CListType%3E-for-ChunkedArray%3CListType%3E"],[239,"impl-ChunkFilter%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[240,"impl-ChunkFilter%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[241,"impl-ChunkFilter%3CT%3E-for-ChunkedArray%3CT%3E"],[244,"impl-Debug-for-ChunkedArray%3CBinaryType%3E"],[245,"impl-Debug-for-ChunkedArray%3CListType%3E"],[246,"impl-Debug-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[247,"impl-Debug-for-ChunkedArray%3CUtf8Type%3E"],[248,"impl-Debug-for-ChunkedArray%3CT%3E"],[249,"impl-Debug-for-ChunkedArray%3CBooleanType%3E"],[250,"impl-Debug-for-ChunkedArray%3CFixedSizeListType%3E"],[251,"impl-Octal-for-Settings"],[252,"impl-Binary-for-Settings"],[253,"impl-UpperHex-for-Settings"],[254,"impl-Debug-for-Settings"],[255,"impl-LowerHex-for-Settings"],[263,"impl-Flags-for-Settings"],[264,"impl-Settings"],[270,"impl-FromIterator%3C(Vec%3C%3CT+as+PolarsNumericType%3E::Native%3E,+Option%3CBitmap%3E)%3E-for-ChunkedArray%3CT%3E"],[271,"impl-FromIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[272,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CListType%3E"],[273,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CBinaryType%3E"],[274,"impl-FromIterator%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[275,"impl-FromIterator%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[276,"impl-FromIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[277,"impl-FromIterator%3COption%3CSeries%3E%3E-for-ChunkedArray%3CListType%3E"],[278,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[279,"impl-FromIterator%3COption%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[280,"impl-FromIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[281,"impl-FromIterator%3COption%3CBox%3Cdyn+Array%3E%3E%3E-for-ChunkedArray%3CListType%3E"],[283,"impl-NewChunkedArray%3CObjectType%3CT%3E,+T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[284,"impl-NewChunkedArray%3CBooleanType,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[285,"impl-NewChunkedArray%3CBinaryType,+B%3E-for-ChunkedArray%3CBinaryType%3E"],[286,"impl-NewChunkedArray%3CUtf8Type,+S%3E-for-ChunkedArray%3CUtf8Type%3E"],[287,"impl-NewChunkedArray%3CT,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[288,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[289,"impl-FromTrustedLenIterator%3COption%3CSeries%3E%3E-for-ChunkedArray%3CListType%3E"],[290,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CBinaryType%3E"],[291,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CListType%3E"],[292,"impl-FromTrustedLenIterator%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[293,"impl-FromTrustedLenIterator%3COption%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[294,"impl-FromTrustedLenIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[295,"impl-FromTrustedLenIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[296,"impl-FromTrustedLenIterator%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[297,"impl-FromTrustedLenIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[298,"impl-NewChunkedArray%3CUtf8Type,+S%3E-for-ChunkedArray%3CUtf8Type%3E"],[299,"impl-NewChunkedArray%3CObjectType%3CT%3E,+T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[300,"impl-NewChunkedArray%3CBooleanType,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[301,"impl-NewChunkedArray%3CT,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[302,"impl-NewChunkedArray%3CBinaryType,+B%3E-for-ChunkedArray%3CBinaryType%3E"],[304,"impl-FromParallelIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[305,"impl-FromParallelIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[306,"impl-FromParallelIterator%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[307,"impl-FromParallelIterator%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[308,"impl-FromParallelIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[309,"impl-FromParallelIterator%3COption%3CSeries%3E%3E-for-ChunkedArray%3CListType%3E"],[310,"impl-NewChunkedArray%3CObjectType%3CT%3E,+T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[311,"impl-NewChunkedArray%3CUtf8Type,+S%3E-for-ChunkedArray%3CUtf8Type%3E"],[312,"impl-NewChunkedArray%3CBooleanType,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[313,"impl-NewChunkedArray%3CBinaryType,+B%3E-for-ChunkedArray%3CBinaryType%3E"],[314,"impl-NewChunkedArray%3CT,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[315,"impl-NewChunkedArray%3CBinaryType,+B%3E-for-ChunkedArray%3CBinaryType%3E"],[316,"impl-NewChunkedArray%3CObjectType%3CT%3E,+T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[317,"impl-NewChunkedArray%3CUtf8Type,+S%3E-for-ChunkedArray%3CUtf8Type%3E"],[318,"impl-NewChunkedArray%3CBooleanType,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[319,"impl-NewChunkedArray%3CT,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[320,"impl-FromIteratorReversed%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[321,"impl-FromIteratorReversed%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[323,"impl-ChunkFull%3CT%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[324,"impl-ChunkFull%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[325,"impl-ChunkFull%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[326,"impl-ChunkFull%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[327,"impl-ChunkFull%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[328,"impl-ChunkFull%3C%26Series%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[329,"impl-ChunkFull%3C%26Series%3E-for-ChunkedArray%3CListType%3E"],[330,"impl-ChunkFullNull-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[331,"impl-ChunkFullNull-for-ChunkedArray%3CBooleanType%3E"],[332,"impl-ChunkFullNull-for-ChunkedArray%3CT%3E"],[333,"impl-ChunkFullNull-for-ChunkedArray%3CFixedSizeListType%3E"],[334,"impl-ChunkFullNull-for-ChunkedArray%3CBinaryType%3E"],[335,"impl-ChunkFullNull-for-ChunkedArray%3CUtf8Type%3E"],[336,"impl-ChunkFullNull-for-ChunkedArray%3CListType%3E"],[337,"impl-ChunkedArray%3CListType%3E"],[338,"impl-ChunkedArray%3CFixedSizeListType%3E"],[339,"impl-ChunkGatherSkipNulls%3CChunkedArray%3CUInt32Type%3E%3E-for-ChunkedArray%3CT%3E"],[340,"impl-ChunkGatherSkipNulls%3C%5Bu32%5D%3E-for-ChunkedArray%3CT%3E"],[342,"impl-ChunkAnyValue-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[343,"impl-ChunkAnyValue-for-ChunkedArray%3CBooleanType%3E"],[344,"impl-ChunkAnyValue-for-ChunkedArray%3CUtf8Type%3E"],[345,"impl-ChunkAnyValue-for-ChunkedArray%3CListType%3E"],[346,"impl-ChunkAnyValue-for-ChunkedArray%3CBinaryType%3E"],[347,"impl-ChunkAnyValue-for-ChunkedArray%3CT%3E"],[348,"impl-ChunkAnyValue-for-ChunkedArray%3CFixedSizeListType%3E"],[349,"impl-ChunkAnyValue-for-ChunkedArray%3CBooleanType%3E"],[350,"impl-ChunkAnyValue-for-ChunkedArray%3CFixedSizeListType%3E"],[351,"impl-ChunkAnyValue-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[352,"impl-ChunkAnyValue-for-ChunkedArray%3CUtf8Type%3E"],[353,"impl-ChunkAnyValue-for-ChunkedArray%3CListType%3E"],[354,"impl-ChunkAnyValue-for-ChunkedArray%3CBinaryType%3E"],[355,"impl-ChunkAnyValue-for-ChunkedArray%3CT%3E"],[356,"impl-ChunkedArray%3CFixedSizeListType%3E"],[357,"impl-ChunkedArray%3CListType%3E"],[359,"impl-ChunkedArray%3CListType%3E"],[360,"impl-ChunkedArray%3CFixedSizeListType%3E"],[365,"impl-ValueSize-for-ChunkedArray%3CUtf8Type%3E"],[366,"impl-ValueSize-for-ChunkedArray%3CFixedSizeListType%3E"],[367,"impl-ValueSize-for-ChunkedArray%3CListType%3E"],[368,"impl-ValueSize-for-ChunkedArray%3CBinaryType%3E"],[369,"impl-IntoGroupsProxy-for-ChunkedArray%3CBinaryType%3E"],[370,"impl-IntoGroupsProxy-for-ChunkedArray%3CUtf8Type%3E"],[371,"impl-IntoGroupsProxy-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[372,"impl-IntoGroupsProxy-for-ChunkedArray%3CT%3E"],[373,"impl-IntoGroupsProxy-for-ChunkedArray%3CListType%3E"],[374,"impl-IntoGroupsProxy-for-ChunkedArray%3CBooleanType%3E"],[375,"impl-IntoGroupsProxy-for-ChunkedArray%3CFixedSizeListType%3E"],[377,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[378,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[379,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[380,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[381,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[382,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[383,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[384,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[385,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[386,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[387,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[388,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[389,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[390,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[391,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[392,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[393,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[394,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[401,"impl-ChunkedArray%3CFixedSizeListType%3E"],[402,"impl-ChunkedArray%3CListType%3E"],[414,"impl-IntoIterator-for-%26ChunkedArray%3CBooleanType%3E"],[415,"impl-IntoIterator-for-%26ChunkedArray%3CObjectType%3CT%3E%3E"],[416,"impl-IntoIterator-for-%26ChunkedArray%3CListType%3E"],[417,"impl-IntoIterator-for-%26ChunkedArray%3CUtf8Type%3E"],[418,"impl-IntoIterator-for-%26ChunkedArray%3CBinaryType%3E"],[419,"impl-IntoIterator-for-%26ChunkedArray%3CFixedSizeListType%3E"],[420,"impl-IntoIterator-for-%26ChunkedArray%3CT%3E"],[423,"impl-IntoSeries-for-ChunkedArray%3CT%3E"],[424,"impl-IntoSeries-for-ChunkedArray%3CInt128Type%3E"],[449,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[450,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[451,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[452,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[453,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[454,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[455,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[456,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[457,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[458,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[459,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[460,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[461,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[462,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[463,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[464,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[465,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[466,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[467,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[468,"impl-ChunkedArray%3CBooleanType%3E"],[469,"impl-ChunkAggSeries-for-ChunkedArray%3CBinaryType%3E"],[470,"impl-ChunkAggSeries-for-ChunkedArray%3CT%3E"],[471,"impl-ChunkAggSeries-for-ChunkedArray%3CListType%3E"],[472,"impl-ChunkAggSeries-for-ChunkedArray%3CBooleanType%3E"],[473,"impl-ChunkAggSeries-for-ChunkedArray%3CFixedSizeListType%3E"],[474,"impl-ChunkAggSeries-for-ChunkedArray%3CUtf8Type%3E"],[475,"impl-ChunkedArray%3CBooleanType%3E"],[476,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[477,"impl-ChunkQuantile%3Cf32%3E-for-ChunkedArray%3CFloat32Type%3E"],[478,"impl-ChunkQuantile%3Cf64%3E-for-ChunkedArray%3CT%3E"],[479,"impl-ChunkQuantile%3Cf64%3E-for-ChunkedArray%3CFloat64Type%3E"],[480,"impl-QuantileAggSeries-for-ChunkedArray%3CT%3E"],[481,"impl-QuantileAggSeries-for-ChunkedArray%3CFloat32Type%3E"],[482,"impl-QuantileAggSeries-for-ChunkedArray%3CFloat64Type%3E"],[483,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[484,"impl-ChunkedArray%3CBooleanType%3E"],[485,"impl-ChunkAggSeries-for-ChunkedArray%3CBinaryType%3E"],[486,"impl-ChunkAggSeries-for-ChunkedArray%3CBooleanType%3E"],[487,"impl-ChunkAggSeries-for-ChunkedArray%3CUtf8Type%3E"],[488,"impl-ChunkAggSeries-for-ChunkedArray%3CFixedSizeListType%3E"],[489,"impl-ChunkAggSeries-for-ChunkedArray%3CT%3E"],[490,"impl-ChunkAggSeries-for-ChunkedArray%3CListType%3E"],[491,"impl-ChunkedArray%3CBooleanType%3E"],[492,"impl-ChunkedArray%3CT%3E"],[493,"impl-Mul%3CN%3E-for-%26ChunkedArray%3CT%3E"],[494,"impl-Mul-for-ChunkedArray%3CT%3E"],[495,"impl-Mul%3CN%3E-for-ChunkedArray%3CT%3E"],[496,"impl-Mul-for-%26ChunkedArray%3CT%3E"],[498,"impl-ChunkUnique%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[499,"impl-ChunkUnique%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[500,"impl-ChunkUnique%3CT%3E-for-ChunkedArray%3CT%3E"],[502,"impl-NamedFrom%3CT,+%5BOption%3Cf32%3E%5D%3E-for-ChunkedArray%3CFloat32Type%3E"],[503,"impl-NamedFrom%3CRange%3Cu32%3E,+UInt32Type%3E-for-ChunkedArray%3CUInt32Type%3E"],[504,"impl-NamedFrom%3CT,+%5BOption%3C%26str%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[505,"impl-NamedFrom%3CT,+%5BOption%3Cf64%3E%5D%3E-for-ChunkedArray%3CFloat64Type%3E"],[506,"impl-NamedFrom%3CT,+%5BOption%3Cu32%3E%5D%3E-for-ChunkedArray%3CUInt32Type%3E"],[507,"impl-NamedFrom%3CT,+%5BOption%3C%26%5Bu8%5D%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[508,"impl-NamedFrom%3CT,+%5B%26%5Bu8%5D%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[509,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+%5Bu8%5D%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[510,"impl-NamedFrom%3CRange%3Cu64%3E,+UInt64Type%3E-for-ChunkedArray%3CUInt64Type%3E"],[511,"impl-NamedFrom%3CS,+%5BOption%3CT%3E%5D%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[512,"impl-NamedFrom%3CT,+%5Bu16%5D%3E-for-ChunkedArray%3CUInt16Type%3E"],[513,"impl-NamedFrom%3CT,+%5Bf32%5D%3E-for-ChunkedArray%3CFloat32Type%3E"],[514,"impl-NamedFrom%3C%26%5BT%5D,+%26%5BT%5D%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[515,"impl-NamedFrom%3CT,+%5BOption%3CVec%3Cu8%3E%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[516,"impl-NamedFrom%3CT,+%5Bi16%5D%3E-for-ChunkedArray%3CInt16Type%3E"],[517,"impl-NamedFrom%3CT,+%5BOption%3Ci8%3E%5D%3E-for-ChunkedArray%3CInt8Type%3E"],[518,"impl-NamedFrom%3CT,+%5Bf64%5D%3E-for-ChunkedArray%3CFloat64Type%3E"],[519,"impl-NamedFrom%3CT,+%5Bu64%5D%3E-for-ChunkedArray%3CUInt64Type%3E"],[520,"impl-NamedFrom%3CRange%3Ci64%3E,+Int64Type%3E-for-ChunkedArray%3CInt64Type%3E"],[521,"impl-NamedFrom%3CT,+%5BOption%3Cu8%3E%5D%3E-for-ChunkedArray%3CUInt8Type%3E"],[522,"impl-NamedFrom%3CT,+%5BOption%3Ci16%3E%5D%3E-for-ChunkedArray%3CInt16Type%3E"],[523,"impl-NamedFrom%3CT,+%5Bi8%5D%3E-for-ChunkedArray%3CInt8Type%3E"],[524,"impl-NamedFrom%3CT,+%5Bu32%5D%3E-for-ChunkedArray%3CUInt32Type%3E"],[525,"impl-NamedFrom%3CT,+%5BVec%3Cu8%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[526,"impl-NamedFrom%3CT,+%5BOption%3Cu16%3E%5D%3E-for-ChunkedArray%3CUInt16Type%3E"],[527,"impl-NamedFrom%3CT,+%5BOption%3CString%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[528,"impl-NamedFrom%3CT,+%5BOption%3Cu64%3E%5D%3E-for-ChunkedArray%3CUInt64Type%3E"],[529,"impl-NamedFrom%3CT,+%5BOption%3Cbool%3E%5D%3E-for-ChunkedArray%3CBooleanType%3E"],[530,"impl-NamedFrom%3CT,+%5Bi32%5D%3E-for-ChunkedArray%3CInt32Type%3E"],[531,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+str%3E%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[532,"impl-NamedFrom%3CT,+%5BOption%3Ci32%3E%5D%3E-for-ChunkedArray%3CInt32Type%3E"],[533,"impl-NamedFrom%3CRange%3Ci32%3E,+Int32Type%3E-for-ChunkedArray%3CInt32Type%3E"],[534,"impl-NamedFrom%3CT,+%5B%26str%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[535,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+str%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[536,"impl-NamedFrom%3CT,+%5Bbool%5D%3E-for-ChunkedArray%3CBooleanType%3E"],[537,"impl-NamedFrom%3CT,+%5BString%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[538,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+%5Bu8%5D%3E%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[539,"impl-NamedFrom%3CT,+%5Bu8%5D%3E-for-ChunkedArray%3CUInt8Type%3E"],[540,"impl-NamedFrom%3CT,+%5BOption%3Ci64%3E%5D%3E-for-ChunkedArray%3CInt64Type%3E"],[541,"impl-NamedFrom%3CT,+%5Bi64%5D%3E-for-ChunkedArray%3CInt64Type%3E"],[543,"impl-ChunkExpandAtIndex%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[544,"impl-ChunkExpandAtIndex%3CT%3E-for-ChunkedArray%3CT%3E"],[545,"impl-ChunkExpandAtIndex%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[546,"impl-ChunkExpandAtIndex%3CListType%3E-for-ChunkedArray%3CListType%3E"],[547,"impl-ChunkExpandAtIndex%3CFixedSizeListType%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[548,"impl-ChunkExpandAtIndex%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[549,"impl-ChunkExpandAtIndex%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[554,"impl-Not-for-ChunkedArray%3CBooleanType%3E"],[555,"impl-Not-for-%26ChunkedArray%3CBooleanType%3E"],[557,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[558,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[559,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[560,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[561,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[562,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[563,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[564,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[565,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[567,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[568,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[569,"impl-ChunkCompare%3C%26ChunkedArray%3CFixedSizeListType%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[570,"impl-ChunkCompare%3C%26ChunkedArray%3CBooleanType%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[571,"impl-ChunkCompare%3C%26ChunkedArray%3CListType%3E%3E-for-ChunkedArray%3CListType%3E"],[572,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[573,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[574,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[575,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[579,"impl-ChunkedArray%3CListType%3E"],[580,"impl-ChunkedArray%3CUtf8Type%3E"],[581,"impl-ChunkedArray%3CUtf8Type%3E"],[582,"impl-ChunkedArray%3CListType%3E"],[584,"impl-ChunkQuantile%3Cf32%3E-for-ChunkedArray%3CFloat32Type%3E"],[585,"impl-ChunkQuantile%3Cf64%3E-for-ChunkedArray%3CFloat64Type%3E"],[586,"impl-ChunkQuantile%3Cf64%3E-for-ChunkedArray%3CT%3E"],[587,"impl-QuantileAggSeries-for-ChunkedArray%3CT%3E"],[588,"impl-QuantileAggSeries-for-ChunkedArray%3CFloat64Type%3E"],[589,"impl-QuantileAggSeries-for-ChunkedArray%3CFloat32Type%3E"],[596,"impl-Reinterpret-for-ChunkedArray%3CListType%3E"],[597,"impl-Reinterpret-for-ChunkedArray%3CUInt16Type%3E"],[598,"impl-Reinterpret-for-ChunkedArray%3CInt64Type%3E"],[599,"impl-Reinterpret-for-ChunkedArray%3CUInt32Type%3E"],[600,"impl-Reinterpret-for-ChunkedArray%3CInt8Type%3E"],[601,"impl-Reinterpret-for-ChunkedArray%3CInt32Type%3E"],[602,"impl-Reinterpret-for-ChunkedArray%3CInt16Type%3E"],[603,"impl-Reinterpret-for-ChunkedArray%3CUInt64Type%3E"],[604,"impl-Reinterpret-for-ChunkedArray%3CFloat32Type%3E"],[605,"impl-Reinterpret-for-ChunkedArray%3CFloat64Type%3E"],[606,"impl-Reinterpret-for-ChunkedArray%3CUInt8Type%3E"],[607,"impl-Reinterpret-for-ChunkedArray%3CUInt64Type%3E"],[608,"impl-Reinterpret-for-ChunkedArray%3CFloat64Type%3E"],[609,"impl-Reinterpret-for-ChunkedArray%3CInt64Type%3E"],[610,"impl-Reinterpret-for-ChunkedArray%3CInt8Type%3E"],[611,"impl-Reinterpret-for-ChunkedArray%3CInt16Type%3E"],[612,"impl-Reinterpret-for-ChunkedArray%3CFloat32Type%3E"],[613,"impl-Reinterpret-for-ChunkedArray%3CUInt8Type%3E"],[614,"impl-Reinterpret-for-ChunkedArray%3CListType%3E"],[615,"impl-Reinterpret-for-ChunkedArray%3CInt32Type%3E"],[616,"impl-Reinterpret-for-ChunkedArray%3CUInt16Type%3E"],[617,"impl-Reinterpret-for-ChunkedArray%3CUInt32Type%3E"],[618,"impl-Rem-for-ChunkedArray%3CT%3E"],[619,"impl-Rem%3CN%3E-for-%26ChunkedArray%3CT%3E"],[620,"impl-Rem-for-%26ChunkedArray%3CT%3E"],[621,"impl-Rem%3CN%3E-for-ChunkedArray%3CT%3E"],[625,"impl-ChunkReverse-for-ChunkedArray%3CListType%3E"],[626,"impl-ChunkReverse-for-ChunkedArray%3CBinaryType%3E"],[627,"impl-ChunkReverse-for-ChunkedArray%3CBooleanType%3E"],[628,"impl-ChunkReverse-for-ChunkedArray%3CFixedSizeListType%3E"],[629,"impl-ChunkReverse-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[630,"impl-ChunkReverse-for-ChunkedArray%3CUtf8Type%3E"],[631,"impl-ChunkReverse-for-ChunkedArray%3CT%3E"],[636,"impl-ChunkSet%3C\'a,+bool,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[637,"impl-ChunkSet%3C\'a,+%3CT+as+PolarsNumericType%3E::Native,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[638,"impl-ChunkSet%3C\'a,+%26%5Bu8%5D,+Vec%3Cu8%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[639,"impl-ChunkSet%3C\'a,+%26str,+String%3E-for-ChunkedArray%3CUtf8Type%3E"],[641,"impl-ChunkSet%3C\'a,+bool,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[642,"impl-ChunkSet%3C\'a,+%3CT+as+PolarsNumericType%3E::Native,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[643,"impl-ChunkSet%3C\'a,+%26%5Bu8%5D,+Vec%3Cu8%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[644,"impl-ChunkSet%3C\'a,+%26str,+String%3E-for-ChunkedArray%3CUtf8Type%3E"],[645,"impl-ChunkedSet%3C%26str%3E-for-%26ChunkedArray%3CUtf8Type%3E"],[646,"impl-ChunkedSet%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[647,"impl-ChunkedSet%3Cbool%3E-for-%26ChunkedArray%3CBooleanType%3E"],[648,"impl-ChunkSet%3C\'a,+bool,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[649,"impl-ChunkSet%3C\'a,+%3CT+as+PolarsNumericType%3E::Native,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[650,"impl-ChunkSet%3C\'a,+%26%5Bu8%5D,+Vec%3Cu8%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[651,"impl-ChunkSet%3C\'a,+%26str,+String%3E-for-ChunkedArray%3CUtf8Type%3E"],[656,"impl-ChunkShift%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[657,"impl-ChunkShift%3CT%3E-for-ChunkedArray%3CT%3E"],[658,"impl-ChunkShift%3CFixedSizeListType%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[659,"impl-ChunkShift%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[660,"impl-ChunkShift%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[661,"impl-ChunkShift%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[662,"impl-ChunkShift%3CListType%3E-for-ChunkedArray%3CListType%3E"],[663,"impl-ChunkShiftFill%3CBooleanType,+Option%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[664,"impl-ChunkShiftFill%3CBinaryType,+Option%3C%26%5Bu8%5D%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[665,"impl-ChunkShiftFill%3CFixedSizeListType,+Option%3C%26Series%3E%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[666,"impl-ChunkShiftFill%3CListType,+Option%3C%26Series%3E%3E-for-ChunkedArray%3CListType%3E"],[667,"impl-ChunkShiftFill%3CUtf8Type,+Option%3C%26str%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[668,"impl-ChunkShiftFill%3CObjectType%3CT%3E,+Option%3CObjectType%3CT%3E%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[669,"impl-ChunkShiftFill%3CT,+Option%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[672,"impl-ChunkSort%3CT%3E-for-ChunkedArray%3CT%3E"],[673,"impl-ChunkSort%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[674,"impl-ChunkSort%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[675,"impl-ChunkSort%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[676,"impl-ChunkSort%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[677,"impl-ChunkSort%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[678,"impl-ChunkSort%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[679,"impl-ChunkSort%3CT%3E-for-ChunkedArray%3CT%3E"],[680,"impl-ChunkSort%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[681,"impl-ChunkSort%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[682,"impl-ChunkSort%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[683,"impl-ChunkSort%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[685,"impl-VarAggSeries-for-ChunkedArray%3CFloat32Type%3E"],[686,"impl-VarAggSeries-for-ChunkedArray%3CFloat64Type%3E"],[687,"impl-VarAggSeries-for-ChunkedArray%3CT%3E"],[688,"impl-Sub-for-ChunkedArray%3CT%3E"],[689,"impl-Sub%3CN%3E-for-ChunkedArray%3CT%3E"],[690,"impl-Sub%3CN%3E-for-%26ChunkedArray%3CT%3E"],[691,"impl-Sub-for-%26ChunkedArray%3CT%3E"],[695,"impl-ChunkedArray%3CBooleanType%3E"],[696,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[697,"impl-ChunkAggSeries-for-ChunkedArray%3CFixedSizeListType%3E"],[698,"impl-ChunkAggSeries-for-ChunkedArray%3CListType%3E"],[699,"impl-ChunkAggSeries-for-ChunkedArray%3CT%3E"],[700,"impl-ChunkAggSeries-for-ChunkedArray%3CUtf8Type%3E"],[701,"impl-ChunkAggSeries-for-ChunkedArray%3CBooleanType%3E"],[702,"impl-ChunkAggSeries-for-ChunkedArray%3CBinaryType%3E"],[705,"impl-ChunkTake%3CI%3E-for-ChunkedArray%3CT%3E"],[706,"impl-ChunkTake%3CChunkedArray%3CUInt32Type%3E%3E-for-ChunkedArray%3CT%3E"],[707,"impl-ChunkTakeUnchecked%3CI%3E-for-ChunkedArray%3CT%3E"],[708,"impl-ChunkTakeUnchecked%3CChunkedArray%3CUInt32Type%3E%3E-for-ChunkedArray%3CT%3E"],[713,"impl-ChunkedArray%3CListType%3E"],[714,"impl-ChunkedArray%3CT%3E"],[722,"impl-ChunkApply%3C\'a,+%26T%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[723,"impl-ChunkApply%3C\'a,+Series%3E-for-ChunkedArray%3CListType%3E"],[724,"impl-ChunkApply%3C\'a,+%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[725,"impl-ChunkApply%3C\'a,+%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[726,"impl-ChunkApply%3C\'a,+%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[727,"impl-ChunkApply%3C\'a,+bool%3E-for-ChunkedArray%3CBooleanType%3E"],[728,"impl-ChunkedArray%3CListType%3E"],[729,"impl-ChunkedArray%3CFixedSizeListType%3E"],[744,"impl-ChunkUnique%3CFloat64Type%3E-for-ChunkedArray%3CFloat64Type%3E"],[745,"impl-ChunkUnique%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[746,"impl-ChunkUnique%3CT%3E-for-ChunkedArray%3CT%3E"],[747,"impl-ChunkUnique%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[748,"impl-ChunkUnique%3CFloat32Type%3E-for-ChunkedArray%3CFloat32Type%3E"],[749,"impl-ChunkUnique%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[750,"impl-ChunkUnique%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[756,"impl-VarAggSeries-for-ChunkedArray%3CFloat64Type%3E"],[757,"impl-VarAggSeries-for-ChunkedArray%3CT%3E"],[758,"impl-VarAggSeries-for-ChunkedArray%3CFloat32Type%3E"],[759,"impl-VecHash-for-ChunkedArray%3CUInt32Type%3E"],[760,"impl-VecHash-for-ChunkedArray%3CUInt64Type%3E"],[761,"impl-VecHash-for-ChunkedArray%3CFloat64Type%3E"],[762,"impl-VecHash-for-ChunkedArray%3CInt16Type%3E"],[763,"impl-VecHash-for-ChunkedArray%3CUInt8Type%3E"],[764,"impl-VecHash-for-ChunkedArray%3CUtf8Type%3E"],[765,"impl-VecHash-for-ChunkedArray%3CInt64Type%3E"],[766,"impl-VecHash-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[767,"impl-VecHash-for-ChunkedArray%3CBooleanType%3E"],[768,"impl-VecHash-for-ChunkedArray%3CInt8Type%3E"],[769,"impl-VecHash-for-ChunkedArray%3CBinaryType%3E"],[770,"impl-VecHash-for-ChunkedArray%3CFloat32Type%3E"],[771,"impl-VecHash-for-ChunkedArray%3CUInt16Type%3E"],[772,"impl-VecHash-for-ChunkedArray%3CInt32Type%3E"],[773,"impl-VecHash-for-ChunkedArray%3CInt64Type%3E"],[774,"impl-VecHash-for-ChunkedArray%3CUInt64Type%3E"],[775,"impl-VecHash-for-ChunkedArray%3CUInt16Type%3E"],[776,"impl-VecHash-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[777,"impl-VecHash-for-ChunkedArray%3CInt32Type%3E"],[778,"impl-VecHash-for-ChunkedArray%3CInt8Type%3E"],[779,"impl-VecHash-for-ChunkedArray%3CInt16Type%3E"],[780,"impl-VecHash-for-ChunkedArray%3CFloat32Type%3E"],[781,"impl-VecHash-for-ChunkedArray%3CBooleanType%3E"],[782,"impl-VecHash-for-ChunkedArray%3CUtf8Type%3E"],[783,"impl-VecHash-for-ChunkedArray%3CUInt8Type%3E"],[784,"impl-VecHash-for-ChunkedArray%3CBinaryType%3E"],[785,"impl-VecHash-for-ChunkedArray%3CFloat64Type%3E"],[786,"impl-VecHash-for-ChunkedArray%3CUInt32Type%3E"],[795,"impl-ChunkZip%3CBinaryType%3E-for-ChunkedArray%3CBinaryType%3E"],[796,"impl-ChunkZip%3CUtf8Type%3E-for-ChunkedArray%3CUtf8Type%3E"],[797,"impl-ChunkZip%3CListType%3E-for-ChunkedArray%3CListType%3E"],[798,"impl-ChunkZip%3CObjectType%3CT%3E%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[799,"impl-ChunkZip%3CBooleanType%3E-for-ChunkedArray%3CBooleanType%3E"],[800,"impl-ChunkZip%3CT%3E-for-ChunkedArray%3CT%3E"],[801,"impl-ChunkZip%3CFixedSizeListType%3E-for-ChunkedArray%3CFixedSizeListType%3E"],[1244,"impl-ArrayFromIterDtype%3C%26T%3E-for-ObjectArray%3CT%3E"],[1245,"impl-ArrayFromIterDtype%3COption%3C%26T%3E%3E-for-ObjectArray%3CT%3E"],[1267,"impl-ObjectArray%3CT%3E"],[1268,"impl-StaticArray-for-ObjectArray%3CT%3E"],[1280,"impl-ArrayFromIterDtype%3C%26T%3E-for-ObjectArray%3CT%3E"],[1281,"impl-ArrayFromIterDtype%3COption%3C%26T%3E%3E-for-ObjectArray%3CT%3E"],[1289,"impl-StaticArray-for-ObjectArray%3CT%3E"],[1290,"impl-ObjectArray%3CT%3E"],[1292,"impl-StaticArray-for-ObjectArray%3CT%3E"],[1293,"impl-ObjectArray%3CT%3E"],[1295,"impl-Array-for-ObjectArray%3CT%3E"],[1296,"impl-ObjectArray%3CT%3E"],[1299,"impl-AnonymousObjectBuilder-for-ObjectChunkedBuilder%3CT%3E"],[1300,"impl-ObjectChunkedBuilder%3CT%3E"],[1302,"impl-AnonymousObjectBuilder-for-ObjectChunkedBuilder%3CT%3E"],[1303,"impl-ObjectChunkedBuilder%3CT%3E"],[1884,"impl-LogicalType-for-Logical%3CDatetimeType,+Int64Type%3E"],[1885,"impl-LogicalType-for-Logical%3CDateType,+Int32Type%3E"],[1886,"impl-LogicalType-for-Logical%3CTimeType,+Int64Type%3E"],[1887,"impl-LogicalType-for-Logical%3CDurationType,+Int64Type%3E"],[1888,"impl-LogicalType-for-Logical%3CDecimalType,+Int128Type%3E"],[1892,"impl-Logical%3CDatetimeType,+Int64Type%3E"],[1893,"impl-Logical%3CDurationType,+Int64Type%3E"],[2116,"impl-LogicalType-for-Logical%3CDecimalType,+Int128Type%3E"],[2117,"impl-LogicalType-for-Logical%3CDateType,+Int32Type%3E"],[2118,"impl-LogicalType-for-Logical%3CTimeType,+Int64Type%3E"],[2119,"impl-LogicalType-for-Logical%3CDurationType,+Int64Type%3E"],[2120,"impl-LogicalType-for-Logical%3CDatetimeType,+Int64Type%3E"],[2127,"impl-PartialEq-for-DataType"],[2128,"impl-PartialEq%3CArrowDataType%3E-for-DataType"],[2172,"impl-Debug-for-AnyValue%3C\'a%3E"],[2173,"impl-Display-for-AnyValue%3C\'_%3E"],[2174,"impl-Debug-for-DataType"],[2175,"impl-Display-for-DataType"],[2177,"impl-Debug-for-TimeUnit"],[2178,"impl-Display-for-TimeUnit"],[2184,"impl-From%3CChunkedArray%3CInt64Type%3E%3E-for-Logical%3CTimeType,+Int64Type%3E"],[2186,"impl-From%3CChunkedArray%3CInt32Type%3E%3E-for-Logical%3CDateType,+Int32Type%3E"],[2198,"impl-From%3CK%3E-for-AnyValue%3C\'_%3E"],[2199,"impl-From%3COption%3CT%3E%3E-for-AnyValue%3C\'a%3E"],[2201,"impl-From%3C%26ArrowDataType%3E-for-DataType"],[2202,"impl-From%3CAnyValue%3C\'_%3E%3E-for-DataType"],[2204,"impl-From%3C%26AnyValue%3C\'a%3E%3E-for-DataType"],[2206,"impl-From%3C%26AnyValue%3C\'a%3E%3E-for-Field"],[2207,"impl-From%3C%26ArrowField%3E-for-Field"],[2229,"impl-From%3CPrimitiveType%3E-for-ArrowDataType"],[2231,"impl-From%3CIntegerType%3E-for-ArrowDataType"],[2250,"impl-LogicalType-for-Logical%3CDatetimeType,+Int64Type%3E"],[2251,"impl-LogicalType-for-Logical%3CDateType,+Int32Type%3E"],[2252,"impl-LogicalType-for-Logical%3CTimeType,+Int64Type%3E"],[2253,"impl-LogicalType-for-Logical%3CDurationType,+Int64Type%3E"],[2254,"impl-LogicalType-for-Logical%3CDecimalType,+Int128Type%3E"],[2258,"impl-LogicalType-for-Logical%3CTimeType,+Int64Type%3E"],[2259,"impl-LogicalType-for-Logical%3CDurationType,+Int64Type%3E"],[2260,"impl-LogicalType-for-Logical%3CDateType,+Int32Type%3E"],[2261,"impl-LogicalType-for-Logical%3CDecimalType,+Int128Type%3E"],[2262,"impl-LogicalType-for-Logical%3CDatetimeType,+Int64Type%3E"],[2390,"impl-IntoSeries-for-Logical%3CDurationType,+Int64Type%3E"],[2391,"impl-IntoSeries-for-Logical%3CDateType,+Int32Type%3E"],[2392,"impl-IntoSeries-for-Logical%3CDecimalType,+Int128Type%3E"],[2393,"impl-IntoSeries-for-Logical%3CTimeType,+Int64Type%3E"],[2394,"impl-IntoSeries-for-Logical%3CDatetimeType,+Int64Type%3E"],[2428,"impl-PolarsMonthEnd-for-Logical%3CDateType,+Int32Type%3E"],[2429,"impl-PolarsMonthEnd-for-Logical%3CDatetimeType,+Int64Type%3E"],[2430,"impl-PolarsMonthStart-for-Logical%3CDatetimeType,+Int64Type%3E"],[2431,"impl-PolarsMonthStart-for-Logical%3CDateType,+Int32Type%3E"],[2453,"impl-NamedFrom%3CT,+%5BOption%3CNaiveTime%3E%5D%3E-for-Logical%3CTimeType,+Int64Type%3E"],[2454,"impl-NamedFrom%3CT,+%5BOption%3CNaiveDate%3E%5D%3E-for-Logical%3CDateType,+Int32Type%3E"],[2455,"impl-NamedFrom%3CT,+%5BDuration%5D%3E-for-Logical%3CDurationType,+Int64Type%3E"],[2456,"impl-NamedFrom%3CT,+%5BNaiveDateTime%5D%3E-for-Logical%3CDatetimeType,+Int64Type%3E"],[2457,"impl-NamedFrom%3CT,+%5BNaiveDate%5D%3E-for-Logical%3CDateType,+Int32Type%3E"],[2458,"impl-NamedFrom%3CT,+%5BOption%3CDuration%3E%5D%3E-for-Logical%3CDurationType,+Int64Type%3E"],[2459,"impl-NamedFrom%3CT,+%5BNaiveTime%5D%3E-for-Logical%3CTimeType,+Int64Type%3E"],[2460,"impl-NamedFrom%3CT,+%5BOption%3CNaiveDateTime%3E%5D%3E-for-Logical%3CDatetimeType,+Int64Type%3E"],[2467,"impl-DateMethods-for-Logical%3CDateType,+Int32Type%3E"],[2468,"impl-TimeMethods-for-Logical%3CTimeType,+Int64Type%3E"],[2486,"impl-PolarsRound-for-Logical%3CDatetimeType,+Int64Type%3E"],[2487,"impl-PolarsRound-for-Logical%3CDateType,+Int32Type%3E"],[2494,"impl-Logical%3CDatetimeType,+Int64Type%3E"],[2495,"impl-Logical%3CDurationType,+Int64Type%3E"],[2500,"impl-Logical%3CDatetimeType,+Int64Type%3E"],[2501,"impl-Logical%3CTimeType,+Int64Type%3E"],[2502,"impl-Logical%3CDateType,+Int32Type%3E"],[2515,"impl-Logical%3CDurationType,+Int64Type%3E"],[2516,"impl-Logical%3CDatetimeType,+Int64Type%3E"],[2557,"impl-Logical%3CTimeType,+Int64Type%3E"],[2558,"impl-Logical%3CDatetimeType,+Int64Type%3E"],[2559,"impl-Logical%3CDateType,+Int32Type%3E"],[2564,"impl-PolarsTruncate-for-Logical%3CDatetimeType,+Int64Type%3E"],[2565,"impl-PolarsTruncate-for-Logical%3CDateType,+Int32Type%3E"],[2822,"impl-Display-for-ErrString"],[2823,"impl-Debug-for-ErrString"],[2824,"impl-Debug-for-PolarsError"],[2825,"impl-Display-for-PolarsError"],[2826,"impl-Display-for-ArrowError"],[2827,"impl-Debug-for-ArrowError"],[2830,"impl-From%3CArrowError%3E-for-PolarsError"],[2832,"impl-From%3CError%3E-for-PolarsError"],[2833,"impl-From%3CError%3E-for-PolarsError"],[2834,"impl-From%3COutOfSpecKind%3E-for-ArrowError"],[2835,"impl-From%3CTryReserveError%3E-for-ArrowError"],[2836,"impl-From%3CUtf8Error%3E-for-ArrowError"],[2837,"impl-From%3CFromUtf8Error%3E-for-ArrowError"],[2838,"impl-From%3CError%3E-for-ArrowError"],[2839,"impl-From%3CUtf8Error%3E-for-ArrowError"],[2841,"impl-From%3CParquetError%3E-for-ArrowError"],[2842,"impl-From%3CError%3E-for-ArrowError"],[2965,"impl-Display-for-DataFrame"],[2966,"impl-Debug-for-DataFrame"],[2975,"impl-From%3CStructChunked%3E-for-DataFrame"],[2976,"impl-From%3C%26Schema%3E-for-DataFrame"],[3005,"impl-Index%3CRangeFull%3E-for-DataFrame"],[3006,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-DataFrame"],[3007,"impl-Index%3CRange%3Cusize%3E%3E-for-DataFrame"],[3008,"impl-Index%3Cusize%3E-for-DataFrame"],[3009,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-DataFrame"],[3010,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-DataFrame"],[3011,"impl-Index%3C%26str%3E-for-DataFrame"],[3012,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-DataFrame"],[3102,"impl-TryFrom%3C(Chunk%3CBox%3Cdyn+Array%3E%3E,+%26%5BArrowField%5D)%3E-for-DataFrame"],[3104,"impl-TryFrom%3CStructArray%3E-for-DataFrame"],[3275,"impl-Debug-for-GroupByMethod"],[3276,"impl-Display-for-GroupByMethod"],[3283,"impl-From%3CVec%3CVec%3C(u32,+Vec%3Cu32%3E)%3E%3E%3E-for-GroupsIdx"],[3284,"impl-From%3CVec%3C(Vec%3Cu32%3E,+Vec%3CVec%3Cu32%3E%3E)%3E%3E-for-GroupsIdx"],[3285,"impl-From%3CVec%3C(u32,+Vec%3Cu32%3E)%3E%3E-for-GroupsIdx"],[3319,"impl-IntoIterator-for-GroupsIdx"],[3320,"impl-IntoIterator-for-%26GroupsIdx"],[3322,"impl-IntoParallelIterator-for-GroupsIdx"],[3323,"impl-IntoParallelIterator-for-%26GroupsIdx"],[4452,"impl-Arc%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[4453,"impl-Arc%3CMaybeUninit%3CT%3E,+A%3E"],[4978,"impl-Default-for-SpecialEq%3CArc%3Cdyn+BinaryUdfOutputField%3E%3E"],[4979,"impl-Default-for-SpecialEq%3CArc%3Cdyn+FunctionOutputField%3E%3E"],[4980,"impl-Default-for-SpecialEq%3CArc%3Cdyn+SeriesBinaryUdf%3E%3E"],[5362,"impl-Expr"],[5363,"impl-PartialEq-for-Expr"],[5366,"impl-PartialEq-for-SpecialEq%3CSeries%3E"],[5367,"impl-PartialEq-for-SpecialEq%3CArc%3CT%3E%3E"],[5380,"impl-PartialEq%3Cdyn+Array%3E-for-Arc%3Cdyn+Array%3E"],[5381,"impl-PartialEq-for-Arc%3CT,+A%3E"],[5382,"impl-PartialEq%3Cdyn+Scalar%3E-for-Arc%3Cdyn+Scalar%3E"],[5385,"impl-PartialEq%3C%26dyn+Array%3E-for-StructArray"],[5386,"impl-PartialEq-for-StructArray"],[5656,"impl-Display-for-JoinType"],[5657,"impl-Debug-for-JoinType"],[5659,"impl-Debug-for-JoinValidation"],[5660,"impl-Display-for-JoinValidation"],[5672,"impl-Debug-for-Expr"],[5673,"impl-Display-for-Expr"],[5675,"impl-Display-for-Operator"],[5676,"impl-Debug-for-Operator"],[5678,"impl-Debug-for-BooleanFunction"],[5679,"impl-Display-for-BooleanFunction"],[5680,"impl-Display-for-FunctionExpr"],[5681,"impl-Debug-for-FunctionExpr"],[5697,"impl-Pointer-for-Arc%3CT,+A%3E"],[5698,"impl-Debug-for-Arc%3CT,+A%3E"],[5699,"impl-Display-for-Arc%3CT,+A%3E"],[5789,"impl-From%3Ci16%3E-for-Expr"],[5791,"impl-From%3Cbool%3E-for-Expr"],[5792,"impl-From%3Ci8%3E-for-Expr"],[5793,"impl-From%3Ci64%3E-for-Expr"],[5794,"impl-From%3Cf32%3E-for-Expr"],[5795,"impl-From%3Cu32%3E-for-Expr"],[5796,"impl-From%3Cu16%3E-for-Expr"],[5797,"impl-From%3CAggExpr%3E-for-Expr"],[5798,"impl-From%3Cu64%3E-for-Expr"],[5799,"impl-From%3Ci32%3E-for-Expr"],[5800,"impl-From%3Cf64%3E-for-Expr"],[5801,"impl-From%3C%26str%3E-for-Expr"],[5802,"impl-From%3Cu8%3E-for-Expr"],[5805,"impl-From%3CRangeFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5806,"impl-From%3CCategoricalFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5807,"impl-From%3CStringFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5809,"impl-From%3CTemporalFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5810,"impl-From%3CBinaryFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5811,"impl-From%3CBooleanFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5812,"impl-From%3CFunctionExpr%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[5814,"impl-From%3CCategoricalFunction%3E-for-FunctionExpr"],[5816,"impl-From%3CBinaryFunction%3E-for-FunctionExpr"],[5817,"impl-From%3CBooleanFunction%3E-for-FunctionExpr"],[5818,"impl-From%3CStringFunction%3E-for-FunctionExpr"],[5835,"impl-From%3CCString%3E-for-Arc%3CCStr%3E"],[5836,"impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E"],[5837,"impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E"],[5839,"impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E"],[5840,"impl-From%3C%26str%3E-for-Arc%3Cstr%3E"],[5842,"impl-From%3CT%3E-for-Arc%3CT%3E"],[5843,"impl-From%3CCow%3C\'a,+B%3E%3E-for-Arc%3CB%3E"],[5844,"impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E"],[5845,"impl-From%3COsString%3E-for-Arc%3COsStr%3E"],[5846,"impl-From%3C%26%5BT%5D%3E-for-Arc%3C%5BT%5D%3E"],[5847,"impl-From%3C%26Path%3E-for-Arc%3CPath%3E"],[5848,"impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E"],[5849,"impl-From%3CString%3E-for-Arc%3Cstr%3E"],[5850,"impl-From%3CArc%3Cstr%3E%3E-for-Arc%3C%5Bu8%5D%3E"],[5851,"impl-From%3CPathBuf%3E-for-Arc%3CPath%3E"],[5852,"impl-From%3CRollingOptionsImpl%3C\'a%3E%3E-for-RollingOptionsFixedWindow"],[5853,"impl-From%3CRollingOptions%3E-for-RollingOptionsFixedWindow"],[5856,"impl-From%3C%26%5BSeries%5D%3E-for-Schema"],[5857,"impl-From%3C%26Row%3C\'_%3E%3E-for-Schema"],[5860,"impl-From%3CMutableStructArray%3E-for-StructArray"],[5861,"impl-From%3CGrowableStruct%3C\'a%3E%3E-for-StructArray"],[5868,"impl-FromIterator%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"],[5869,"impl-FromIterator%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[5876,"impl-FromTrustedLenIterator%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[5877,"impl-FromTrustedLenIterator%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"],[5888,"impl-FromIteratorReversed%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[5889,"impl-FromIteratorReversed%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"],[6778,"impl-StructArray"],[6779,"impl-Array-for-StructArray"],[6787,"impl-StructArray"],[6788,"impl-Array-for-StructArray"],[7365,"impl-StructArray"],[7366,"impl-Array-for-StructArray"],[7645,"impl-Array-for-StructArray"],[7646,"impl-StructArray"],[7988,"impl-StrpTimeParser%3Ci32%3E-for-DatetimeInfer%3CInt32Type%3E"],[7989,"impl-StrpTimeParser%3Ci64%3E-for-DatetimeInfer%3CInt64Type%3E"],[7994,"impl-TryFromWithUnit%3CPattern%3E-for-DatetimeInfer%3CInt64Type%3E"],[7995,"impl-TryFromWithUnit%3CPattern%3E-for-DatetimeInfer%3CInt32Type%3E"],[8571,"impl-Add-for-Series"],[8572,"impl-Add-for-%26Series"],[8573,"impl-Add%3CT%3E-for-Series"],[8574,"impl-Add%3CT%3E-for-%26Series"],[8589,"impl-SeriesSealed-for-Series"],[8590,"impl-AsSeries-for-Series"],[8638,"impl-Div%3CT%3E-for-Series"],[8639,"impl-Div%3CT%3E-for-%26Series"],[8640,"impl-Div-for-Series"],[8641,"impl-Div-for-%26Series"],[8651,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8652,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8653,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8655,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8656,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8657,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8674,"impl-Display-for-Series"],[8675,"impl-Debug-for-Series"],[8679,"impl-From%3CLogical%3CDatetimeType,+Int64Type%3E%3E-for-Series"],[8681,"impl-From%3CChunkedArray%3CT%3E%3E-for-Series"],[8682,"impl-From%3CLogical%3CTimeType,+Int64Type%3E%3E-for-Series"],[8683,"impl-From%3CLogical%3CDurationType,+Int64Type%3E%3E-for-Series"],[8684,"impl-From%3CLogical%3CDateType,+Int32Type%3E%3E-for-Series"],[8689,"impl-FromIterator%3C%26bool%3E-for-Series"],[8690,"impl-FromIterator%3CString%3E-for-Series"],[8691,"impl-FromIterator%3Cu64%3E-for-Series"],[8692,"impl-FromIterator%3Cf64%3E-for-Series"],[8693,"impl-FromIterator%3Ci64%3E-for-Series"],[8694,"impl-FromIterator%3COption%3Cbool%3E%3E-for-Series"],[8695,"impl-FromIterator%3COption%3Cf64%3E%3E-for-Series"],[8696,"impl-FromIterator%3COption%3Cu8%3E%3E-for-Series"],[8697,"impl-FromIterator%3C%26i64%3E-for-Series"],[8698,"impl-FromIterator%3COption%3Cu32%3E%3E-for-Series"],[8699,"impl-FromIterator%3C%26i16%3E-for-Series"],[8700,"impl-FromIterator%3Ci32%3E-for-Series"],[8701,"impl-FromIterator%3COption%3Ci8%3E%3E-for-Series"],[8702,"impl-FromIterator%3C%26str%3E-for-Series"],[8703,"impl-FromIterator%3C%26f64%3E-for-Series"],[8704,"impl-FromIterator%3COption%3Ci32%3E%3E-for-Series"],[8705,"impl-FromIterator%3C%26u16%3E-for-Series"],[8706,"impl-FromIterator%3C%26u8%3E-for-Series"],[8707,"impl-FromIterator%3COption%3Ci64%3E%3E-for-Series"],[8708,"impl-FromIterator%3Cu32%3E-for-Series"],[8709,"impl-FromIterator%3COption%3Ci16%3E%3E-for-Series"],[8710,"impl-FromIterator%3C%26u64%3E-for-Series"],[8711,"impl-FromIterator%3C%26i32%3E-for-Series"],[8712,"impl-FromIterator%3COption%3Cu64%3E%3E-for-Series"],[8713,"impl-FromIterator%3C%26u32%3E-for-Series"],[8714,"impl-FromIterator%3C%26i8%3E-for-Series"],[8715,"impl-FromIterator%3Cf32%3E-for-Series"],[8716,"impl-FromIterator%3COption%3Cf32%3E%3E-for-Series"],[8717,"impl-FromIterator%3Cbool%3E-for-Series"],[8718,"impl-FromIterator%3Cu8%3E-for-Series"],[8719,"impl-FromIterator%3C%26f32%3E-for-Series"],[8720,"impl-FromIterator%3Ci16%3E-for-Series"],[8721,"impl-FromIterator%3Cu16%3E-for-Series"],[8722,"impl-FromIterator%3COption%3Cu16%3E%3E-for-Series"],[8723,"impl-FromIterator%3Ci8%3E-for-Series"],[8724,"impl-NamedFromOwned%3CVec%3Cu16%3E%3E-for-Series"],[8725,"impl-NamedFromOwned%3CVec%3Cf64%3E%3E-for-Series"],[8726,"impl-NamedFromOwned%3CVec%3Ci8%3E%3E-for-Series"],[8727,"impl-NamedFromOwned%3CVec%3Cu64%3E%3E-for-Series"],[8728,"impl-NamedFromOwned%3CVec%3Cu32%3E%3E-for-Series"],[8729,"impl-NamedFromOwned%3CVec%3Cf32%3E%3E-for-Series"],[8730,"impl-NamedFromOwned%3CVec%3Cu8%3E%3E-for-Series"],[8731,"impl-NamedFromOwned%3CVec%3Ci16%3E%3E-for-Series"],[8732,"impl-NamedFromOwned%3CVec%3Ci64%3E%3E-for-Series"],[8733,"impl-NamedFromOwned%3CVec%3Ci32%3E%3E-for-Series"],[8741,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8742,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8743,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8745,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8746,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8747,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8783,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8784,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8785,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8787,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8788,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8789,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8798,"impl-Mul%3CT%3E-for-Series"],[8799,"impl-Mul%3CT%3E-for-%26Series"],[8800,"impl-Mul-for-%26Series"],[8801,"impl-Mul-for-Series"],[8805,"impl-NamedFrom%3CT,+%5Bi8%5D%3E-for-Series"],[8806,"impl-NamedFrom%3CT,+T%3E-for-Series"],[8807,"impl-NamedFrom%3CT,+%5BOption%3Cu64%3E%5D%3E-for-Series"],[8808,"impl-NamedFrom%3CT,+ListType%3E-for-Series"],[8809,"impl-NamedFrom%3CRange%3Cu32%3E,+UInt32Type%3E-for-Series"],[8810,"impl-NamedFrom%3CT,+%5BOption%3C%26str%3E%5D%3E-for-Series"],[8811,"impl-NamedFrom%3CT,+%5BString%5D%3E-for-Series"],[8812,"impl-NamedFrom%3CT,+%5BOption%3CSeries%3E%5D%3E-for-Series"],[8813,"impl-NamedFrom%3CT,+%5Bi32%5D%3E-for-Series"],[8814,"impl-NamedFrom%3C%26Series,+str%3E-for-Series"],[8815,"impl-NamedFrom%3CT,+%5Bf32%5D%3E-for-Series"],[8816,"impl-NamedFrom%3CT,+%5Bi16%5D%3E-for-Series"],[8817,"impl-NamedFrom%3CT,+%5BOption%3CDuration%3E%5D%3E-for-Series"],[8818,"impl-NamedFrom%3CT,+%5Bu32%5D%3E-for-Series"],[8819,"impl-NamedFrom%3CT,+%5BOption%3Ci16%3E%5D%3E-for-Series"],[8820,"impl-NamedFrom%3CT,+%5BOption%3Cu16%3E%5D%3E-for-Series"],[8821,"impl-NamedFrom%3CRange%3Ci64%3E,+Int64Type%3E-for-Series"],[8822,"impl-NamedFrom%3CT,+%5Bi64%5D%3E-for-Series"],[8823,"impl-NamedFrom%3CT,+%5B%26%5Bu8%5D%5D%3E-for-Series"],[8824,"impl-NamedFrom%3CT,+%5Bbool%5D%3E-for-Series"],[8825,"impl-NamedFrom%3CT,+%5BOption%3Cf64%3E%5D%3E-for-Series"],[8826,"impl-NamedFrom%3CT,+%5BOption%3Cbool%3E%5D%3E-for-Series"],[8827,"impl-NamedFrom%3CRange%3Cu64%3E,+UInt64Type%3E-for-Series"],[8828,"impl-NamedFrom%3CT,+%5BNaiveDate%5D%3E-for-Series"],[8829,"impl-NamedFrom%3CT,+%5BOption%3Cf32%3E%5D%3E-for-Series"],[8830,"impl-NamedFrom%3CT,+%5Bu16%5D%3E-for-Series"],[8831,"impl-NamedFrom%3CT,+%5BOption%3Cu32%3E%5D%3E-for-Series"],[8832,"impl-NamedFrom%3CT,+%5BOption%3Ci32%3E%5D%3E-for-Series"],[8833,"impl-NamedFrom%3CT,+%5BOption%3CVec%3Cu8%3E%3E%5D%3E-for-Series"],[8834,"impl-NamedFrom%3CT,+%5BAnyValue%3C\'a%3E%5D%3E-for-Series"],[8835,"impl-NamedFrom%3CT,+%5Bu8%5D%3E-for-Series"],[8836,"impl-NamedFrom%3CT,+%5BVec%3Cu8%3E%5D%3E-for-Series"],[8837,"impl-NamedFrom%3CT,+%5BOption%3CString%3E%5D%3E-for-Series"],[8838,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+%5Bu8%5D%3E%3E%5D%3E-for-Series"],[8839,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+str%3E%3E%5D%3E-for-Series"],[8840,"impl-NamedFrom%3CRange%3Ci32%3E,+Int32Type%3E-for-Series"],[8841,"impl-NamedFrom%3CT,+%5BOption%3CNaiveDateTime%3E%5D%3E-for-Series"],[8842,"impl-NamedFrom%3CT,+%5BNaiveTime%5D%3E-for-Series"],[8843,"impl-NamedFrom%3CT,+%5BOption%3Ci8%3E%5D%3E-for-Series"],[8844,"impl-NamedFrom%3CT,+%5BOption%3Ci64%3E%5D%3E-for-Series"],[8845,"impl-NamedFrom%3CT,+%5BOption%3C%26%5Bu8%5D%3E%5D%3E-for-Series"],[8846,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+str%3E%5D%3E-for-Series"],[8847,"impl-NamedFrom%3CT,+%5BDuration%5D%3E-for-Series"],[8848,"impl-NamedFrom%3CT,+%5BOption%3Cu8%3E%5D%3E-for-Series"],[8849,"impl-NamedFrom%3CT,+%5Bu64%5D%3E-for-Series"],[8850,"impl-NamedFrom%3CT,+%5BNaiveDateTime%5D%3E-for-Series"],[8851,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+%5Bu8%5D%3E%5D%3E-for-Series"],[8852,"impl-NamedFrom%3CT,+%5BOption%3CNaiveTime%3E%5D%3E-for-Series"],[8853,"impl-NamedFrom%3CT,+%5BOption%3CNaiveDate%3E%5D%3E-for-Series"],[8854,"impl-NamedFrom%3CT,+%5Bf64%5D%3E-for-Series"],[8855,"impl-NamedFrom%3CT,+%5B%26str%5D%3E-for-Series"],[8861,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8862,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8863,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8865,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[8866,"impl-ChunkCompare%3CRhs%3E-for-Series"],[8867,"impl-ChunkCompare%3C%26str%3E-for-Series"],[8875,"impl-Rem%3CT%3E-for-Series"],[8876,"impl-Rem%3CT%3E-for-%26Series"],[8877,"impl-Rem-for-%26Series"],[8901,"impl-Sub%3CT%3E-for-Series"],[8902,"impl-Sub-for-%26Series"],[8903,"impl-Sub-for-Series"],[8904,"impl-Sub%3CT%3E-for-%26Series"],[8929,"impl-TryFrom%3C(%26str,+Vec%3CBox%3Cdyn+Array%3E%3E)%3E-for-Series"],[8930,"impl-TryFrom%3C(%26str,+Box%3Cdyn+Array%3E)%3E-for-Series"]]},\
"polars_arrow":{"doc":"","t":"AAAAAAAAAAAAAAAAAIIIAALLLLKLAAAAIIIKKKDLLLLLLLLLLLLLLLLLMDLLFLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLIKKIILLFFFFFFFFFFFFFAFIKKAAFAAAAAFAFFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFFFFFGILLLLLENNNNNDNNNNNNNNNNNNEGNNNNNLLLLLLALLLLLLLLLLOLLLLLLLLLLLLLLLLLLFLLLLLLFOOOOFLFLLLLLLLLLLLLLHHHCCDLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLGGIFKIIKAAAAFAAAAAAAAAAAIKFFFFFDLMMLLLLLLMLLLLLLLLFFFFLLMLLMLLLLFFFFFFFFGNDDNLLLLLLLLLLFFMLLLLLLLLLLLLMLLAAMLLLLLLLLNNNDDNDNEDIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLDDDDDIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLKLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLFFFFFFAAFFFFFFFFFFFFFFFFCGGGCCCCIKKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIILLKLLKKKKLLKIIIDLLLLLLLLFFLLLLLKLLLLLLLLLLLL","n":["array","bit_util","bitmap","compute","conversion","data_types","error","export","floats","index","is_valid","kernels","prelude","slice","time_zone","trusted_len","utils","ListFromIter","PolarsArray","ValueSize","default_arrays","fixed_size_list","from_iter_binary_trusted_len","from_iter_bool_trusted_len","from_iter_primitive_trusted_len","from_iter_utf8_trusted_len","get_values_size","has_validity","list","null","slice","utf8","FromData","FromDataBinary","FromDataUtf8","from_data_default","from_data_unchecked_default","from_data_unchecked_default","AnonymousBuilder","borrow","borrow_mut","default","deref","deref_mut","drop","finish","from","init","into","is_empty","new","push","push_null","try_from","try_into","type_id","width","AnonymousBuilder","borrow","borrow_mut","convert_inner_type","deref","deref_mut","drop","finish","from","init","into","is_empty","new","offsets","push","push_empty","push_multiple","push_null","push_opt","take_offsets","try_from","try_into","type_id","MutableNullArray","as_any","as_box","as_mut_any","borrow","borrow_mut","data_type","default","deref","deref_mut","drop","extend_nulls","fmt","from","init","into","len","push_null","reserve","shrink_to_fit","try_from","try_into","type_id","validity","SlicedArray","slice_typed","slice_typed_unchecked","BinaryFromIter","Utf8FromIter","from_values_iter","from_values_iter","ceil","find_first_true_false_no_null","find_first_true_false_null","first_set_bit","first_unset_bit","get_bit","get_bit_raw","round_upto_multiple_of_64","round_upto_power_of_2","set_bit","set_bit_raw","unset_bit","unset_bit_raw","mutable","unary_mut","MutableBitmapExtension","as_slice_mut","set_bit_unchecked","arithmetics","arity","binary_mut","bitwise","cast","decimal","take","tile","unary_mut","decimal","add","add_scalar","div","div_scalar","div_scalar_swapped","mul","mul_scalar","sub","sub_scalar","sub_scalar_swapped","bitand","bitor","bitxor","cast","cast_utf8_to_decimal","infer_scale","bitmap","take_binary_iter_unchecked","take_binary_opt_iter_unchecked","take_binary_unchecked","take_bool_iter_unchecked","take_bool_opt_iter_unchecked","take_no_null_binary_iter_unchecked","take_no_null_binary_opt_iter_unchecked","take_no_null_bool_iter_unchecked","take_no_null_bool_opt_iter_unchecked","take_no_null_primitive_iter_unchecked","take_no_null_primitive_opt_iter_unchecked","take_no_null_primitive_unchecked","take_no_null_utf8_iter_unchecked","take_no_null_utf8_opt_iter_unchecked","take_primitive_iter_unchecked","take_primitive_opt_iter_unchecked","take_primitive_unchecked","take_unchecked","take_utf8_iter_unchecked","take_utf8_opt_iter_unchecked","take_utf8_unchecked","take_value_indices_from_list","take_bitmap_unchecked","tile_primitive","chunk_to_struct","primitive_to_vec","ArrayRef","IsFloat","get_values_size","is_f32","is_f64","is_float","is_nan","ArrowError","ArrowError","ColumnNotFound","ComputeError","Duplicate","Err","ErrString","External","ExternalFormat","InvalidArgumentError","InvalidOperation","Io","Io","NoData","NotYetImplemented","Ok","OutOfBounds","OutOfSpec","Overflow","PolarsError","PolarsResult","SchemaFieldNotFound","SchemaMismatch","ShapeMismatch","StringCacheMismatch","StructFieldNotFound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","constants","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","feature_gated","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_external_error","get_warning_function","init","init","init","into","into","into","map_err","polars_bail","polars_ensure","polars_err","polars_warn","set_warning_function","source","to_compute_err","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wrap_msg","FALSE","LENGTH_LIMIT_MSG","TRUE","arrow","hashbrown","OrdFloat","__clone_box","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","drop","eq","equivalent","equivalent","f32_to_ordablef32","f64_to_ordablef64","from","init","into","partial_cmp","to_f32","to_f64","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_into","type_id","IdxArr","IdxSize","IndexToUsize","indexes_to_usizes","negative_to_usize","ArrowArray","IsValid","is_valid_unchecked","agg_mean","atan2","comparison","concatenate","convert_to_naive_local","ewm","float","list","list_bytes_iter","pow","rolling","set","sort_partition","sorted_join","string","take_agg","SimdCastPl","cast_custom","sum_as_f64","atan2","fixed_size_list_eq","fixed_size_list_neq","concatenate_owned_unchecked","EWMOptions","__clone_box","adjust","alpha","and_adjust","and_com","and_half_life","and_ignore_nulls","and_min_periods","and_span","bias","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","ewm_cov","ewm_mean","ewm_std","ewm_var","fmt","from","ignore_nulls","init","into","min_periods","to_owned","try_from","try_into","type_id","is_finite","is_infinite","is_nan","is_not_nan","array_to_unit_list","sublist_get","numeric_list_bytes_iter","pow","DynArgs","None","RollingQuantileParams","RollingVarParams","Some","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compare_fn_nan_max","compare_fn_nan_min","ddof","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","interpol","into","into","no_nulls","nulls","prob","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Higher","Linear","Lower","MaxWindow","MeanWindow","Midpoint","MinWindow","Nearest","QuantileInterpolOptions","QuantileWindow","RollingAggWindowNoNulls","SumWindow","VarWindow","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","fmt","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","into","into","into","into","into","into","into","new","new","new","new","new","new","new","rolling_max","rolling_mean","rolling_min","rolling_quantile","rolling_sum","rolling_var","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update","MaxWindow","MeanWindow","MinMaxWindow","MinWindow","QuantileWindow","RollingAggWindowNulls","SortedMinMax","SumWindow","VarWindow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_reverse_sorted_max_nulls","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","new","new","new","new","new","new","new","new","rolling_max","rolling_mean","rolling_min","rolling_quantile","rolling_sum","rolling_var","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update","update","set_at_idx_no_null","set_at_nulls","set_with_mask","create_clean_partitions","partition_to_groups","partition_to_groups_amortized","inner","left","join","join","string_len_bytes","string_len_chars","online_variance","take_agg_no_null_primitive_iter_unchecked","take_agg_primitive_iter_unchecked","take_agg_primitive_iter_unchecked_count_nulls","take_agg_utf8_iter_unchecked","take_agg_utf8_iter_unchecked_no_null","take_max_bool_iter_unchecked_no_nulls","take_max_bool_iter_unchecked_nulls","take_min_bool_iter_unchecked_no_nulls","take_min_bool_iter_unchecked_nulls","take_var_no_null_primitive_iter_unchecked","take_var_nulls_primitive_iter_unchecked","DynArgs","LargeBinaryArray","LargeListArray","LargeStringArray","MutableBitmapExtension","QuantileInterpolOptions","RollingQuantileParams","RollingVarParams","ExtremaNanAware","max_value_nan_aware","min_value_nan_aware","Africa__Abidjan","Africa__Accra","Africa__Addis_Ababa","Africa__Algiers","Africa__Asmara","Africa__Asmera","Africa__Bamako","Africa__Bangui","Africa__Banjul","Africa__Bissau","Africa__Blantyre","Africa__Brazzaville","Africa__Bujumbura","Africa__Cairo","Africa__Casablanca","Africa__Ceuta","Africa__Conakry","Africa__Dakar","Africa__Dar_es_Salaam","Africa__Djibouti","Africa__Douala","Africa__El_Aaiun","Africa__Freetown","Africa__Gaborone","Africa__Harare","Africa__Johannesburg","Africa__Juba","Africa__Kampala","Africa__Khartoum","Africa__Kigali","Africa__Kinshasa","Africa__Lagos","Africa__Libreville","Africa__Lome","Africa__Luanda","Africa__Lubumbashi","Africa__Lusaka","Africa__Malabo","Africa__Maputo","Africa__Maseru","Africa__Mbabane","Africa__Mogadishu","Africa__Monrovia","Africa__Nairobi","Africa__Ndjamena","Africa__Niamey","Africa__Nouakchott","Africa__Ouagadougou","Africa__PortoNovo","Africa__Sao_Tome","Africa__Timbuktu","Africa__Tripoli","Africa__Tunis","Africa__Windhoek","America__Adak","America__Anchorage","America__Anguilla","America__Antigua","America__Araguaina","America__Argentina__Buenos_Aires","America__Argentina__Catamarca","America__Argentina__ComodRivadavia","America__Argentina__Cordoba","America__Argentina__Jujuy","America__Argentina__La_Rioja","America__Argentina__Mendoza","America__Argentina__Rio_Gallegos","America__Argentina__Salta","America__Argentina__San_Juan","America__Argentina__San_Luis","America__Argentina__Tucuman","America__Argentina__Ushuaia","America__Aruba","America__Asuncion","America__Atikokan","America__Atka","America__Bahia","America__Bahia_Banderas","America__Barbados","America__Belem","America__Belize","America__BlancSablon","America__Boa_Vista","America__Bogota","America__Boise","America__Buenos_Aires","America__Cambridge_Bay","America__Campo_Grande","America__Cancun","America__Caracas","America__Catamarca","America__Cayenne","America__Cayman","America__Chicago","America__Chihuahua","America__Ciudad_Juarez","America__Coral_Harbour","America__Cordoba","America__Costa_Rica","America__Creston","America__Cuiaba","America__Curacao","America__Danmarkshavn","America__Dawson","America__Dawson_Creek","America__Denver","America__Detroit","America__Dominica","America__Edmonton","America__Eirunepe","America__El_Salvador","America__Ensenada","America__Fort_Nelson","America__Fort_Wayne","America__Fortaleza","America__Glace_Bay","America__Godthab","America__Goose_Bay","America__Grand_Turk","America__Grenada","America__Guadeloupe","America__Guatemala","America__Guayaquil","America__Guyana","America__Halifax","America__Havana","America__Hermosillo","America__Indiana__Indianapolis","America__Indiana__Knox","America__Indiana__Marengo","America__Indiana__Petersburg","America__Indiana__Tell_City","America__Indiana__Vevay","America__Indiana__Vincennes","America__Indiana__Winamac","America__Indianapolis","America__Inuvik","America__Iqaluit","America__Jamaica","America__Jujuy","America__Juneau","America__Kentucky__Louisville","America__Kentucky__Monticello","America__Knox_IN","America__Kralendijk","America__La_Paz","America__Lima","America__Los_Angeles","America__Louisville","America__Lower_Princes","America__Maceio","America__Managua","America__Manaus","America__Marigot","America__Martinique","America__Matamoros","America__Mazatlan","America__Mendoza","America__Menominee","America__Merida","America__Metlakatla","America__Mexico_City","America__Miquelon","America__Moncton","America__Monterrey","America__Montevideo","America__Montreal","America__Montserrat","America__Nassau","America__New_York","America__Nipigon","America__Nome","America__Noronha","America__North_Dakota__Beulah","America__North_Dakota__Center","America__North_Dakota__New_Salem","America__Nuuk","America__Ojinaga","America__Panama","America__Pangnirtung","America__Paramaribo","America__Phoenix","America__Port_of_Spain","America__PortauPrince","America__Porto_Acre","America__Porto_Velho","America__Puerto_Rico","America__Punta_Arenas","America__Rainy_River","America__Rankin_Inlet","America__Recife","America__Regina","America__Resolute","America__Rio_Branco","America__Rosario","America__Santa_Isabel","America__Santarem","America__Santiago","America__Santo_Domingo","America__Sao_Paulo","America__Scoresbysund","America__Shiprock","America__Sitka","America__St_Barthelemy","America__St_Johns","America__St_Kitts","America__St_Lucia","America__St_Thomas","America__St_Vincent","America__Swift_Current","America__Tegucigalpa","America__Thule","America__Thunder_Bay","America__Tijuana","America__Toronto","America__Tortola","America__Vancouver","America__Virgin","America__Whitehorse","America__Winnipeg","America__Yakutat","America__Yellowknife","Antarctica__Casey","Antarctica__Davis","Antarctica__DumontDUrville","Antarctica__Macquarie","Antarctica__Mawson","Antarctica__McMurdo","Antarctica__Palmer","Antarctica__Rothera","Antarctica__South_Pole","Antarctica__Syowa","Antarctica__Troll","Antarctica__Vostok","Arctic__Longyearbyen","Asia__Aden","Asia__Almaty","Asia__Amman","Asia__Anadyr","Asia__Aqtau","Asia__Aqtobe","Asia__Ashgabat","Asia__Ashkhabad","Asia__Atyrau","Asia__Baghdad","Asia__Bahrain","Asia__Baku","Asia__Bangkok","Asia__Barnaul","Asia__Beirut","Asia__Bishkek","Asia__Brunei","Asia__Calcutta","Asia__Chita","Asia__Choibalsan","Asia__Chongqing","Asia__Chungking","Asia__Colombo","Asia__Dacca","Asia__Damascus","Asia__Dhaka","Asia__Dili","Asia__Dubai","Asia__Dushanbe","Asia__Famagusta","Asia__Gaza","Asia__Harbin","Asia__Hebron","Asia__Ho_Chi_Minh","Asia__Hong_Kong","Asia__Hovd","Asia__Irkutsk","Asia__Istanbul","Asia__Jakarta","Asia__Jayapura","Asia__Jerusalem","Asia__Kabul","Asia__Kamchatka","Asia__Karachi","Asia__Kashgar","Asia__Kathmandu","Asia__Katmandu","Asia__Khandyga","Asia__Kolkata","Asia__Krasnoyarsk","Asia__Kuala_Lumpur","Asia__Kuching","Asia__Kuwait","Asia__Macao","Asia__Macau","Asia__Magadan","Asia__Makassar","Asia__Manila","Asia__Muscat","Asia__Nicosia","Asia__Novokuznetsk","Asia__Novosibirsk","Asia__Omsk","Asia__Oral","Asia__Phnom_Penh","Asia__Pontianak","Asia__Pyongyang","Asia__Qatar","Asia__Qostanay","Asia__Qyzylorda","Asia__Rangoon","Asia__Riyadh","Asia__Saigon","Asia__Sakhalin","Asia__Samarkand","Asia__Seoul","Asia__Shanghai","Asia__Singapore","Asia__Srednekolymsk","Asia__Taipei","Asia__Tashkent","Asia__Tbilisi","Asia__Tehran","Asia__Tel_Aviv","Asia__Thimbu","Asia__Thimphu","Asia__Tokyo","Asia__Tomsk","Asia__Ujung_Pandang","Asia__Ulaanbaatar","Asia__Ulan_Bator","Asia__Urumqi","Asia__UstNera","Asia__Vientiane","Asia__Vladivostok","Asia__Yakutsk","Asia__Yangon","Asia__Yekaterinburg","Asia__Yerevan","Atlantic__Azores","Atlantic__Bermuda","Atlantic__Canary","Atlantic__Cape_Verde","Atlantic__Faeroe","Atlantic__Faroe","Atlantic__Jan_Mayen","Atlantic__Madeira","Atlantic__Reykjavik","Atlantic__South_Georgia","Atlantic__St_Helena","Atlantic__Stanley","Australia__ACT","Australia__Adelaide","Australia__Brisbane","Australia__Broken_Hill","Australia__Canberra","Australia__Currie","Australia__Darwin","Australia__Eucla","Australia__Hobart","Australia__LHI","Australia__Lindeman","Australia__Lord_Howe","Australia__Melbourne","Australia__NSW","Australia__North","Australia__Perth","Australia__Queensland","Australia__South","Australia__Sydney","Australia__Tasmania","Australia__Victoria","Australia__West","Australia__Yancowinna","Brazil__Acre","Brazil__DeNoronha","Brazil__East","Brazil__West","CET","CST6CDT","Canada__Atlantic","Canada__Central","Canada__Eastern","Canada__Mountain","Canada__Newfoundland","Canada__Pacific","Canada__Saskatchewan","Canada__Yukon","Chile__Continental","Chile__EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc__GMT","Etc__GMT0","Etc__GMTMinus0","Etc__GMTMinus1","Etc__GMTMinus10","Etc__GMTMinus11","Etc__GMTMinus12","Etc__GMTMinus13","Etc__GMTMinus14","Etc__GMTMinus2","Etc__GMTMinus3","Etc__GMTMinus4","Etc__GMTMinus5","Etc__GMTMinus6","Etc__GMTMinus7","Etc__GMTMinus8","Etc__GMTMinus9","Etc__GMTPlus0","Etc__GMTPlus1","Etc__GMTPlus10","Etc__GMTPlus11","Etc__GMTPlus12","Etc__GMTPlus2","Etc__GMTPlus3","Etc__GMTPlus4","Etc__GMTPlus5","Etc__GMTPlus6","Etc__GMTPlus7","Etc__GMTPlus8","Etc__GMTPlus9","Etc__Greenwich","Etc__UCT","Etc__UTC","Etc__Universal","Etc__Zulu","Europe__Amsterdam","Europe__Andorra","Europe__Astrakhan","Europe__Athens","Europe__Belfast","Europe__Belgrade","Europe__Berlin","Europe__Bratislava","Europe__Brussels","Europe__Bucharest","Europe__Budapest","Europe__Busingen","Europe__Chisinau","Europe__Copenhagen","Europe__Dublin","Europe__Gibraltar","Europe__Guernsey","Europe__Helsinki","Europe__Isle_of_Man","Europe__Istanbul","Europe__Jersey","Europe__Kaliningrad","Europe__Kiev","Europe__Kirov","Europe__Kyiv","Europe__Lisbon","Europe__Ljubljana","Europe__London","Europe__Luxembourg","Europe__Madrid","Europe__Malta","Europe__Mariehamn","Europe__Minsk","Europe__Monaco","Europe__Moscow","Europe__Nicosia","Europe__Oslo","Europe__Paris","Europe__Podgorica","Europe__Prague","Europe__Riga","Europe__Rome","Europe__Samara","Europe__San_Marino","Europe__Sarajevo","Europe__Saratov","Europe__Simferopol","Europe__Skopje","Europe__Sofia","Europe__Stockholm","Europe__Tallinn","Europe__Tirane","Europe__Tiraspol","Europe__Ulyanovsk","Europe__Uzhgorod","Europe__Vaduz","Europe__Vatican","Europe__Vienna","Europe__Vilnius","Europe__Volgograd","Europe__Warsaw","Europe__Zagreb","Europe__Zaporozhye","Europe__Zurich","GB","GBEire","GMT","GMT0","GMTMinus0","GMTPlus0","Greenwich","HST","Hongkong","Iceland","Indian__Antananarivo","Indian__Chagos","Indian__Christmas","Indian__Cocos","Indian__Comoro","Indian__Kerguelen","Indian__Mahe","Indian__Maldives","Indian__Mauritius","Indian__Mayotte","Indian__Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico__BajaNorte","Mexico__BajaSur","Mexico__General","NZ","NZCHAT","Navajo","PRC","PST8PDT","Pacific__Apia","Pacific__Auckland","Pacific__Bougainville","Pacific__Chatham","Pacific__Chuuk","Pacific__Easter","Pacific__Efate","Pacific__Enderbury","Pacific__Fakaofo","Pacific__Fiji","Pacific__Funafuti","Pacific__Galapagos","Pacific__Gambier","Pacific__Guadalcanal","Pacific__Guam","Pacific__Honolulu","Pacific__Johnston","Pacific__Kanton","Pacific__Kiritimati","Pacific__Kosrae","Pacific__Kwajalein","Pacific__Majuro","Pacific__Marquesas","Pacific__Midway","Pacific__Nauru","Pacific__Niue","Pacific__Norfolk","Pacific__Noumea","Pacific__Pago_Pago","Pacific__Palau","Pacific__Pitcairn","Pacific__Pohnpei","Pacific__Ponape","Pacific__Port_Moresby","Pacific__Rarotonga","Pacific__Saipan","Pacific__Samoa","Pacific__Tahiti","Pacific__Tarawa","Pacific__Tongatapu","Pacific__Truk","Pacific__Wake","Pacific__Wallis","Pacific__Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","Tz","UCT","US__Alaska","US__Aleutian","US__Arizona","US__Central","US__EastIndiana","US__Eastern","US__Hawaii","US__IndianaStarke","US__Michigan","US__Mountain","US__Pacific","US__Samoa","UTC","Universal","WET","WSU","Zulu","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","from_offset","from_str","hash","init","into","name","offset_from_local_date","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_datetime","to_owned","to_string","try_from","try_into","type_id","FromIteratorReversed","TrustedLen","TrustedLenPush","extend_trusted_len","extend_trusted_len","extend_trusted_len_unchecked","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_rev","from_trusted_len_iter_unchecked","push_unchecked","try_extend_trusted_len_unchecked","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","CustomIterTools","CustomIterToolsSized","FromTrustedLenIterator","TrustMyLength","__clone_box","all_equal","borrow","borrow_mut","clone","clone_into","collect_reversed","collect_trusted","combine_validities_and","combine_validities_or","deref","deref_mut","drop","fold_options","from","from_iter_trusted_length","init","into","into_iter","new","next","next_back","size_hint","to_owned","trust_my_length","try_from","try_into","type_id"],"q":[[0,"polars_arrow"],[17,"polars_arrow::array"],[32,"polars_arrow::array::default_arrays"],[38,"polars_arrow::array::fixed_size_list"],[57,"polars_arrow::array::list"],[80,"polars_arrow::array::null"],[104,"polars_arrow::array::slice"],[107,"polars_arrow::array::utf8"],[111,"polars_arrow::bit_util"],[124,"polars_arrow::bitmap"],[126,"polars_arrow::bitmap::mutable"],[129,"polars_arrow::compute"],[138,"polars_arrow::compute::arithmetics"],[139,"polars_arrow::compute::arithmetics::decimal"],[149,"polars_arrow::compute::bitwise"],[152,"polars_arrow::compute::cast"],[154,"polars_arrow::compute::decimal"],[155,"polars_arrow::compute::take"],[178,"polars_arrow::compute::take::bitmap"],[179,"polars_arrow::compute::tile"],[180,"polars_arrow::conversion"],[182,"polars_arrow::data_types"],[189,"polars_arrow::error"],[279,"polars_arrow::error::constants"],[282,"polars_arrow::export"],[284,"polars_arrow::floats"],[319,"polars_arrow::index"],[324,"polars_arrow::is_valid"],[327,"polars_arrow::kernels"],[343,"polars_arrow::kernels::agg_mean"],[346,"polars_arrow::kernels::atan2"],[347,"polars_arrow::kernels::comparison"],[349,"polars_arrow::kernels::concatenate"],[350,"polars_arrow::kernels::ewm"],[383,"polars_arrow::kernels::float"],[387,"polars_arrow::kernels::list"],[389,"polars_arrow::kernels::list_bytes_iter"],[390,"polars_arrow::kernels::pow"],[391,"polars_arrow::kernels::rolling"],[435,"polars_arrow::kernels::rolling::no_nulls"],[557,"polars_arrow::kernels::rolling::nulls"],[685,"polars_arrow::kernels::set"],[688,"polars_arrow::kernels::sort_partition"],[691,"polars_arrow::kernels::sorted_join"],[693,"polars_arrow::kernels::sorted_join::inner"],[694,"polars_arrow::kernels::sorted_join::left"],[695,"polars_arrow::kernels::string"],[697,"polars_arrow::kernels::take_agg"],[709,"polars_arrow::prelude"],[717,"polars_arrow::slice"],[720,"polars_arrow::time_zone"],[1346,"polars_arrow::trusted_len"],[1361,"polars_arrow::utils"],[1393,"nano_arrow::array::list"],[1394,"core::iter::traits::collect"],[1395,"nano_arrow::datatypes"],[1396,"nano_arrow::bitmap::immutable"],[1397,"core::option"],[1398,"nano_arrow::buffer::immutable"],[1399,"nano_arrow::array::fixed_size_list"],[1400,"core::result"],[1401,"core::any"],[1402,"nano_arrow::array"],[1403,"alloc::boxed"],[1404,"nano_arrow::error"],[1405,"nano_arrow::offset"],[1406,"core::any"],[1407,"core::fmt"],[1408,"core::marker"],[1409,"nano_arrow::array::utf8"],[1410,"core::iter::traits::iterator"],[1411,"nano_arrow::array::binary"],[1412,"nano_arrow::bitmap::utils::chunk_iterator"],[1413,"core::ops::function"],[1414,"nano_arrow::array::primitive"],[1415,"nano_arrow::types::native"],[1416,"nano_arrow::array::boolean"],[1417,"nano_arrow::chunk"],[1418,"nano_arrow::datatypes::field"],[1419,"alloc::vec"],[1420,"nano_arrow::array::struct_"],[1421,"core::fmt"],[1422,"core::convert"],[1423,"std::io::error"],[1424,"alloc::string"],[1425,"core::str::error"],[1426,"simdutf8::basic"],[1427,"alloc::collections"],[1428,"core::error"],[1429,"core::marker"],[1430,"core::clone"],[1431,"core::cmp"],[1432,"core::cmp"],[1433,"chrono::naive::datetime"],[1434,"core::core_simd::vector"],[1435,"core::core_simd::cast"],[1436,"num_traits::float"],[1437,"core::ops::arith"],[1438,"core::ops::arith"],[1439,"num_traits::pow"],[1440,"serde::de"],[1441,"core::hash"],[1442,"core::iter::traits::accum"],[1443,"core::ops::arith"],[1444,"num_traits::identities"],[1445,"core::ops::arith"],[1446,"core::ops::arith"],[1447,"chrono::offset"],[1448,"core::iter::traits::double_ended"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Useful for a Utf8 or a List to get underlying value size. …","","","","","","","","","","Safety","Safety","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Cast null arrays to inner type and ensure that all offsets …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Utility trait to slice concrete arrow arrays whilst …","Slices this <code>Array</code>.","Slices the <code>Array</code>.","","","","","Returns the ceil of <code>value</code>/<code>divisor</code>","","","","","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Returns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …","Returns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…","Sets bit at position <code>i</code> for <code>data</code>","Sets bit at position <code>i</code> for <code>data</code>","Sets bit at position <code>i</code> for <code>data</code> to 0","Sets bit at position <code>i</code> for <code>data</code> to 0","","Apply a bitwise operation <code>op</code> to one input and return the …","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","Safety","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Safety","Safety","Take kernel for single chunk without nulls and an iterator …","Take kernel for single chunk without null values and an …","Take kernel for single chunk without nulls and an iterator …","Take kernel for a single chunk without nulls and an …","Take kernel for single chunk without nulls and arrow array …","Safety","Safety","Take kernel for a single chunk with null values and an …","Take kernel for a single chunk and an iterator that can …","Take kernel for single chunk with nulls and arrow array as …","Safety","Safety","Safety","Safety","Forked and adapted from arrow-rs This is faster because it …","Safety","","","Returns its underlying <code>Vec</code>, if possible.","","Safety","","","","","","Enum with all errors in this crate.","","","","","Contains the error value","","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","","","Wrapper for IO errors","","Returned when functionality is not yet available.","Contains the success value","","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","","","","","","","","","","","","","","Constant that help with creating error messages dependent …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Wraps an external error in an <code>Error</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the function that will be called by the <code>polars_warn!</code> …","","","","","","","","","","","","","","","","","","","","","A utility type that make floats Ord by nan == nan == true …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Translate the negative index to an offset.","","","Safety","","","","","","","","","","","","","","","","kernels that combine take and aggregations.","","","","","","","Concatenate multiple <code>Array</code> of the same type into a single …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Convert a list <code>[1, 2, 3]</code> to a list type of <code>[[1], [2], [3]]</code>","","","","","No value.","","","Some value of type <code>T</code>.","","","","","","","","","","","NaN will be larger than every valid value","NaN will be smaller than every valid value","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update and recompute the window","","","","","","","","","Generic <code>Min</code> / <code>Max</code> kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","Efficiently sets value at the indices from the iterator to …","Set values in a primitive array where the primitive array …","Set values in a primitive array based on a mask array. …","","Take a clean-partitioned slice and return the groups slices","","","","","","","","Numerical stable online variance aggregation See: Welford, …","Take kernel for single chunk without nulls and an iterator …","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","Take kernel for single chunk and an iterator as index.","","","","","","","","","","","","Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Asmera","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Timbuktu","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/ComodRivadavia","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Atka","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Buenos_Aires","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Catamarca","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Ciudad_Juarez","America/Coral_Harbour","America/Cordoba","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Ensenada","America/Fort_Nelson","America/Fort_Wayne","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indianapolis","America/Inuvik","America/Iqaluit","America/Jamaica","America/Jujuy","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Knox_IN","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Louisville","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Mendoza","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montreal","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Nuuk","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port_of_Spain","America/Port-au-Prince","America/Porto_Acre","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Rosario","America/Santa_Isabel","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Shiprock","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Virgin","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/South_Pole","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Ashkhabad","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Calcutta","Asia/Chita","Asia/Choibalsan","Asia/Chongqing","Asia/Chungking","Asia/Colombo","Asia/Dacca","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Harbin","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Istanbul","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kashgar","Asia/Kathmandu","Asia/Katmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macao","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qostanay","Asia/Qyzylorda","Asia/Rangoon","Asia/Riyadh","Asia/Saigon","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Tel_Aviv","Asia/Thimbu","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ujung_Pandang","Asia/Ulaanbaatar","Asia/Ulan_Bator","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faeroe","Atlantic/Faroe","Atlantic/Jan_Mayen","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/ACT","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Canberra","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/LHI","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/NSW","Australia/North","Australia/Perth","Australia/Queensland","Australia/South","Australia/Sydney","Australia/Tasmania","Australia/Victoria","Australia/West","Australia/Yancowinna","Brazil/Acre","Brazil/DeNoronha","Brazil/East","Brazil/West","CET","CST6CDT","Canada/Atlantic","Canada/Central","Canada/Eastern","Canada/Mountain","Canada/Newfoundland","Canada/Pacific","Canada/Saskatchewan","Canada/Yukon","Chile/Continental","Chile/EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc/GMT","Etc/GMT0","Etc/GMT-0","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9","Etc/GMT+0","Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/Greenwich","Etc/UCT","Etc/UTC","Etc/Universal","Etc/Zulu","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belfast","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Kyiv","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Nicosia","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Tiraspol","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","GB","GB-Eire","GMT","GMT0","GMT-0","GMT+0","Greenwich","HST","Hongkong","Iceland","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico/BajaNorte","Mexico/BajaSur","Mexico/General","NZ","NZ-CHAT","Navajo","PRC","PST8PDT","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Johnston","Pacific/Kanton","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Ponape","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Samoa","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Truk","Pacific/Wake","Pacific/Wallis","Pacific/Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","TimeZones built at compile time from the tz database","UCT","US/Alaska","US/Aleutian","US/Arizona","US/Central","US/East-Indiana","US/Eastern","US/Hawaii","US/Indiana-Starke","US/Michigan","US/Mountain","US/Pacific","US/Samoa","UTC","Universal","WET","W-SU","Zulu","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","An iterator of known, fixed size. A trait denoting Rusts’…","","Extend the array with an iterator who’s length can be …","Extend the array with an iterator who’s length can be …","Safety","","","","Safety","Will push an item and not check if there is enough …","Safety","","","Safety","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Turn any iterator in a trusted length iterator","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,133,133,133,134,135,0,0,0,0,0,0,0,136,137,138,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,20,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,139,139,0,0,140,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,71,71,71,71,0,51,51,51,51,14,0,52,52,52,51,51,52,51,52,14,51,52,52,0,0,51,51,51,51,51,49,51,52,49,51,52,0,49,49,51,52,49,51,52,49,51,52,0,49,49,51,51,52,52,49,49,51,51,51,52,52,52,52,52,52,52,0,49,51,52,49,51,52,0,0,0,0,0,0,51,0,49,51,52,49,51,52,49,51,52,49,51,52,51,0,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,143,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,0,0,0,88,88,88,88,88,88,88,88,88,88,0,0,0,0,0,0,0,0,0,99,0,0,99,94,95,94,95,94,95,94,95,94,95,0,0,94,94,95,94,95,94,95,94,95,94,95,94,95,95,94,95,0,0,95,94,95,94,95,94,95,94,95,96,96,96,0,0,96,0,96,0,0,0,0,0,96,100,105,109,110,111,112,96,100,105,109,110,111,112,96,96,96,96,100,105,109,110,111,112,96,100,105,109,110,111,112,96,96,100,105,109,110,111,112,96,96,96,96,96,100,105,109,110,111,112,96,96,100,105,109,110,111,112,96,100,105,109,110,111,112,96,146,100,105,109,110,111,112,0,0,0,0,0,0,96,96,100,105,109,110,111,112,96,100,105,109,110,111,112,96,100,105,109,110,111,112,96,146,100,105,109,110,111,112,0,0,0,0,0,0,0,0,0,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,0,148,116,118,119,120,121,122,123,148,116,118,119,120,121,122,123,0,0,0,0,0,0,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,116,118,147,119,120,121,122,123,148,116,118,119,120,121,122,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,149,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,150,150,150,150,150,130,150,150,150,150,150,150,0,0,0,0,129,151,129,129,129,129,151,151,0,0,129,129,129,151,129,131,129,129,129,129,129,129,129,129,151,129,129,129],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],[[3,[2]]],4],[-1,[[3,[2]]],4],[[-1,5],[[3,[2]]],4],[[-1,1],[[3,[2]]],4],[-1,1,[]],[-1,6,[]],0,0,0,0,0,0,0,[[-1,[8,[7]]],-2,[],[]],[[[9,[2]],[9,[10]],[8,[7]]],-1,[]],[[[9,[2]],[9,[10]],[8,[7]]],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],11],[1,-1,[]],[1,-1,[]],[1,12],[[11,[8,[5]]],[[14,[13]]]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[11,6],[[1,1],11],[[11,15],12],[11,12],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[18,5],[[19,[18]]]],[1,-1,[]],[1,-1,[]],[1,12],[[20,[8,[5]]],[[21,[[3,[2]]]]]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[20,6],[1,20],[20,[[22,[2]]]],[[20,18],12],[20,12],[[20,[22,[15]]],12],[20,12],[[20,[8,[18]]],12],[20,[[23,[2]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,[24,25],[24,[[19,[18]]]],[24,25],[-1,-2,[],[]],[-1,-2,[],[]],[24,5],[[],24],[1,-1,[]],[1,-1,[]],[1,12],[[24,1],12],[[24,26],27],[-1,-1,[]],[[],1],[-1,-2,[],[]],[24,1],[24,12],[[24,1],12],[24,12],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[24,[[8,[28]]]],0,[[-1,1,1],-1,29],[[-1,1,1],-1,29],0,0,[[-1,1,1],[[30,[2]]],31],[[-1,1,1],[[32,[2]]],31],[[1,1],1],[[[34,[33]]],[[12,[[8,[1]],[8,[1]]]]]],[[[34,[33]],[34,[33]]],[[12,[[8,[1]],[8,[1]],[8,[1]]]]]],[7,1],[7,1],[[[22,[10]],1],6],[[10,1],6],[1,1],[[1,1],1],[[[22,[10]],1],12],[[10,1],12],[[[22,[10]],1],12],[[10,1],12],0,[[7,-1],7,35],0,[-1,[[22,[10]]],[]],[[-1,1,6],12,[]],0,0,[[[36,[-1]],[36,[-2]],5,-3],[[36,[-1]]],37,37,35],0,0,0,0,0,[[[36,[-1]],-2,5],[[36,[-3]]],37,35,37],0,[[[36,[38]],[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[38]],38,5],[[14,[[36,[38]]]]]],[[[36,[38]],[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[38]],38,5],[[14,[[36,[38]]]]]],[[38,5,[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[38]],[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[38]],38,5],[[14,[[36,[38]]]]]],[[[36,[38]],[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[38]],38],[[14,[[36,[38]]]]]],[[38,[36,[38]]],[[14,[[36,[38]]]]]],[[[36,[-1]],[36,[-1]]],[[36,[-1]]],[]],[[[36,[-1]],[36,[-1]]],[[36,[-1]]],[]],[[[36,[-1]],[36,[-1]]],[[36,[-1]]],[]],[[18,5],[[21,[[19,[18]]]]]],[[[30,[2]],[8,[1]],1],[[36,[38]]]],[[[22,[10]]],[[8,[10]]]],0,[[39,-1],[[19,[39]]],4],[[39,-1],[[19,[39]]],4],[[39,40],[[19,[39]]]],[[41,-1],[[19,[41]]],4],[[41,-1],[[19,[41]]],4],[[39,-1],[[19,[39]]],4],[[39,-1],[[19,[39]]],4],[[41,-1],[[19,[41]]],4],[[41,-1],[[19,[41]]],4],[[[36,[-1]],-2],[[19,[[36,[-1]]]]],37,42],[[[36,[-1]],-2],[[19,[[36,[-1]]]]],37,4],[[[36,[-1]],40],[[19,[[36,[-1]]]]],37],[[43,-1],[[19,[43]]],4],[[43,-1],[[19,[43]]],4],[[[36,[-1]],-2],[[19,[[36,[-1]]]]],37,4],[[[36,[-1]],-2],[[19,[[36,[-1]]]]],37,4],[[[36,[-1]],40],[[19,[[36,[-1]]]]],37],[[18,40],15],[[43,-1],[[19,[43]]],4],[[43,-1],[[19,[43]]],4],[[43,40],[[19,[43]]]],[[[3,[2]],40],[[12,[40,[23,[2]]]]]],[[7,[22,[44]]],7],[[[36,[-1]],1],[[36,[-1]]],37],[[[45,[15]],[47,[46]]],48],[15,[[8,[[47,[-1]]]]],37],0,0,[15,1],[[],6],[[],6],[[],6],[-1,6,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,-1,[]],[49],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,12],[1,12],[1,12],0,[[49,26],[[16,[12,50]]]],[[49,26],[[16,[12,50]]]],[[51,26],[[16,[12,50]]]],[[51,26],[[16,[12,50]]]],[[52,26],[[16,[12,50]]]],[[52,26],[[16,[12,50]]]],[-1,-1,[]],[-1,49,[[55,[[54,[53]]]]]],[-1,-1,[]],[52,51],[56,51],[57,52],[56,52],[58,52],[59,52],[-1,-1,[]],[60,52],[-1,52,[61,62,63]],[[]],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,61],0,0,0,0,[[],12],[51,[[8,[61]]]],[-1,51,64],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[51,66],51],0,0,0,0,0,0,[[-1,67],12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],[[68,[-1]]],69],[[-1,-2],12,[],[]],[[[68,[-1]],[68,[-1]]],70,[71,72,73]],[1,-1,[]],[1,-1,[]],[1,12],[[[68,[-1]],[68,[-1]]],6,[71,72]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[22,[74]]],[[22,[[68,[74]]]]]],[[[22,[75]]],[[22,[[68,[75]]]]]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[[68,[-1]],[68,[-1]]],[[8,[70]]],[71,72,73]],[[[68,[-1]]],[[8,[74]]],76],[[[68,[-1]]],[[8,[75]]],76],[[[68,[-1]]],[[8,[77]]],76],[[[68,[-1]]],[[8,[78]]],76],[[[68,[-1]]],[[8,[2]]],76],[[[68,[-1]]],[[8,[79]]],76],[[[68,[-1]]],[[8,[80]]],76],[-1,-2,[],[]],[[[68,[-1]]],[[8,[81]]],76],[[[68,[-1]]],[[8,[82]]],76],[[[68,[-1]]],[[8,[33]]],76],[[[68,[-1]]],[[8,[10]]],76],[[[68,[-1]]],[[8,[1]]],76],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,0,0,[[[22,[44]]],[[0,[31]]]],[[-1,1],[[8,[1]]],[]],0,0,[[-1,1],6,[]],0,0,0,0,[[83,83,84,53],[[21,[84]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[85,[-2]]],[],86],[18,75],[[[36,[-1]],[36,[-1]]],[[36,[-1]]],[87,37]],[[13,13],41],[[13,13],41],[[[22,[15]]],[[21,[15]]]],0,[[-1,67],12,[]],0,0,[[88,6],88],[[88,75],88],[[88,75],88],[[88,6],88],[[88,1],88],[[88,1],88],0,[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[[-1,-2],12,[],[]],[[],88],[1,-1,[]],[1,-1,[]],[1,12],[[-1,-1,-2,6,6,1,6],[[36,[-2]]],4,[87,37,89,90,91]],[[-1,-2,6,1,6],[[36,[-2]]],4,[87,37,89,90]],[[-1,-2,6,6,1,6],[[36,[-2]]],[4,69],[87,37,89,90,91]],[[-1,-2,6,6,1,6],[[36,[-2]]],[4,69],[87,37,89,90,91]],[[88,26],27],[-1,-1,[]],0,[[],1],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[[[36,[-1]]],15,[37,87]],[[[36,[-1]]],15,[37,87]],[[[36,[-1]]],15,[37,87]],[[[36,[-1]]],15,[37,87]],[15,[[3,[2]]]],[[[3,[2]],2],15],[[[3,[2]]],[[14,[[19,[92]]]]]],[[[36,[-2]],[36,[-1]]],[[36,[-2]]],37,[[93,[-1]],37]],0,0,0,0,0,[[-1,67],12,[]],[[-1,67],12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[94,94],[95,95],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-1],70,[73,71]],[[-1,-1],70,[73,71]],0,[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,12],[1,12],[[94,26],27],[[95,26],27],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,67],12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,96],[[-1,-2],12,[],[]],[[],96],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[-1,[[16,[96]]],97],[1,12],[1,12],[1,12],[1,12],[1,12],[1,12],[1,12],[[96,96],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[96,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[96,-1],12,98],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],1,1,99],-2,[],[]],[[[22,[-1]],1,1,99],[[100,[-1]]],[37,71,101,89,102,103,104]],[[[22,[-1]],1,1,99],[[105,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,108]],[[[22,[-1]],1,1,99],[[109,[-1]]],[37,71,101,89,102]],[[[22,[-1]],1,1,99],[[110,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,108]],[[[22,[-1]],1,1,99],[[111,[-1]]],[37,71,73]],[[[22,[-1]],1,1,99],[[112,[-1]]],[37,71,73]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[37,73,71,113,104,114]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[37,73,71,113,104,114]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[37,71,87,101,89,102,103,104,106,107,73,108]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[37,101,104,114,89,102,71]],[[[22,[-1]],1,1,6,[8,[[22,[75]]]],99],[[14,[15]]],[37,87,71,101,89,102,103,104,106,107,108]],[[96,-1],16,115],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[-1,1,1],-2,[],[]],[[[100,[-1]],1,1],-1,[37,71,101,89,102,103,104]],[[[105,[-1]],1,1],-1,[37,71,87,101,89,102,103,104,106,107,73,108]],[[[109,[-1]],1,1],-1,[37,71,101,89,102]],[[[110,[-1]],1,1],-1,[37,71,87,101,89,102,103,104,106,107,73,108]],[[[111,[-1]],1,1],-1,[37,71,73]],[[[112,[-1]],1,1],-1,[37,71,73]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,12],[1,12],[1,12],[1,12],[1,12],[1,12],[1,12],[1,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],7],6,[37,73,71]],[[-1,1],6,[]],[[[116,[-1]],1],6,[37,71,117,108,104,103]],[[[118,[-1]],1],6,37],[[[119,[-1]],1],6,[37,71,73]],[[[120,[-1]],1],6,[37,71,73]],[[[121,[-1]],1],6,[37,71,87,101,89,102,103,104,106,107,73,108]],[[[122,[-1]],1],6,[37,71,117,108]],[[[123,[-1]],1],6,[37,71,87,101,89,102,103,104,106,107,73,117,108]],[[[22,[-1]],7,1,1,99],-2,[],[]],[[[22,[-1]],7,1,1,99],[[116,[-1]]],[37,71,117,108,104,103]],[[[22,[-1]],7,1,1,99],[[118,[-1]]],37],[[[22,[-1]],7,1,1,99],[[119,[-1]]],[37,71,73]],[[[22,[-1]],7,1,1,99],[[120,[-1]]],[37,71,73]],[[[22,[-1]],7,1,1,99],[[121,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,108]],[[[22,[-1]],7,1,1,99],[[122,[-1]]],[37,71,117,108]],[[[22,[-1]],7,1,1,99],[[123,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,117,108]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[37,101,107,89,124,73,113,71]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[37,71,73,117,108,104,103]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[37,101,107,89,124,73,113,71]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[37,71,87,101,89,102,103,104,106,107,73,108]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[37,71,73,117,108]],[[[36,[-1]],1,1,6,[8,[[22,[75]]]],99],15,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[-1,1,1],[[8,[-2]]],[],[]],[[[116,[-1]],1,1],[[8,[-1]]],[37,71,117,108,104,103]],[[[118,[-1]],1,1],[[8,[-1]]],37],[[[119,[-1]],1,1],[[8,[-1]]],[37,71,73]],[[[120,[-1]],1,1],[[8,[-1]]],[37,71,73]],[[[121,[-1]],1,1],[[8,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,108]],[[[122,[-1]],1,1],[[8,[-1]]],[37,71,117,108]],[[[123,[-1]],1,1],[[8,[-1]]],[37,71,87,101,89,102,103,104,106,107,73,117,108]],[[[36,[-1]],-2,-1,5],[[14,[[36,[-1]]]]],37,4],[[[36,[-1]],-1],[[36,[-1]]],37],[[[36,[-1]],41,-1,5],[[36,[-1]]],37],[[[22,[-1]],1,6],[[47,[[22,[-1]]]]],[125,37,73]],[[[22,[-1]],44,6,44],[[47,[[126,[44]]]]],[125,37,73]],[[[22,[-1]],44,6,44,[47,[[126,[44]]]]],12,[125,37,73]],0,0,[[[22,[-1]],[22,[-1]],44],[[12,[[47,[44]],[47,[44]]]]],[73,124,125]],[[[22,[-1]],[22,[-1]],44],[[12,[[47,[44]],[47,[[8,[44]]]]]]],[73,124,125]],[[[30,[2]]],15],[[[30,[2]]],15],[[-1,10],[[8,[75]]],4],[[[36,[-1]],-2,-3,-4],-4,[37,76],4,66,[104,37]],[[[36,[-1]],-2,-3,-1,44],[[8,[-1]]],37,4,66],[[[36,[-1]],-2,-3,-4,44],[[8,[[12,[-4,44]]]]],[37,76],4,66,[104,37]],[[[30,[2]],-1,-2,44],[[8,[53]]],4,66],[[[30,[2]],-1,-2],[[8,[53]]],4,66],[[41,-1],[[8,[6]]],4],[[41,-1,44],[[8,[6]]],4],[[41,-1],[[8,[6]]],4],[[41,-1,44],[[8,[6]]],4],[[[36,[-1]],-2,10],[[8,[75]]],[76,37],4],[[[36,[-1]],-2,10],[[8,[75]]],[76,37],4],0,0,0,0,0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,67],12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,83],[[-1,-2],12,[],[]],[1,-1,[]],[1,-1,[]],[1,12],[[83,83],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[83,26],[[16,[12,50]]]],[[83,26],[[16,[12,50]]]],[-1,-1,[]],[[],83],[53,[[16,[83]]]],[[83,-1],12,98],[[],1],[-1,-2,[],[]],[83,53],[[83,127],128],[[83,84],128],[[83,127]],[[83,84]],[-1,-2,[],[]],[-1,65,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,0,0,[[-1,-2],12,[],4],[[-1,-2],12,[],4],[[-1,-2],12,[],4],[-1,-2,4,29],[-1,-2,4,29],[-1,-2,42,[]],[-1,-2,4,[]],[[-1,-2],12,[],[]],[[-1,-2],[[16,[12,-3]]],[],4,[]],[-1,[[16,[-2,-3]]],4,29,[]],[-1,[[16,[-2,-3]]],4,29,[]],[-1,[[16,[-2,-3]]],4,29,[]],0,0,0,0,[[-1,67],12,[]],[-1,6,29],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1,-2]]],[[129,[-1,-2]]],[69,31],69],[[-1,-2],12,[],[]],[-1,-2,[29,42],130],[-1,-2,[29,42],131],[[[8,[7]],[8,[7]]],[[8,[7]]]],[[[8,[7]],[8,[7]]],[[8,[7]]]],[1,-1,[]],[1,-1,[]],[1,12],[[-1,-2,-3],[[8,[-2]]],31,[],35],[-1,-1,[]],[-1,-2,4,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],[[129,[-1,-2]]],31,[]],[[[129,[-1,-2]]],8,31,[]],[[[129,[-1,-2]]],8,[31,132],[]],[[[129,[-1,-2]]],[[12,[1,[8,[1]]]]],31,[]],[-1,-2,[],[]],[[-1,1],[[129,[-1]]],29],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]]],"c":[],"p":[[15,"usize"],[15,"i64"],[3,"ListArray",1393],[8,"IntoIterator",1394],[4,"DataType",1395],[15,"bool"],[3,"Bitmap",1396],[4,"Option",1397],[3,"Buffer",1398],[15,"u8"],[3,"AnonymousBuilder",38],[15,"tuple"],[3,"FixedSizeListArray",1399],[6,"PolarsResult",189],[6,"ArrayRef",182],[4,"Result",1400],[3,"TypeId",1401],[8,"Array",1402],[3,"Box",1403],[3,"AnonymousBuilder",57],[6,"Result",1404],[15,"slice"],[3,"Offsets",1405],[3,"MutableNullArray",80],[8,"Any",1401],[3,"Formatter",1406],[6,"Result",1406],[3,"MutableBitmap",1407],[8,"Sized",1408],[3,"Utf8Array",1409],[8,"Iterator",1410],[3,"BinaryArray",1411],[15,"u64"],[3,"BitChunks",1412],[8,"FnMut",1413],[3,"PrimitiveArray",1414],[8,"NativeType",1415],[15,"i128"],[6,"LargeBinaryArray",709],[6,"IdxArr",319],[3,"BooleanArray",1416],[8,"TrustedLen",1346],[6,"LargeStringArray",709],[6,"IdxSize",319],[3,"Chunk",1417],[3,"Field",1418],[3,"Vec",1419],[3,"StructArray",1420],[3,"ErrString",189],[3,"Error",1406],[4,"PolarsError",189],[4,"ArrowError",189],[15,"str"],[4,"Cow",1421],[8,"Into",1422],[3,"Error",1423],[3,"FromUtf8Error",1424],[3,"Utf8Error",1425],[3,"Utf8Error",1426],[3,"TryReserveError",1427],[8,"Error",1428],[8,"Send",1408],[8,"Sync",1408],[8,"Display",1406],[3,"String",1424],[8,"Fn",1413],[3,"Private",1429],[3,"OrdFloat",284],[8,"Clone",1430],[4,"Ordering",1431],[8,"IsFloat",182],[8,"PartialEq",1431],[8,"PartialOrd",1431],[15,"f32"],[15,"f64"],[8,"ToPrimitive",1432],[15,"i16"],[15,"i32"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u32"],[4,"Tz",720],[3,"NaiveDateTime",1433],[3,"Simd",1434],[8,"SimdCast",1435],[8,"Float",1436],[3,"EWMOptions",350],[8,"AddAssign",1437],[8,"MulAssign",1437],[8,"DivAssign",1437],[8,"ExactSizeIterator",1438],[8,"Pow",1439],[3,"RollingVarParams",391],[3,"RollingQuantileParams",391],[4,"QuantileInterpolOptions",435],[8,"Deserializer",1440],[8,"Hasher",1441],[6,"DynArgs",391],[3,"MeanWindow",435],[8,"Sum",1442],[8,"SubAssign",1437],[8,"Div",1437],[8,"NumCast",1432],[3,"QuantileWindow",435],[8,"One",1443],[8,"Zero",1443],[8,"Sub",1437],[3,"SumWindow",435],[3,"VarWindow",435],[3,"MinWindow",435],[3,"MaxWindow",435],[8,"Bounded",1444],[8,"Mul",1437],[8,"Serializer",1445],[3,"MeanWindow",557],[8,"Add",1437],[3,"SortedMinMax",557],[3,"MinWindow",557],[3,"MaxWindow",557],[3,"QuantileWindow",557],[3,"SumWindow",557],[3,"VarWindow",557],[8,"Copy",1408],[8,"Debug",1406],[15,"array"],[3,"NaiveDate",1446],[4,"LocalResult",1447],[3,"TrustMyLength",1361],[8,"FromIteratorReversed",1346],[8,"FromTrustedLenIterator",1361],[8,"DoubleEndedIterator",1448],[8,"ListFromIter",17],[8,"ValueSize",17],[8,"PolarsArray",17],[8,"FromData",32],[8,"FromDataUtf8",32],[8,"FromDataBinary",32],[8,"SlicedArray",104],[8,"Utf8FromIter",107],[8,"BinaryFromIter",107],[8,"MutableBitmapExtension",126],[8,"IndexToUsize",319],[8,"IsValid",324],[8,"SimdCastPl",343],[8,"RollingAggWindowNoNulls",435],[3,"MinMaxWindow",557],[8,"RollingAggWindowNulls",557],[8,"ExtremaNanAware",717],[8,"TrustedLenPush",1346],[8,"CustomIterTools",1361]],"b":[[233,"impl-Debug-for-ErrString"],[234,"impl-Display-for-ErrString"],[235,"impl-Debug-for-PolarsError"],[236,"impl-Display-for-PolarsError"],[237,"impl-Display-for-ArrowError"],[238,"impl-Debug-for-ArrowError"],[242,"impl-From%3CArrowError%3E-for-PolarsError"],[243,"impl-From%3CError%3E-for-PolarsError"],[244,"impl-From%3CFromUtf8Error%3E-for-ArrowError"],[245,"impl-From%3CError%3E-for-ArrowError"],[246,"impl-From%3CUtf8Error%3E-for-ArrowError"],[247,"impl-From%3CUtf8Error%3E-for-ArrowError"],[249,"impl-From%3CTryReserveError%3E-for-ArrowError"],[1328,"impl-Debug-for-Tz"],[1329,"impl-Display-for-Tz"]]},\
"polars_core":{"doc":"","t":"CHHHDOOOAAAOFOOFAAAAAAOOOAAAAAFAOOOOOGDESNNSSDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLIKKKKKKKDDDIIDDDLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKKKKLLLLLLLLLLLLALLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDIDDLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIILLLLLLLLLLLLDDDIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLAADGIILLLKLLLLALLLLLLLLLLLLLLLLLLLALLLLLKLLLLLLLKKLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLIGGKKFFFFKNIIIIIIIIIIIIIIIIIIIIIIIIIIGENQIIQNNNNNNNNDDNLLLKKKKKKLKALLLLLLKKLLLLLLLLLLLLLLLLLMMLLLLKKLLLLKAKKLLLLLAKKAKKKKLLLLLLLLLKKMLLLLMMLKKKMMLKLKKKKKAKKLLKKKLLLKLLLLLLLLLKLLLLAKIQQIFFFFFFFFFFFFFFFAFFFFFFAFFFFIFEQIIIEEINNNGNDNNNGDDNNDDDGENNNDNDNNNNGDNNNDNDNNDNNNNGDNNNGDINNQRGGGGIGDNNNGDNNNGDNNNGDNNNGDNNNNNNNGDNNDINNNNNNNQDNNNINNGNDDQGGGGGIIIIQEENIDNQNNNDEGNNNNGDNNNGDNNNGDNNNGDNNNNNGNDQQQQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLDDDNNNNEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLFLLFLLLLLLLFLDFFFENNNNNDNNNNNNNNNNNNEGNNNNNLLLLALLLLLLLOLLLLLLLLLLLLLFLLLLFOOOOFFLLLLLLLLLLHHHCCCCCCCCENNLLLLLLLLFLFLLFLLLLLNGDNNNNEDNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLMLLMLLLLMMMLGNNDENDEEDDGNNGNINNNNNNNNNNNDNNNLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLALLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMIIFFFFFFFFKKKIKKNNEENNNNNNNNNNDNNNNNNLLLLLLFLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLFFFFDIGDDIRLFFKFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLFLLLLAFLLLLLLLLLLLLLLLLLLLLLLIKFDCGNDDCCNDDDICCCCNNCNGNNIIICNNCCCNGGEICCCNNIGGGCNCCCICCNNNCNIIINCNNCINNIECCGCIEEEDDDNNCCNINDNNCCIICLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLMKKLLLLLLLLLLLLLLLLLLLMCMLLLLLLLALLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLKLLLLLKLLLLLLLLLFLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLALLLLKMMLLMMLKKLLLLLLLLLLLLALLLOOOOMLLLLKLLLLLLKAKKLLKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLMMLLLLLIIIKKKDLLFLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLIKKDFFFIILLFIDGLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNCCNNIEENNDDGILLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLALLLLLLLLLKLLLLLLLKKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKALLLLKLLLKLLKLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLKLKKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLIIIQKKLLAKKLLKKLLKKLLKKLLIIKLLKLLNNELLLLLLLLALLLLLLLLLLALLLLLGDLLLLLLLLLLLLLLLLLLLLLLIIIIIDDDDLFFFFFFFLCCLLLLLLLLFFLLFFFFLLLLLLLLLLLLFLLLLALLLLLLKLLLLLFFFLLLLLLLLLKLLLLLLCLFFFLLLLLFLLLLLLLLLFFFFF","n":["IdBuildHasher","POOL","PROCESS_ID","SINGLE_LOCK","StringCacheHolder","apply_method_all_arrow_series","apply_method_physical_integer","apply_method_physical_numeric","chunked_array","config","datatypes","df","disable_string_cache","downcast_as_macro_arg_physical","downcast_as_macro_arg_physical_mut","enable_string_cache","error","export","fmt","frame","functions","hashing","match_arrow_data_type_apply_macro_ca","match_dtype_to_logical_apply_macro","match_dtype_to_physical_apply_macro","prelude","random","schema","series","testing","using_string_cache","utils","with_match_physical_float_polars_type","with_match_physical_integer_polars_type","with_match_physical_integer_type","with_match_physical_numeric_polars_type","with_match_physical_numeric_type","ChunkIdIter","ChunkedArray","ChunkedArrayLayout","FAST_EXPLODE_LIST","Multi","MultiNoNull","SORTED_ASC","SORTED_DSC","Settings","Single","SingleNoNull","__clone_box","__clone_box","_can_fast_explode","abs","add","add","add","add","add_to","agg_list","all","all","all_kleene","amortized_iter","amortized_iter_with_name","any","any_kleene","append","apply","apply_amortized","apply_amortized_generic","apply_as_ints","apply_as_ints","apply_generic","apply_in_place","apply_kernel","apply_kernel_cast","apply_mut","apply_mut","apply_mut","apply_nonnull_values_generic","apply_to_buffer","apply_to_inner","apply_to_slice","apply_values","apply_values_generic","arg_sort","arg_sort_multiple","arg_unique","arithmetic","as_binary","as_ref","as_ref_dtype","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","cast","cast","cast_and_apply_in_place","cast_unchecked","checked_div","checked_div_num","chunk_id","chunks","chunks_mut","clone","clone","clone_into","clone_into","collect","comparison","complement","cont_slice","contains","cummax","cummin","cumprod","cumsum","data_views","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","difference","div","div","div","div","divide","drop","drop","drop","drop","dtype","empty","eq","equal","equal","equal_missing","equal_missing","extend","extend","fill_null_with_values","filter","first_non_null","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each_amortized","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_chunk_iter","from_chunk_iter_like","from_chunks","from_chunks_and_dtype","from_iter","from_iter","from_iter","from_iter","from_iter_options","from_iter_trusted_length","from_iter_trusted_length","from_iter_values","from_name","from_par_iter","from_slice","from_slice_options","from_trusted_len_iter_rev","from_vec","full","full_null","full_null_with_dtype","get","get_any_value","get_any_value_unchecked","get_as_series","get_flags","get_inner","get_object","get_object_unchecked","get_sorted_flag","get_unchecked","group_tuples","group_tuples_perfect","gt","gt","gt_eq","gt_eq","has_validity","head","init","init","init","init_rand","inner_dtype","insert","intersection","intersects","into","into","into","into_decimal","into_decimal_unchecked","into_iter","into_iter","into_no_null_iter","into_series","is_all","is_empty","is_empty","is_finite","is_infinite","is_nan","is_not_nan","is_not_null","is_null","is_optimal_aligned","is_sorted_flag","iter","iter_names","iter_validities","iterator","last","last_non_null","layout","len","lhs_div","lhs_rem","lhs_sub","limit","lt","lt","lt_eq","lt_eq","max","max","max_as_series","mean","mean","median","median_as_series","min","min","min_as_series","mmap_slice","mmap_slice","mul","mul","mul","mul","multiply","n_unique","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_from_index","new_from_owned_with_null_bitmap","new_from_vec","new_vec","none_to_nan","not","not_equal","not_equal","not_equal_and_validity","not_equal_missing","not_equal_missing","null_count","object","ops","par_iter","par_iter","par_iter_indexed","par_iter_indexed","prod_as_series","quantile","quantile_as_series","rand_bernoulli","rand_normal","rand_standard_normal","rand_uniform","rechunk","ref_field","rem","rem","rem","rem","remainder","remove","rename","reverse","rolling_map","rolling_map_float","sample_frac","sample_n","set","set","set_at_idx","set_at_idx_with","set_fast_explode","set_inner_dtype","set_sorted_flag","set_sorted_flag","shift","shift_and_fill","shrink_to_fit","slice","sort","sort_with","std","std_as_series","sub","sub","sub","sub","sub","sub_assign","subtract","sum","sum","sum_as_series","symmetric_difference","tail","take","take","take_unchecked","take_unchecked","temporal","tile","to_decimal","to_logical","to_ndarray","to_ndarray","to_owned","to_owned","to_utf8","to_vec","to_vec_null_aware","toggle","try_apply","try_apply_amortized","try_apply_generic","try_apply_nonnull_values_generic","try_apply_values_generic","try_from","try_from","try_from","try_from_chunk_iter","try_into","try_into","try_into","type_id","type_id","type_id","union","unique","unpack_series_matching_type","unset_fast_explode_list","upstream_traits","value_unchecked","var","var_as_series","vzip","vzip","vzip","with_chunk","with_chunks","with_name","zip_and_apply_amortized","zip_with","ArrayArithmetics","add","div","div_scalar","mul","rem","rem_scalar","sub","BinaryChunkedBuilder","BinaryChunkedBuilderCow","BooleanChunkedBuilder","ChunkedBuilder","NewChunkedArray","PrimitiveChunkedBuilder","Utf8ChunkedBuilder","Utf8ChunkedBuilderCow","__clone_box","__clone_box","__clone_box","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_option","append_option","append_option","append_value","append_value","append_value","append_value","append_value","append_value","append_value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","finish","finish","finish","finish","finish","finish","finish","from","from","from","from","from","from","from_iter_options","from_iter_values","from_slice","from_slice_options","init","init","init","init","init","init","into","into","into","into","into","into","list","new","new","new","new","new","new","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","AnonymousListBuilder","AnonymousOwnedListBuilder","ListBinaryChunkedBuilder","ListBooleanChunkedBuilder","ListBuilderTrait","ListPrimitiveChunkedBuilder","ListUtf8ChunkedBuilder","append_array","append_empty","append_empty","append_iter","append_iter","append_iter_values","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_opt_array","append_opt_series","append_opt_series","append_opt_slice","append_series","append_series","append_series","append_series","append_series","append_series","append_series","append_slice","append_trusted_len_iter","append_trusted_len_iter","append_values_iter","append_values_iter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fast_explode","fast_explode","fast_explode","fast_explode","fast_explode","field","field","field","field","field","finish","finish","finish","from","from","from","from","from","from","get_list_builder","init","init","init","init","init","init","inner_array","inner_array","inner_array","inner_array","inner_array","into","into","into","into","into","into","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","ChunkedCollectInferIterExt","ChunkedCollectIterExt","collect_ca","collect_ca_like","collect_ca_trusted","collect_ca_trusted_like","collect_ca_trusted_with_dtype","collect_ca_with_dtype","try_collect_ca","try_collect_ca_like","try_collect_ca_trusted","try_collect_ca_trusted_like","try_collect_ca_trusted_with_dtype","try_collect_ca_with_dtype","BinaryIterNoNull","BoolIterNoNull","ListIterNoNull","PolarsIterator","SomeIterator","Utf8IterNoNull","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","into_vec","new","new","new","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","par","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","list","utf8","ObjectArray","ObjectValueIter","PolarsObject","PolarsObjectSafe","__clone_box","arr_from_iter_with_dtype","arr_from_iter_with_dtype","as_any","as_any","as_any_mut","borrow","borrow_mut","builder","clone","clone_into","data_type","deref","deref_mut","drop","fmt","from","get","init","into","into_iter","is_null_unchecked","is_valid_unchecked","is_valid_unchecked","iter","iter","len","null_count","registry","set_validity","slice","slice_typed","slice_typed_unchecked","slice_unchecked","to_boxed","to_boxed","to_owned","try_arr_from_iter_with_dtype","try_arr_from_iter_with_dtype","try_from","try_into","type_id","type_name","type_name","validity","value","value_unchecked","value_unchecked","values","values_iter","values_iter","vzip","with_validity","with_validity","with_validity_typed","ObjectChunkedBuilder","append_null","append_null","append_option","append_value","append_value","append_value_from_any","borrow","borrow_mut","default","deref","deref_mut","drop","finish","from","init","into","new","to_series","try_from","try_into","type_id","vzip","AnonymousObjectBuilder","BuilderConstructor","ObjectConverter","append_null","append_value","get_object_builder","get_object_converter","is_object_builder_registered","register_object_builder","to_series","Backward","ChunkAgg","ChunkAnyValue","ChunkApply","ChunkApplyKernel","ChunkBytes","ChunkCast","ChunkCompare","ChunkCumAgg","ChunkExpandAtIndex","ChunkExplode","ChunkFillNullValue","ChunkFilter","ChunkFull","ChunkFullNull","ChunkQuantile","ChunkReverse","ChunkRollApply","ChunkSet","ChunkShift","ChunkShiftFill","ChunkSort","ChunkTake","ChunkTakeUnchecked","ChunkUnique","ChunkVar","ChunkZip","FillNullLimit","FillNullStrategy","Forward","FuncRet","IsFirstDistinct","IsLastDistinct","Item","Max","MaxBound","Mean","Min","MinBound","None","One","Some","SortMultipleOptions","SortOptions","Zero","__clone_box","__clone_box","__clone_box","apply","apply_kernel","apply_kernel_cast","apply_to_slice","apply_values","arg_sort","arg_sort_multiple","arg_unique","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast_unchecked","clone","clone","clone","clone_into","clone_into","clone_into","cummax","cummin","cumprod","cumsum","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","descending","descending","drop","drop","drop","eq","equal","equal_missing","equivalent","equivalent","equivalent","explode","explode_and_offsets","fill_null","fill_null_with_values","filter","fmt","fmt","from","from","from","full","full","full_null","gather","get_any_value","get_any_value_unchecked","gt","gt_eq","hash","init","init","init","into","into","into","is_first_distinct","is_last_distinct","lt","lt_eq","maintain_order","max","mean","median","min","multithreaded","multithreaded","n_unique","new_from_index","not_equal","not_equal_missing","nulls_last","other","quantile","reverse","rolling_map","set","set_at_idx","set_at_idx_with","shift","shift_and_fill","sort","sort","sort_with","std","sum","take","take_unchecked","to_byte_slices","to_owned","to_owned","to_owned","try_apply","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique","var","vzip","vzip","vzip","zip","zip_with","BinaryFnMut","Ret","Ret","TernaryFnMut","binary","binary_elementwise","binary_elementwise_for_each","binary_elementwise_values","binary_mut_with_options","binary_unchecked_same_type","ternary_elementwise","try_binary","try_binary_elementwise","try_binary_elementwise_values","try_binary_unchecked_same_type","try_ternary_elementwise","check_bounds_ca","check_bounds_nulls","_broadcast_descending","arg_sort_multiple","arg_sort_no_nulls","sort_slice_ascending","sort_slice_descending","_get_rows_encoded","_get_rows_encoded_ca","_get_rows_encoded_compat_array","conversion","unix_time","datetime_to_timestamp_ms","datetime_to_timestamp_ns","datetime_to_timestamp_us","PolarsAsRef","verbose","AnyValue","Array","ArrayCollectIterExt","ArrayFromIter","ArrayFromIterDtype","ArrowDataType","ArrowTimeUnit","AsRefDataType","Binary","Binary","Binary","BinaryChunked","BinaryOwned","BinaryType","Boolean","Boolean","Boolean","BooleanChunked","BooleanType","CatIter","Categorical","Categorical","CategoricalChunked","CategoricalChunkedBuilder","CategoricalType","ChunkId","DataType","Date","Date32","Date64","DateType","Datetime","DatetimeType","Decimal","Decimal","Decimal","Decimal256","DecimalChunked","DecimalType","Dictionary","Duration","Duration","DurationType","Extension","Field","FixedSizeBinary","FixedSizeList","Flat","Float16","Float32","Float32","Float32","Float32Chunked","Float32Type","Float64","Float64","Float64","Float64Chunked","Float64Type","GetAnyValue","Global","GlobalFinished","HashMap","IDX_DTYPE","IdxArr","IdxCa","IdxSize","IdxType","InitHashMaps","Int128Chunked","Int128Type","Int16","Int16","Int16","Int16Chunked","Int16Type","Int32","Int32","Int32","Int32Chunked","Int32Type","Int64","Int64","Int64","Int64Chunked","Int64Type","Int8","Int8","Int8","Int8Chunked","Int8Type","Interval","LargeBinary","LargeList","LargeUtf8","List","List","List","ListChunked","ListType","Local","Local","Logical","LogicalType","Map","Microsecond","Microseconds","Millisecond","Milliseconds","Nanosecond","Nanoseconds","Native","Nested","Null","Null","Null","NumericNative","Object","Object","ObjectChunked","ObjectOwned","ObjectType","OwnedObject","Physical","PlHashMap","PlHashSet","PlIdHashMap","PlIndexMap","PlIndexSet","PolarsDataType","PolarsFloatType","PolarsIntegerType","PolarsNumericType","PolarsType","RevMapping","RevMappingBuilder","Second","StaticArray","StrHashLocal","Struct","Structure","Time","Time32","Time64","TimeType","TimeUnit","TimeZone","Timestamp","UInt16","UInt16","UInt16","UInt16Chunked","UInt16Type","UInt32","UInt32","UInt32","UInt32Chunked","UInt32Type","UInt64","UInt64","UInt64","UInt64Chunked","UInt64Type","UInt8","UInt8","UInt8","UInt8Chunked","UInt8Type","Union","Unknown","Utf8","Utf8","Utf8","Utf8Chunked","Utf8Owned","Utf8Type","ValueIterT","ValueT","ZeroablePhysical","ZeroableValueT","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_can_fast_explode","add","add","add","add","add","add","add","add","add","add","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","add_to","agg_list","agg_list","agg_list","agg_list","agg_list","all","all_kleene","amortized_iter","amortized_iter_with_name","any","any_kleene","apply","apply","apply","apply","apply","apply_amortized","apply_amortized_generic","apply_as_ints","apply_as_ints","apply_kernel","apply_kernel","apply_kernel","apply_kernel_cast","apply_kernel_cast","apply_kernel_cast","apply_mut","apply_mut","apply_to_buffer","apply_to_inner","apply_to_slice","apply_to_slice","apply_to_slice","apply_to_slice","apply_to_slice","apply_values","apply_values","apply_values","apply_values","apply_values","arg_sort","arg_sort","arg_sort","arg_sort","arg_sort","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_sort_multiple","arg_unique","arg_unique","arg_unique","arg_unique","arg_unique","arg_unique","arr_from_iter","arr_from_iter_trusted","arr_from_iter_trusted","arr_from_iter_trusted_with_dtype","arr_from_iter_trusted_with_dtype","arr_from_iter_with_dtype","as_binary","as_borrowed","as_ref_dtype","as_slice","as_slice","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast_unchecked","cast_unchecked","cast_unchecked","cast_unchecked","categorical","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coerce","collect_arr","collect_arr","collect_arr_trusted","collect_arr_trusted","collect_arr_trusted_with_dtype","collect_arr_trusted_with_dtype","collect_arr_with_dtype","collect_arr_with_dtype","data_type","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","divide","divide","divide","divide","divide","divide","divide","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dtype","dtype","dtype","dtype","eq","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equal_missing","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","explode_and_offsets","explode_and_offsets","field","fill_null_with_values","fill_null_with_values","filter","filter","filter","filter","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_amortized","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_options","from_iter_options","from_iter_options","from_iter_options","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_owned","from_par_iter","from_par_iter","from_par_iter","from_par_iter","from_par_iter","from_slice","from_slice","from_slice","from_slice","from_slice_options","from_slice_options","from_slice_options","from_slice_options","from_trusted_len_iter_rev","from_vec","from_vec","from_zeroable_vec","from_zeroable_vec","full","full","full","full","full","full_null","full_null","full_null","full_null","full_null","full_null_with_dtype","get","get","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_any_value_unchecked","get_as_series","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_dtype","get_inner","get_object","get_object_unchecked","get_str","get_unchecked","get_unchecked","get_unchecked","get_values_size","get_values_size","get_values_size","group_tuples","group_tuples","group_tuples","group_tuples","group_tuples","gt","gt","gt","gt","gt","gt","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","gt_eq","hash","hash","hash","hash","hash","hash_impl","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_dtype","inner_dtype","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_decimal","into_decimal_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","into_series","into_series","into_static","is_float","is_integer","is_logical","is_nested_null","is_nested_null","is_numeric","is_primitive","is_signed","is_signed","is_temporal","is_unsigned","is_unsigned","iter","last","last","lt","lt","lt","lt","lt","lt","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","lt_eq","max","max_as_series","max_as_series","max_as_series","max_as_series","mean","median","median","median_as_series","median_as_series","merge_dtypes","min","min_as_series","min_as_series","min_as_series","min_as_series","mmap_slice","mul","multiply","multiply","multiply","multiply","multiply","multiply","multiply","n_unique","n_unique","name","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_from_index","new_from_index","new_from_index","new_from_index","new_from_index","new_from_vec","not","not","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","not_equal_missing","par_iter","par_iter","par_iter_indexed","par_iter_indexed","partial_cmp","partial_cmp","precision","precision","quantile","quantile","quantile_as_series","quantile_as_series","rand_bernoulli","remainder","remainder","remainder","remainder","remainder","remainder","remainder","reverse","reverse","reverse","reverse","reverse","scale","scale","set","set","set","set_at_idx","set_at_idx","set_at_idx","set_at_idx_with","set_at_idx_with","set_at_idx_with","set_fast_explode","set_inner_dtype","set_name","shift","shift","shift","shift","shift","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","shift_and_fill","sort","sort","sort","sort","sort","sort_with","sort_with","sort_with","sort_with","sort_with","std_as_series","std_as_series","string_cache","sub","subtract","subtract","subtract","subtract","subtract","subtract","subtract","sum","sum_as_series","sum_as_series","sum_as_series","sum_as_series","to_arrow","to_arrow","to_arrow","to_ascii","to_decimal","to_logical","to_logical_type","to_ndarray","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical_type","to_string","to_string","to_string","to_utf8","try_apply","try_apply","try_apply","try_apply","try_apply","try_apply_amortized","try_arr_from_iter","try_arr_from_iter_trusted","try_arr_from_iter_trusted","try_arr_from_iter_trusted_with_dtype","try_arr_from_iter_trusted_with_dtype","try_arr_from_iter_with_dtype","try_collect_arr","try_collect_arr","try_collect_arr_trusted","try_collect_arr_trusted","try_collect_arr_trusted_with_dtype","try_collect_arr_trusted_with_dtype","try_collect_arr_with_dtype","try_collect_arr_with_dtype","try_extract","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique","unique","unique","unique","unique","value","value","value_unchecked","value_within_range","values_iter","var_as_series","var_as_series","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vec_hash_combine","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_validity_typed","zip_and_apply_amortized","zip_with","zip_with","zip_with","zip_with","zip_with","CatIter","CategoricalChunked","CategoricalChunkedBuilder","Global","GlobalFinished","Local","Local","RevMapping","RevMappingBuilder","StrHashLocal","__clone_box","__clone_box","__clone_box","_merge_categorical_map","append","append_null","append_value","arg_sort","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drain_iter","drop","drop","drop","drop","drop","drop","dtype","eq","equivalent","equivalent","equivalent","exits","find","finish","fmt","from","from","from","from","from","from","from_cats_and_rev_map_unchecked","from_global_indices_unchecked","full_null","get","get_any_value","get_any_value_unchecked","get_categories","get_optional","get_rev_map","hash","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_series","is_empty","is_global","is_local","iter_str","len","len","logical","n_unique","name","new","next","same_src","set_lexical_ordering","size_hint","sort","sort_with","string_cache","to_local","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unique","uses_lexical_ordering","value_counts","vzip","vzip","vzip","vzip","vzip","vzip","StringCacheHolder","borrow","borrow_mut","default","deref","deref_mut","disable_string_cache","drop","drop","enable_string_cache","from","hold","init","into","try_from","try_into","type_id","using_string_cache","vzip","StringCacheHolder","disable_string_cache","enable_string_cache","using_string_cache","ArrowError","ArrowError","ColumnNotFound","ComputeError","Duplicate","Err","ErrString","External","ExternalFormat","InvalidArgumentError","InvalidOperation","Io","Io","NoData","NotYetImplemented","Ok","OutOfBounds","OutOfSpec","Overflow","PolarsError","PolarsResult","SchemaFieldNotFound","SchemaMismatch","ShapeMismatch","StringCacheMismatch","StructFieldNotFound","borrow","borrow","borrow_mut","borrow_mut","constants","deref","deref","deref","deref_mut","deref_mut","drop","drop","feature_gated","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_external_error","get_warning_function","init","init","into","into","map_err","polars_bail","polars_ensure","polars_err","polars_warn","set_warning_function","to_compute_err","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FALSE","LENGTH_LIMIT_MSG","TRUE","_boost_hash_combine","ahash","arrow","chrono","num","once_cell","rayon","regex","FloatFmt","Full","Mixed","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt_decimal","from","get_float_fmt","init","into","set_float_fmt","to_owned","try_from","try_into","type_id","vzip","Any","ArrowChunk","DataFrame","First","Ignore","Last","None","NullStrategy","PhysRecordBatchIter","Propagate","RecordBatchIter","UniqueKeepStrategy","__clone_box","__clone_box","__clone_box","_add_columns","_filter_seq","_select_impl","_select_impl_unchecked","_slice_and_realloc","_take_chunked_unchecked","_take_opt_chunked_unchecked","add","add","add","agg_chunks","align_chunks","apply","apply_at_idx","as_single_chunk","as_single_chunk_par","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone_into","clone_into","clone_into","column","columns","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","div","div","div","drop","drop","drop","drop","drop","drop","drop_in_place","drop_many","drop_many_amortized","drop_nulls","dtypes","empty","eq","eq","equivalent","equivalent","equivalent","estimated_size","explode","explode","explode_impl","extend","fields","fill_null","filter","find_idx_by_name","fmt","fmt","fmt","fmt","frame_equal","frame_equal_missing","frame_equal_schema","from","from","from","from","from","from","from_iter","from_rows","from_rows_and_schema","from_rows_iter_and_schema","get","get_column_names","get_column_names_owned","get_columns","get_columns_mut","get_row","get_row_amortized","get_row_amortized_unchecked","get_supertype","group_by","group_by","group_by_stable","group_by_with_series","hash_rows","head","height","hmax","hmean","hmin","hstack","hstack_mut","hstack_mut_unchecked","hsum","index","index","index","index","index","index","index","index","init","init","init","init","init","insert_at_idx","into","into","into","into","into","into_iter","into_iter","is_duplicated","is_empty","is_unique","iter","iter_chunks","iter_chunks_physical","max","mean","median","melt","melt2","min","mul","mul","mul","n_chunks","new","new_no_checks","next","next","null_count","partition_by","partition_by_stable","pipe","pipe_mut","pipe_with_args","pop","ptr_equal","quantile","rem","rem","rem","rename","replace","replace_at_idx","replace_or_add","reverse","row","sample_frac","sample_n","sample_n_literal","schema","select","select_at_idx","select_by_range","select_physical","select_series","select_with_schema","select_with_schema_unchecked","set_column_names","shape","shift","should_rechunk","shrink_to_fit","size_hint","size_hint","slice","slice_par","sort","sort_impl","sort_in_place","sort_with_options","std","sub","sub","sub","sum","tail","take","take_unchecked","to_ndarray","to_owned","to_owned","to_owned","to_string","top_k","transpose","try_apply","try_apply_at_idx","try_find_idx_by_name","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_rows_iter_and_schema","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unique","unique_impl","unique_stable","var","vstack","vstack_mut","vzip","vzip","vzip","vzip","vzip","width","with_column","with_column_and_schema","with_column_unchecked","with_row_count","with_row_count_mut","MeltArgs","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","id_vars","init","into","streamable","to_owned","try_from","try_into","type_id","value_name","value_vars","variable_name","vzip","BorrowIdxItem","Count","First","GroupBy","GroupByMethod","Groups","GroupsIdx","GroupsIndicator","GroupsProxy","GroupsProxyIter","GroupsProxyParIter","GroupsSlice","Idx","Idx","IdxItem","Implode","IntoGroupsProxy","Last","Max","Mean","Median","Min","NUnique","NanMax","NanMin","Quantile","Slice","Slice","SlicedGroups","Std","Sum","Var","__clone_box","__clone_box","__clone_box","__clone_box","agg_list","aggregations","all","apply","as_list_chunked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","df","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expr","first","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt_group_by_column","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_par_iter","get","get_groups","get_groups_mut","group_count","group_lengths","group_tuples","group_tuples","groups","idx_mut","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_idx","into_iter","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","is_empty","is_empty","is_sorted_flag","iter","iter","keys","keys_sliced","last","len","len","max","mean","median","min","n_unique","new","new","next","nth","par_apply","par_iter","par_iter","quantile","select","slice","sort","sort","std","sum","take_group_firsts","take_group_lasts","take_groups","take_groups_mut","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","unwrap_idx","unwrap_slice","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","groups","rolling","AggList","TakeExtremum","_agg_helper_idx","_agg_helper_idx_no_null","_agg_helper_slice","_agg_helper_slice_no_null","_rolling_apply_agg_window_no_nulls","_rolling_apply_agg_window_nulls","_slice_from_offsets","_use_rolling_kernels","agg_list","take_max","take_min","PhysicalAggExpr","evaluate","root_name","All","All","AnyValueBuffer","AnyValueBufferTrusted","Boolean","Boolean","Float32","Float32","Float64","Float64","Int32","Int32","Int64","Int64","Row","UInt32","UInt32","UInt64","UInt64","Utf8","Utf8","__clone_box","__clone_box","__clone_box","add","add_unchecked_borrowed_physical","add_unchecked_owned_physical","any_values_to_dtype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coerce_data_type","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","equivalent","fmt","from","from","from","from","from","infer_schema","init","init","init","into","into","into","into_series","into_series","new","new","new","reset","reset","rows_to_schema_first_non_null","rows_to_schema_supertypes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","concat_df_diagonal","concat_df_horizontal","cov","pearson_corr","BytesHash","FxHash","IdBuildHasher","IdHasher","IdxHash","VecHash","_HASHMAP_INIT_SIZE","__clone_box","_boost_hash_combine","_df_rows_to_hashes_threaded_vertical","_fx_hash","_hash_binary_array","as_u64","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","equivalent","finish","fmt","fmt","from","from","from","get_k","get_k","hash","hash","hash","idx","init","init","init","integer_hash","into","into","into","new","partition","populate_multiple_key_hashmap","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vec_hash","vec_hash","vec_hash_combine","vec_hash_combine","vzip","vzip","vzip","write","write_i32","write_i64","write_u32","write_u64","AsU64","as_u64","this_partition","Arc","ArrayCollectIterExt","ArrayRef","ArrowError","ArrowField","ArrowSchema","BinaryChunkedBuilder","BooleanChunkedBuilder","C","CatIter","CategoricalChunked","CategoricalChunkedBuilder","ChunkAggSeries","ChunkedArray","ChunkedBuilder","ChunkedCollectInferIterExt","ChunkedCollectIterExt","ColumnNotFound","ComputeError","DataFrame","Duplicate","DynArgs","Err","Fortran","FromData","FromDataBinary","FromDataUtf8","FxHash","Global","GlobalFinished","GroupsIdx","GroupsProxy","GroupsSlice","Higher","IdxArr","IdxSize","IndexOrder","IndexToUsize","IntoGroupsProxy","IntoSeries","IntoVec","InvalidOperation","Io","IsFloat","LargeBinaryArray","LargeListArray","LargeStringArray","LhsNumOps","Linear","ListBinaryChunkedBuilder","ListBooleanChunkedBuilder","ListBuilderTrait","ListFromIter","ListPrimitiveChunkedBuilder","ListUtf8ChunkedBuilder","Local","Local","Lower","MeltArgs","Midpoint","MutableBitmapExtension","NamedFrom","NamedFromOwned","Nearest","NewChunkedArray","NoData","None","NumOpsDispatch","NumOpsDispatchChecked","Ok","OutOfBounds","PolarsArray","PolarsError","PolarsIterator","PolarsObject","PolarsResult","PrimitiveChunkedBuilder","QuantileAggSeries","QuantileInterpolOptions","RevMapping","RevMappingBuilder","RollingOptionsFixedWindow","RollingQuantileParams","RollingVarParams","SchemaFieldNotFound","SchemaMismatch","Series","SeriesTrait","ShapeMismatch","SlicedArray","Some","StrHashLocal","StringCacheMismatch","StructFieldNotFound","UniqueKeepStrategy","Utf8ChunkedBuilder","ValueSize","VarAggSeries","VecHash","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","allocator","as_fd","as_ptr","as_raw_fd","as_ref","as_slice_mut","assume_init","assume_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","center","checked_div","checked_div_num","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","data_type","data_type","datatypes","ddof","decrement_strong_count","decrement_strong_count_in","default","default","default","default","default","default_arrays","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","df","downcast","downcast_unchecked","downgrade","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","filter","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_params","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data_default","from_data_unchecked_default","from_data_unchecked_default","from_iter","from_iter_binary_trusted_len","from_iter_bool_trusted_len","from_iter_primitive_trusted_len","from_iter_utf8_trusted_len","from_par_iter","from_raw","from_raw_in","from_vec","ge","get_mut","get_mut_unchecked","get_names","get_unchecked","get_values_size","gt","has_validity","hash","hash","hash","hash","increment_strong_count","increment_strong_count_in","index_of","indexes_to_usizes","init","init","init","init","init","init","init","init","init","interpol","into","into","into","into","into","into","into","into","into","into_inner","into_raw","into_series","is_f32","is_f64","is_float","is_nan","is_nullable","is_read_vectored","is_write_vectored","le","list","lt","make_mut","max_as_series","max_as_series","median_as_series","metadata","metadata","min_as_series","min_as_series","min_periods","name","ne","negative_to_usize","new","new","new","new_cyclic","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","null","partial_cmp","pin","pin_in","polars_bail","polars_ensure","polars_err","polars_warn","prob","prod_as_series","prod_as_series","provide","ptr_eq","quantile_as_series","read","read_buf","read_to_end","read_to_string","read_vectored","seek","set_bit_unchecked","slice","slice_typed","slice_typed_unchecked","source","source","std_as_series","string_cache","strong_count","sum_as_series","sum_as_series","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_pin","try_pin_in","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or_clone","utf8","var_as_series","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weak_count","weights","window_size","with_metadata","with_metadata","wrap_msg","write","write_vectored","FromData","FromDataBinary","FromDataUtf8","from_data_default","from_data_unchecked_default","from_data_unchecked_default","AnonymousBuilder","borrow","borrow_mut","convert_inner_type","deref","deref_mut","drop","finish","from","init","into","is_empty","new","offsets","push","push_empty","push_multiple","push_null","push_opt","take_offsets","try_from","try_into","type_id","vzip","MutableNullArray","as_any","as_box","as_mut_any","borrow","borrow_mut","data_type","default","deref","deref_mut","drop","extend_nulls","fmt","from","init","into","len","push_null","reserve","shrink_to_fit","try_from","try_into","type_id","validity","vzip","SlicedArray","slice_typed","slice_typed_unchecked","StringCacheHolder","disable_string_cache","enable_string_cache","using_string_cache","BinaryFromIter","Utf8FromIter","from_values_iter","from_values_iter","set_global_random_seed","IndexOfSchema","Schema","SchemaRef","__clone_box","borrow","borrow_mut","clone","clone_into","contains","default","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","from","from","from_iter","get","get_at_index","get_at_index_mut","get_field","get_full","get_names","get_names","index_of","index_of","init","insert_at_index","into","into_iter","is_empty","iter","iter_dtypes","iter_fields","iter_names","len","merge","new","new_inserting_at_index","remove","rename","set_dtype","set_dtype_at_index","shift_remove","shift_remove_index","to_arrow","to_owned","to_supertype","try_from","try_get","try_get_at_index","try_get_field","try_get_full","try_get_mut","try_index_of","try_into","type_id","vzip","with_capacity","with_column","Ascending","Ascending","ChunkCompare","ChunkCompare","Descending","Descending","IntoSeries","IsSorted","IsSorted","Not","Not","Series","SeriesIter","SeriesPhysIter","SeriesTrait","__clone_box","__clone_box","_sum_as_series","_sum_as_series","_try_from_arrow_unchecked","abs","add","add","add","add","append","arg_sort","arg_sort","arg_unique","arg_unique","arithmetic","array_ref","as_any","as_any","as_any_mut","as_any_mut","as_list","as_mut","as_ref","as_ref","as_single_ptr","as_single_ptr","as_single_ptr","binary","bitand","bitand","bitor","bitor","bitxor","bitxor","bool","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast_unchecked","categorical","ceil","checked_div","checked_div","checked_div","checked_div_num","chunk_lengths","chunks","chunks_mut","chunks_mut","clear","clone","clone","clone_inner","clone_into","clone_into","cummax","cummin","cumprod","cumsum","decimal","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","diff","div","div","div","div","dot","drop","drop","drop","drop_nulls","drop_nulls","dtype","dtype","eq","eq","equal","equal","equal","equal_missing","equal_missing","equal_missing","equivalent","equivalent","equivalent","estimated_size","explode","extend","extend_constant","f32","f64","field","field","fill_null","filter","filter_threaded","floor","fmt","fmt","fmt","fmt_list","from","from","from","from","from_any_values","from_any_values_and_dtype","from_arrow","from_chunks_and_dtype_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","full_null","get","get_data_ptr","get_flags","get_object","get_object","get_unchecked","get_unchecked","gt","gt","gt","gt_eq","gt_eq","gt_eq","has_validity","head","i16","i32","i64","i8","idx","implementations","implode","init","init","init","into","into","into","into_frame","into_iter","into_series","into_series","is_empty","is_empty","is_finite","is_infinite","is_nan","is_not_nan","is_not_null","is_null","is_series","is_series","is_series","is_sorted_flag","iter","kurtosis","len","limit","limit","list","lt","lt","lt","lt_eq","lt_eq","lt_eq","max","max_as_series","max_as_series","mean","mean","mean_as_series","median","median","median_as_series","median_as_series","min","min_as_series","min_as_series","mul","mul","mul","mul","n_chunks","n_chunks","n_unique","n_unique","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_from_index","new_null","next","not_equal","not_equal","not_equal","not_equal_missing","not_equal_missing","not_equal_missing","null","null_count","ops","phys_iter","product","quantile_as_series","quantile_as_series","rechunk","rem","rem","rem","rename","rename","reshape","reverse","rolling_map","rolling_map","round","sample_frac","sample_n","series_equal","series_equal_missing","set_sorted_flag","shift","shrink_to_fit","shrink_to_fit","shrink_to_fit","shuffle","size_hint","skew","slice","sort","sort_with","sort_with","std_as_series","std_as_series","str_value","strict_cast","sub","sub","sub","sub","sum","sum_as_series","tail","take","take_every","take_slice","take_slice_unchecked","take_slice_unchecked_threaded","take_threaded","take_unchecked","take_unchecked_from_slice","take_unchecked_threaded","tile","tile","to_arrow","to_float","to_owned","to_owned","to_physical_repr","to_string","try_add","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u16","u32","u64","u8","unique","unique","unique_counts","unique_stable","unpack","unstable","utf8","var_as_series","var_as_series","vzip","vzip","vzip","with_name","zip_with","LhsNumOps","NumOpsDispatch","NumOpsDispatchInner","Output","add","add_to","add_to","add_to","checked","div","divide","divide","divide","mul","multiply","multiply","multiply","rem","remainder","remainder","remainder","sub","subtract","subtract","subtract","NumOpsDispatchChecked","NumOpsDispatchCheckedInner","checked_div","checked_div","checked_div","checked_div_num","checked_div_num","checked_div_num","Drop","Ignore","NullBehavior","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","diff","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash","init","into","moment","to_owned","try_from","try_into","type_id","vzip","ArrayBox","UnstableSeries","__clone_box","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","deep_clone","deref","deref_mut","drop","from","init","into","new","swap","to_owned","try_from","try_into","type_id","vzip","with_array","Arg","CustomIterTools","CustomIterToolsSized","FromTrustedLenIterator","IntoVec","NoNull","TrustMyLength","TrustMyLength","Wrap","__clone_box","_set_partition_size","_to_physical_and_bit_repr","accumulate_dataframes_horizontal","accumulate_dataframes_vertical","accumulate_dataframes_vertical_unchecked","align_chunks_binary","align_chunks_ternary","all_equal","arg_sort_no_nulls","arrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","coalesce_nulls","coalesce_nulls_series","collect_reversed","collect_trusted","combine_validities_and","combine_validities_or","concat_df","concat_df_unchecked","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","ensure_sorted_arg","eq","equivalent","equivalent","equivalent","flatten","fold_options","from","from","from","from_iter","from_iter","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_par_iter","from_trusted_len_iter_rev","from_trusted_len_iter_rev","get_casting_failures","get_supertype","get_time_units","hash","init","init","init","into","into","into","into_inner","into_iter","into_vec","into_vec","into_vec","new","new","next","next_back","rayon","size_hint","slice_slice","split_ca","split_df_as_ref","to_owned","trust_my_length","try_from","try_from","try_from","try_get_supertype","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_unstable_series","cap_and_offsets","flatten_df_iter","flatten_par","flatten_series"],"q":[[0,"polars_core"],[37,"polars_core::chunked_array"],[419,"polars_core::chunked_array::arithmetic"],[427,"polars_core::chunked_array::builder"],[561,"polars_core::chunked_array::builder::list"],[697,"polars_core::chunked_array::collect"],[711,"polars_core::chunked_array::iterator"],[804,"polars_core::chunked_array::iterator::par"],[806,"polars_core::chunked_array::object"],[865,"polars_core::chunked_array::object::builder"],[888,"polars_core::chunked_array::object::registry"],[898,"polars_core::chunked_array::ops"],[1069,"polars_core::chunked_array::ops::arity"],[1085,"polars_core::chunked_array::ops::gather"],[1087,"polars_core::chunked_array::ops::sort"],[1092,"polars_core::chunked_array::ops::sort::arg_sort_multiple"],[1095,"polars_core::chunked_array::temporal"],[1097,"polars_core::chunked_array::temporal::conversion"],[1100,"polars_core::chunked_array::upstream_traits"],[1101,"polars_core::config"],[1102,"polars_core::datatypes"],[2385,"polars_core::datatypes::categorical"],[2529,"polars_core::datatypes::categorical::string_cache"],[2548,"polars_core::datatypes::string_cache"],[2552,"polars_core::error"],[2626,"polars_core::error::constants"],[2629,"polars_core::export"],[2637,"polars_core::fmt"],[2659,"polars_core::frame"],[2927,"polars_core::frame::explode"],[2952,"polars_core::frame::group_by"],[3187,"polars_core::frame::group_by::GroupsProxy"],[3189,"polars_core::frame::group_by::aggregations"],[3202,"polars_core::frame::group_by::expr"],[3205,"polars_core::frame::row"],[3297,"polars_core::functions"],[3301,"polars_core::hashing"],[3380,"polars_core::hashing::partition"],[3383,"polars_core::prelude"],[3834,"polars_core::prelude::default_arrays"],[3840,"polars_core::prelude::list"],[3864,"polars_core::prelude::null"],[3889,"polars_core::prelude::slice"],[3892,"polars_core::prelude::string_cache"],[3896,"polars_core::prelude::utf8"],[3900,"polars_core::random"],[3901,"polars_core::schema"],[3966,"polars_core::series"],[4348,"polars_core::series::arithmetic"],[4373,"polars_core::series::arithmetic::checked"],[4381,"polars_core::series::ops"],[4409,"polars_core::series::unstable"],[4433,"polars_core::utils"],[4539,"polars_core::utils::flatten"],[4543,"dyn_clone::sealed"],[4544,"num_traits"],[4545,"num_traits::cast"],[4546,"core::option"],[4547,"core::iter::traits::iterator"],[4548,"core::ops::function"],[4549,"core::marker"],[4550,"core::ops::function"],[4551,"core::iter::traits::double_ended"],[4552,"core::iter::traits::collect"],[4553,"core::fmt"],[4554,"core::fmt"],[4555,"rayon::iter"],[4556,"polars_arrow::trusted_len"],[4557,"core::marker"],[4558,"bitflags::iter"],[4559,"bitflags::iter"],[4560,"core::iter::adapters::map"],[4561,"num_traits::cast"],[4562,"core::convert"],[4563,"alloc::string"],[4564,"nano_arrow::bitmap::immutable"],[4565,"rayon::iter"],[4566,"ndarray::aliases"],[4567,"core::result"],[4568,"core::any"],[4569,"nano_arrow::array::primitive"],[4570,"alloc::borrow"],[4571,"core::clone"],[4572,"alloc::boxed"],[4573,"smartstring::config"],[4574,"smartstring"],[4575,"alloc::alloc"],[4576,"nano_arrow::array::boolean"],[4577,"nano_arrow::array::utf8"],[4578,"nano_arrow::array::binary"],[4579,"nano_arrow::array::list"],[4580,"core::any"],[4581,"nano_arrow::bitmap::utils::zip_validity"],[4582,"nano_arrow::offset"],[4583,"core::hash"],[4584,"core::error"],[4585,"core::cmp"],[4586,"polars_row::row"],[4587,"chrono::naive::datetime"],[4588,"core::fmt"],[4589,"nano_arrow::types"],[4590,"smartstring::alias"],[4591,"core::cmp"],[4592,"core::str::error"],[4593,"simdutf8::basic"],[4594,"alloc::collections"],[4595,"alloc::string"],[4596,"core::fmt"],[4597,"rayon::iter::plumbing"],[4598,"core::iter::adapters::copied"],[4599,"core::iter::adapters::zip"],[4600,"nano_arrow::types::native"],[4601,"core::borrow"],[4602,"hashbrown::map"],[4603,"core::hash"],[4604,"std::os::fd::owned"],[4605,"std::os::fd::owned"],[4606,"core::mem::maybe_uninit"],[4607,"core::cmp"],[4608,"alloc::sync"],[4609,"nano_arrow::scalar"],[4610,"std::fs"],[4611,"regex::error"],[4612,"alloc::ffi::c_str"],[4613,"core::ffi::c_str"],[4614,"std::ffi::os_str"],[4615,"std::ffi::os_str"],[4616,"alloc::borrow"],[4617,"core::hash"],[4618,"core::error"],[4619,"std::io"],[4620,"std::io"],[4621,"std::io"],[4622,"polars_arrow::trusted_len::rev"]],"d":["","","","","Enable the global string cache as long as the object is …","","","","The typed heart of every Series column.","","Data types supported by Polars.","","Disable and clear the global string cache.","Apply a macro on the Downcasted ChunkedArray’s of …","Apply a macro on the Downcasted ChunkedArray’s of …","Enable the global string cache.","","","","DataFrame module.","Functions","","Apply a macro on the Downcasted ChunkedArray’s","Apply a macro on the Series","Apply a macro on the Series","Everything you need to get started with Polars.","","","Type agnostic columnar data structure.","Testing utilities.","Check whether the global string cache is enabled.","","","","","","","","ChunkedArray","","","","","","","","","","","","","Convert all values to their absolute/positive value.","","","","","","","Returns whether all values in the array are <code>true</code>.","Get a flags value with all known bits set.","Returns whether all values in the column are <code>true</code>.","This is an iterator over a <code>ListChunked</code> that save …","Safety","Returns whether any of the values in the column are <code>true</code>.","Returns whether any of the values in the column are <code>true</code>.","Append in place. This is done by adding the chunks of <code>other</code>…","","Apply a closure <code>F</code> elementwise.","Apply a closure <code>F</code> elementwise.","","","","Cast a numeric array to another numeric data type and …","","","","","","Applies a function only to the non-null elements, …","Utility that reuses an string buffer to amortize …","Ignore the list indices and apply <code>func</code> to the inner type …","","","","","Panics","","Implementations of arithmetic operations on ChunkedArray’…","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","Implementations of the ChunkCast Trait.","","Cast a numeric array to another numeric data type and …","","","","Unique id representing the number of chunks","A reference to the chunks","A mutable reference to the chunks","","","","","Methods for collecting into a ChunkedArray.","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Contiguous slice","Whether all set bits in a source flags value are also set …","","","","","Get slices of the underlying arrow data. NOTE: null values …","","","","","","","","","The intersection of a source flags value with the …","","","","","","","","","","Get data type of <code>ChunkedArray</code>.","Get a flags value with all bits unset.","","","","","","Extend the memory backed by this array with the values …","The bitwise or (<code>|</code>) of the bits in each flags value.","","","Get the index of the first non null value in this …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","","","Create a new <code>ChunkedArray</code> from existing chunks.","Create a new <code>ChunkedArray</code> from existing chunks.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","Create a new ChunkedArray from an iterator.","Get a flags value with the bits of a flag with the given …","","","","","Create a new ChunkedArray by taking ownership of the Vec. …","","","","","","","","","Get the inner values as <code>Series</code>, ignoring the list offsets.","Get a hold to an object that can be formatted or …","Get a hold to an object that can be formatted or …","","Safety","","","","","","","Return if any the chunks in this <code>ChunkedArray</code> have a …","Get the head of the <code>ChunkedArray</code>","","","","","Get the inner data type of the list.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Whether all known bits in this flags value are set.","Check if ChunkedArray is empty.","Whether all bits in this flags value are unset.","","","","","Get a mask of the valid values.","Get a mask of the null values.","Returns true if contains a single chunk and has no null …","","Yield a set of contained flags values.","Yield a set of contained named flags values.","Get the buffer of bits representing null values","","","Get the index of the last non null value in this …","","Get the length of the ChunkedArray","Apply lhs / self","Apply lhs % self","Apply lhs - self","Take a view of top n elements","","","","","","","","","","","","","","","Create a temporary <code>ChunkedArray</code> from a slice.","Create a temporary <code>ChunkedArray</code> from a slice.","","","","","","","Name of the <code>ChunkedArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Nullify values in slice with an existing null bitmap","","Specialization that prevents an allocation prefer this …","Convert missing values to <code>NaN</code> values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","Count the null values.","","Traits for miscellaneous operations on ChunkedArray","","","","","","","","Create <code>ChunkedArray</code> with samples from a Bernoulli …","Create <code>ChunkedArray</code> with samples from a Normal …","Create <code>ChunkedArray</code> with samples from a Standard Normal …","Create <code>ChunkedArray</code> with samples from a Uniform …","","Get a reference to the field.","","","","","","The intersection of a source flags value with the …","Rename this <code>ChunkedArray</code>.","","Apply a rolling custom function. This is pretty slow …","Apply a rolling custom function. This is pretty slow …","Sample a fraction between 0.0-1.0 of this <code>ChunkedArray</code>.","Sample n datapoints from this <code>ChunkedArray</code>.","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","Set the ‘sorted’ bit meta info.","","","","Shrink the capacity of this array to fit its length.","Slice the array. The chunks are reallocated the underlying …","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Get the tail of the <code>ChunkedArray</code>","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","Traits and utilities for temporal data.","","Convert an <code>Utf8Chunked</code> to a <code>Series</code> of <code>DataType::Decimal</code>. …","Set the logical type of the <code>ListChunked</code>.","If all nested <code>Series</code> have the same length, a 2 dimensional …","If data is aligned in a single chunk and has no Null …","","","Safety","Convert to a <code>Vec</code> of <code>Option&lt;T::Native&gt;</code>.","Convert to a <code>Vec</code> but don’t return <code>Option&lt;T::Native&gt;</code> if …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","Applies a function only to the non-null elements, …","Applies a function to all elements, regardless of whether …","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","Series to <code>ChunkedArray&lt;T&gt;</code>","","Implementations of upstream traits for <code>ChunkedArray&lt;T&gt;</code>","Safety","","","","","","","Safety","Return this <code>ChunkedArray</code> with a new name.","Zip with a <code>ChunkedArray</code> then apply a binary function <code>F</code> …","","","","","","","","","","","","","","","","","","","","","","Appends a null slot into the builder","","","Appends a null slot into the builder","Appends a null slot into the builder","Appends a null slot into the builder","","","","","Appends a value of type <code>T</code> into the builder","","","Appends a value of type <code>T</code> into the builder","Appends a value of type <code>T</code> into the builder","Appends a value of type <code>T</code> into the builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new UtfChunkedBuilder","","","","","Create a new UtfChunkedBuilder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends from an iterator over values","Appends from an iterator over values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The no null iterator for a <code>BooleanArray</code>","","A <code>PolarsIterator</code> is an iterator over a <code>ChunkedArray</code> which …","Wrapper struct to convert an iterator of type <code>T</code> into one …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","create a new iterator","create a new iterator","create a new iterator","create a new iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Values need to implement this so that they can be stored …","Trimmed down object safe polars object","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Check validity","Check validity","","Returns an iterator of <code>Option&lt;&amp;T&gt;</code> over every element of …","","","","This is a heap allocated utility that can be used to …","Sets the validity of this array.","","","","","","","","","","","","","","This should be used as type information. Consider this a …","","Get a value at a certain index location","","Get a value at a certain index location","Get a reference to the underlying data","","","","Returns this array with a new validity.","","","","","Appends a null slot into the builder","","Appends a value of type <code>T</code> into the builder","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","This trait can be registered, after which that global …","","","Append a <code>null</code> value.","Append a <code>T</code> of <code>ObjectChunked&lt;T&gt;</code> made generic via the <code>Any</code> …","","","","","Take the current state and materialize as a <code>Series</code> the …","previous value in array","Aggregation operations.","","Fastest way to do elementwise operations on a …","Apply kernels on the arrow array chunks in a ChunkedArray.","","Cast <code>ChunkedArray&lt;T&gt;</code> to <code>ChunkedArray&lt;N&gt;</code>","Compare <code>Series</code> and <code>ChunkedArray</code>’s and get a <code>boolean</code> mask …","","Create a new ChunkedArray filled with values at that index.","Explode/ flatten a List or Utf8 Series","Replace None values with a value","Filter values by a boolean mask.","Fill a ChunkedArray with one value.","","Quantile and median aggregation.","Reverse a <code>ChunkedArray&lt;T&gt;</code>","This differs from ChunkWindowCustom and ChunkWindow by not …","Create a <code>ChunkedArray</code> with new values by index or by …","","Shift the values of a <code>ChunkedArray</code> by a number of periods.","Sort operations on <code>ChunkedArray</code>.","","","Get unique values in a <code>ChunkedArray</code>","Variance and standard deviation aggregation.","Combine two <code>ChunkedArray</code> based on some predicate.","","","next value in array","","Mask the first unique values as <code>true</code>","Mask the last unique values as <code>true</code>","","maximum value in array","replace with the maximum value of that data type","mean value of array","minimal value in array","replace with the minimal value of that data type","No value.","replace with the value one","Some value of type <code>T</code>.","","","replace with the value zero","","","","Apply a closure elementwise including null values.","Apply kernel and return result as a new ChunkedArray.","Apply a kernel that outputs an array of different type.","Apply a closure elementwise and write results to a mutable …","Apply a closure elementwise. This is fastest when the null …","Retrieve the indexes needed to sort this array.","Retrieve the indexes need to sort this and the other …","Get first index of the unique values in a <code>ChunkedArray</code>. …","","","","","","","","Cast a <code>ChunkedArray</code> to <code>DataType</code>","Does not check if the cast is a valid one and may …","","","","","","","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Get an array with the cumulative sum computed at every …","","","","","","","","","","","","","","Check for equality.","Check for equality where <code>None == None</code>.","","","","","","","Replace None values with a give value <code>T</code>.","Filter values in the ChunkedArray with a boolean mask.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a ChunkedArray with a single value.","","","Get a single value. Beware this is slow.","Get a single value. Beware this is slow. If you need to …","Greater than comparison.","Greater than or equal comparison.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Less than comparison.","Less than or equal comparison","","Returns the maximum value in the array, according to the …","Returns the mean value in the array. Returns <code>None</code> if the …","Returns the mean value in the array. Returns <code>None</code> if the …","","","","Number of unique values in the <code>ChunkedArray</code>","Create a new ChunkedArray filled with values at that index.","Check for inequality.","Check for inequality where <code>None == None</code>.","","","Aggregate a given quantile of the ChunkedArray. Returns …","Return a reversed version of this array.","","Set the values where the mask evaluates to <code>true</code> to some …","Set the values at indexes <code>idx</code> to some optional value …","Set the values at indexes <code>idx</code> by applying a closure to …","","Shift the values by a given period and fill the parts that …","","Returned a sorted <code>ChunkedArray</code>.","","Compute the standard deviation of this ChunkedArray/Series.","Aggregate the sum of the ChunkedArray. Returns <code>None</code> if not …","Gather values from ChunkedArray by index.","Gather values from ChunkedArray by index.","","","","","","","","","","","","","","","Get unique values of a ChunkedArray","Compute the variance of this ChunkedArray/Series.","","","","","Create a new ChunkedArray with values from self where the …","","","","","Applies a kernel that produces <code>Array</code> types.","","","","Applies a kernel that produces <code>Array</code> types.","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","Applies a kernel that produces <code>Array</code> types.","","","Applies a kernel that produces <code>ArrayRef</code> of the same type.","","","","","","","used a lot, ensure there is a single impl","","","","","","","","","","Local <code>AsRef&lt;T&gt;</code> trait to circumvent the orphan rule.","","","","","","","The set of supported logical types in this crate.","The time units defined in Arrow.","","","","Opaque binary data of variable length whose offsets are …","","","","A binary true or false.","","<code>true</code> and <code>false</code>.","","","","","","","","","[ChunkIdx, DfIdx]","","A 32-bit date representing the elapsed time since UNIX …","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","","A 64-bit date representing the elapsed time since UNIX …","","A 128-bit fixed point decimal number.","Fixed point decimal type optional precision and …","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","","Measure of elapsed time. This elapsed time is a physical …","","Extension type.","Characterizes the name and the <code>DataType</code> of a column.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with a fixed number of …","","An 16-bit float","A 32-bit floating point number.","","A <code>f32</code>","","","A 64-bit floating point number.","","A <code>f64</code>","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","","","","","The type used by polars to index data.","","","","","A 16-bit integer number.","","An <code>i16</code>","","","A 32-bit integer number.","","An <code>i32</code>","","","A 64-bit integer number.","","An <code>i64</code>","","","An 8-bit integer number.","","An <code>i8</code>","","","A “calendar” interval modeling elapsed time that takes …","Opaque binary data of variable length whose offsets are …","A list of some logical data type whose offsets are …","A variable-length UTF-8 encoded string whose offsets are …","Nested type, contains arrays that are filled with one of …","A nested list with a variable size in each row","A list of some logical data type whose offsets are …","","","Utf8Array: caches the string values","Utf8Array: caches the string values","Maps a logical type to a a chunked array implementation of …","","A nested type that is represented as","Time in microseconds.","","Time in milliseconds.","","Time in nanoseconds.","","","","","","Null type","","Can be used to fmt and implements Any, so can be …","A generic type that can be used in a <code>Series</code> &amp;’static str …","","","","","","","","This hashmap has the uses an IdHasher","","","Safety","","","","","","","Time in seconds.","","","A nested <code>DataType</code> with a given number of <code>Field</code>s.","","A 64-bit time representing the elapsed time since midnight …","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","","","","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer number.","","An <code>u16</code>","","","An unsigned 32-bit integer number.","","An <code>u32</code>","","","An unsigned 64-bit integer number.","","An <code>u64</code>","","","An unsigned 8-bit integer number.","","An <code>u8</code>","","","A nested datatype that can represent slots of differing …","","A UTF8 encoded string type.","String data","A variable-length UTF-8 encoded string whose offsets are …","","An UTF8 encoded string type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns whether all values in the array are <code>true</code>.","Returns whether all values in the column are <code>true</code>.","This is an iterator over a <code>ListChunked</code> that save …","Safety","Returns whether any of the values in the column are <code>true</code>.","Returns whether any of the values in the column are <code>true</code>.","","","","","","Apply a closure <code>F</code> elementwise.","Apply a closure <code>F</code> elementwise.","","","","","","","","","","","Utility that reuses an string buffer to amortize …","Ignore the list indices and apply <code>func</code> to the inner type …","","","","","","Apply a closure <code>F</code> elementwise.","","","","","","","","","","","Panics","Panics","Panics","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the <code>Field</code> datatype.","","","","","","","","","Returns a reference to the <code>Field</code> datatype.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get data type of <code>ChunkedArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","Create a new ChunkedArray from an iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets <code>AnyValue</code> from <code>LogicalType</code>","Gets <code>AnyValue</code> from <code>LogicalType</code>","","","","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the inner values as <code>Series</code>, ignoring the list offsets.","Get a hold to an object that can be formatted or …","Get a hold to an object that can be formatted or …","Get a reference to the <code>&amp;str</code> contained within <code>AnyValue</code>.","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the inner data type of the list.","Get the inner data type of a nested type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Try to coerce to an AnyValue with static lifetime. This …","Check if this <code>DataType</code> is a basic floating point type …","Check if this <code>DataType</code> is an integer.","Check if this <code>DataType</code> is a logical type","","","Check if this <code>DataType</code> is a basic numeric type (excludes …","Check if datatype is a primitive type. By that we mean that","","","Check if this <code>DataType</code> is a temporal type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a temporary <code>ChunkedArray</code> from a slice.","","","","","","","","","","","Returns a reference to the <code>Field</code> name.","","","","","","","","","","","","","","","","","","Creates a new <code>Field</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Only implemented for the same types and physical types!","","","","","","","","Create <code>ChunkedArray</code> with samples from a Bernoulli …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the <code>Field</code> name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to an Arrow data type.","Converts the <code>Field</code> to an <code>arrow::datatypes::Field</code>.","","","Convert an <code>Utf8Chunked</code> to a <code>Series</code> of <code>DataType::Decimal</code>. …","Set the logical type of the <code>ListChunked</code>.","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","If all nested <code>Series</code> have the same length, a 2 dimensional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to the physical data type","the <code>PhysicalType</code> of this <code>DataType</code>.","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Zip with a <code>ChunkedArray</code> then apply a binary function <code>F</code> …","","","","","","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","Utf8Array: caches the string values","Utf8Array: caches the string values","","","","","","","","","","","Retrieve the indexes needed to sort this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends all the values in a single lock of the global …","","","","","","","","","","","","Check if this categorical already exists","<code>str</code> to <code>Categorical</code>","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>CategoricalChunked</code> from an array of <code>idx</code> and an …","Create a <code>CategoricalChunked</code> from a categorical indices. …","","<code>Categorical</code> to <code>str</code>","","","Get the categories in this <code>RevMapping</code>","","Get a reference to the mapping of categorical types to the …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create an <code>[Iterator]</code> that iterates over the <code>&amp;str</code> values of …","Get the length of the <code>RevMapping</code>","","Get a reference to the physical array (the categories).","","","","","Check if the categoricals are created under the same …","","","Returned a sorted <code>ChunkedArray</code>.","","","Convert a categorical column to its local representation.","","","","","","","","","","","","","","","","","","","","","","","Return whether or not the <code>CategoricalChunked</code> uses the …","","","","","","","","Enable the global string cache as long as the object is …","","","","","","Disable and clear the global string cache.","","","Enable the global string cache.","Returns the argument unchanged.","Hold the StringCache","","Calls <code>U::from(self)</code>.","","","","Check whether the global string cache is enabled.","","Enable the global string cache as long as the object is …","Disable and clear the global string cache.","Enable the global string cache.","Check whether the global string cache is enabled.","Enum with all errors in this crate.","","","","","Contains the error value","","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","","","Wrapper for IO errors","","Returned when functionality is not yet available.","Contains the success value","","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","","","","","","","","","","","","Constant that help with creating error messages dependent …","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Wraps an external error in an <code>Error</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the function that will be called by the <code>polars_warn!</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Keep any of the unique rows This allows more optimizations","","A contiguous growable collection of <code>Series</code> that have the …","Keep the first unique row.","","Keep the last unique row.","Keep None of the unique rows.","","","","","","","","","","Same as <code>filter</code> but does not parallelize.","","","","Safety","Safety","","","","Aggregate all chunks to contiguous memory.","Ensure all the chunks in the <code>DataFrame</code> are aligned.","Apply a closure to a column. This is the recommended way …","Apply a closure to a column at index <code>idx</code>. This is the …","Aggregate all the chunks in the DataFrame to a single …","Aggregate all the chunks in the DataFrame to a single …","","","","","","","","","","","","","","","","","","Select a single column by name.","Selected multiple columns by name.","","","","","","","","","","","","","Summary statistics for a DataFrame. Only summarizes …","","","","","","","","","Drop a column by name. This is a pure method and will …","Remove a column by name and return the column removed.","Drop columns that are in <code>names</code>.","Drop columns that are in <code>names</code> without allocating a <code>HashSet</code>…","Return a new <code>DataFrame</code> where all null values are dropped.","Get the data types of the columns in the <code>DataFrame</code>.","Creates an empty <code>DataFrame</code> usable in a compile time …","","","","","","Returns an estimation of the total (heap) allocated size …","","Explode <code>DataFrame</code> to long format by exploding a column …","","Extend the memory backed by this <code>DataFrame</code> with the values …","Get a reference to the schema fields of the <code>DataFrame</code>.","Replace None values with one of the following strategies:","Take the <code>DataFrame</code> rows by a boolean mask.","Get column index of a <code>Series</code> by name.","","","","","Check if <code>DataFrame</code>s are equal. Note that <code>None == None</code> …","Check if all values in <code>DataFrame</code>s are equal where …","Check if <code>DataFrame</code>’ schemas are equal.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Panics","Create a new <code>DataFrame</code> from rows. This should only be used …","Create a new <code>DataFrame</code> from rows. This should only be used …","Create a new <code>DataFrame</code> from an iterator over rows. This …","Get a row in the <code>DataFrame</code>. Beware this is slow.","Example","Get the <code>Vec&lt;String&gt;</code> representing the column names.","Get a reference to the <code>DataFrame</code> columns.","Get mutable access to the underlying columns.","Get a row from a <code>DataFrame</code>. Use of this is discouraged as …","Amortize allocations by reusing a row. The caller is …","Amortize allocations by reusing a row. The caller is …","Get the supertype of the columns in this DataFrame","","Group DataFrame using a Series column.","Group DataFrame using a Series column. The groups are …","","Hash and combine the row values","Get the head of the <code>DataFrame</code>.","Get the height of the <code>DataFrame</code> which is the number of …","Aggregate the column horizontally to their max values.","Aggregate the column horizontally to their mean values.","Aggregate the column horizontally to their min values.","Add multiple <code>Series</code> to a <code>DataFrame</code>. The added <code>Series</code> are …","Add multiple <code>Series</code> to a <code>DataFrame</code>. The added <code>Series</code> are …","Add columns horizontally.","Aggregate the column horizontally to their sum values.","","","","","","","","","","","","","","Insert a new column at a given index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Get a mask of all the duplicated rows in the <code>DataFrame</code>.","Check if the <code>DataFrame</code> is empty.","Get a mask of all the unique rows in the <code>DataFrame</code>.","Iterator over the columns as <code>Series</code>.","Iterator over the rows in this <code>DataFrame</code> as Arrow …","Iterator over the rows in this <code>DataFrame</code> as Arrow …","Aggregate the columns to their maximum values.","Aggregate the columns to their mean values.","Aggregate the columns to their median values.","Unpivot a <code>DataFrame</code> from wide to long format.","Similar to melt, but without generics. This may be easier …","Aggregate the columns to their minimum values.","","","","The number of chunks per column","Create a DataFrame from a Vector of Series.","Create a new <code>DataFrame</code> but does not check the length or …","","","Create a new <code>DataFrame</code> that shows the null counts per …","Split into multiple DataFrames partitioned by groups","Split into multiple DataFrames partitioned by groups Order …","Pipe different functions/ closure operations that work on …","Pipe different functions/ closure operations that work on …","Pipe different functions/ closure operations that work on …","Removes the last <code>Series</code> from the <code>DataFrame</code> and returns it, …","Checks if the Arc ptrs of the <code>Series</code> are equal","Aggregate the columns to their quantile values.","","","","Rename a column in the <code>DataFrame</code>.","Replace a column with a <code>Series</code>.","Replace column at index <code>idx</code> with a <code>Series</code>.","Replace or update a column. The difference between this …","Get a <code>DataFrame</code> with all the columns in reversed order.","","Sample a fraction between 0.0-1.0 of this <code>DataFrame</code>.","Sample n datapoints from this <code>DataFrame</code>.","","Get the <code>DataFrame</code> schema.","Select column(s) from this <code>DataFrame</code> and return a new …","Select a <code>Series</code> by index.","Select column(s) from this <code>DataFrame</code> by range and return a …","","Select column(s) from this <code>DataFrame</code> and return them into …","Select with a known schema.","Select with a known schema. This doesn’t check for …","Set the column names.","Get (height, width) of the <code>DataFrame</code>.","Shift the values by a given period and fill the parts that …","Returns true if the chunks of the columns do not align and …","Shrink the capacity of this DataFrame to fit its length.","","","Slice the <code>DataFrame</code> along the rows.","","Return a sorted clone of this <code>DataFrame</code>.","This is the dispatch of Self::sort, and exists to reduce …","Sort <code>DataFrame</code> in place by a column.","Sort the <code>DataFrame</code> by a single column with extra options.","Aggregate the columns to their standard deviation values.","","","","Aggregate the columns to their sum values.","Get the tail of the <code>DataFrame</code>.","Take <code>DataFrame</code> rows by index values.","Safety","Create a 2D <code>ndarray::Array</code> from this <code>DataFrame</code>. This …","","","","","","Transpose a DataFrame. This is a very expensive operation.","Apply a closure that may fail to a column. This is the …","Apply a closure that may fail to a column at index <code>idx</code>. …","Get column index of a <code>Series</code> by name.","","","","","","","","Create a new <code>DataFrame</code> from an iterator over rows. This …","","","","","","","","","","","Unstable distinct. See <code>DataFrame::unique_stable</code>.","","Drop duplicate rows from a <code>DataFrame</code>. <em>This fails when </em>…","Aggregate the columns to their variation values.","Concatenate a <code>DataFrame</code> to this <code>DataFrame</code> and return as …","Concatenate a <code>DataFrame</code> to this <code>DataFrame</code>","","","","","","Get the width of the <code>DataFrame</code> which is the number of …","Add a new column to this <code>DataFrame</code> or replace an existing …","Add a new column to this <code>DataFrame</code> or replace an existing …","Adds a column to the <code>DataFrame</code> without doing any checks on …","Add a new column at index 0 that counts the rows.","Add a row count in place.","Arguments for <code>[DataFrame::melt]</code> function","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Whether the melt may be done in the streaming engine This …","","","","","","","","","","","","Returned by a group_by operation on a DataFrame. This …","","","Indexes of the groups, the first index is stored …","","","","","Every group is indicated by an array where the","","","","","Used to create the tuples for a group_by operation.","","","","","","","","","","","Slice is always sorted in ascending order.","","","","","","","","","Aggregate the groups of the group_by operation into lists.","","","Apply a closure over the groups as a new <code>DataFrame</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregate grouped series and compute the number of values …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregate grouped <code>Series</code> and find the first value per …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get the internal representation of the GroupBy operation. …","Get the internal representation of the GroupBy operation. …","","","Create the tuples need for a group_by operation. * The …","Create the tuples need for a group_by operation. * The …","Get the group_by group indexes.","Get a mutable reference to the <code>GroupsIdx</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Aggregate grouped <code>Series</code> and return the last value per …","","","Aggregate grouped series and compute the maximum value per …","Aggregate grouped series and compute the mean per group.","Aggregate grouped <code>Series</code> and determine the median per …","Aggregate grouped series and compute the minimal value per …","Aggregate grouped <code>Series</code> by counting the number of unique …","","","","","Apply a closure over the groups as a new <code>DataFrame</code> in …","","","Aggregate grouped <code>Series</code> and determine the quantile per …","Select the column(s) that should be aggregated. You can …","","","","Aggregate grouped <code>Series</code> and determine the standard …","Aggregate grouped series and compute the sum per group.","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the <code>GroupsIdx</code>.","Get a reference to the <code>GroupsSlice</code>.","Aggregate grouped <code>Series</code> and determine the variance per …","","","","","","","","","","","","","Helper that combines the groups into a parallel iterator …","Same helper as <code>_agg_helper_idx</code> but for aggregations that …","","","","","","","Safety","","","","","","","","","An <code>AnyValueBuffer</code> that should be used when we trust the …","","","","","","","","","","","","","","","","","","","","","","Safety","Will add the <code>AnyValue</code> into <code>Self</code> and unpack as the physical …","","","","","","","","","","","","","","Coerces a slice of datatypes into a single supertype.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Infer schema from rows and set the first no null type as …","Infer schema from rows and set the supertypes of the …","","","","","","","","","","","","","","","","Concat <code>DataFrame</code>s diagonally. Concat diagonally thereby …","Concat <code>DataFrame</code>s horizontally. Concat horizontally and …","Compute the covariance between two columns.","Compute the pearson correlation between two columns.","Contains a ptr to the string slice an the precomputed hash …","Ensure that the same hash is used as with <code>VecHash</code>.","","","Contains an idx of a row in a DataFrame and the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Populate a multiple key hashmap with row indexes. Instead …","","","","","","","","","","","Compute the hash for all values in the array.","Compute the hash for all values in the array.","","","","","","","","","","","","","For partitions that are a power of 2 we can use a bitshift …","A thread-safe reference-counting pointer. ‘Arc’ stands …","","","","Represents Arrow’s metadata of a “column”.","An ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.","","","","","","","Aggregations that return <code>Series</code> of unit length. Those can …","","","","","","","","","","Contains the error value","","","","","","Hashmap: maps the indexes from the global …","Hashmap: maps the indexes from the global …","","","","","","The type used by polars to index data.","","","","","","","","Safety","","","","","","","","","","","","Utf8Array: caches the string values","Utf8Array: caches the string values","","","","","","","","","","No value.","","","Contains the success value","","","","","","","","","","","","","","","","","","","","Utility trait to slice concrete arrow arrays whilst …","Some value of type <code>T</code>.","","","","","","","","","","","","","","","","","Returns a reference to the underlying allocator.","","Provides a raw pointer to the data.","","","","Converts to <code>Arc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","","","","","","","","","","","","","","","","","","","","","Set the labels at the center of the window.","Checked integer division. Computes self / rhs, returning …","","","","","Makes a clone of the <code>Arc</code> pointer.","","","","","","","","","","","","","Comparison for two <code>Arc</code>s.","","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","","","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","","","","","","Drops the <code>Arc</code>.","","","","","","Equality for two <code>Arc</code>s.","","","","","","","","","","","","","","","","","","","","","The fields composing this schema.","Returns a new <code>Schema</code> with a subset of all fields whose …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Allocate a reference-counted slice and move <code>v</code>’s items …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Converts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Create an atomically reference-counted pointer from a …","Copies the string into a newly allocated Arc&lt;OsStr&gt;.","Returns the argument unchanged.","Converts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …","Converts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.","","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","Move a boxed object to a new, reference-counted allocation.","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Converts an atomically reference-counted string slice into …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Safety","Safety","Takes each element in the <code>Iterator</code> and collects it into an …","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","Create a list-array from an iterator. Used in group_by …","","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Constructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.","Initialize by name and values.","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Arc</code>, without …","","","Useful for a Utf8 or a List to get underlying value size. …","Greater-than comparison for two <code>Arc</code>s.","","","","","","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value, if the <code>Arc</code> has exactly one strong …","Consumes the <code>Arc</code>, returning the wrapped pointer.","","","","","","Its nullability","","","‘Less than or equal to’ comparison for two <code>Arc</code>s.","","Less-than comparison for two <code>Arc</code>s.","Makes a mutable reference into the given <code>Arc</code>.","Get the max of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the max of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the median of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Additional custom (opaque) metadata.","Optional metadata.","Get the min of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the min of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Amount of elements in the window that should be filled …","Its name","Inequality for two <code>Arc</code>s.","Translate the negative index to an offset.","Initialize by name and values.","Constructs a new <code>Arc&lt;T&gt;</code>.","Creates a new <code>Field</code>.","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents in the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","","Partial comparison for two <code>Arc</code>s.","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …","","","","","","Get the product of the <code>ChunkedArray</code> as a new <code>Series</code> of …","Get the product of the <code>ChunkedArray</code> as a new <code>Series</code> of …","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Get the quantile of the <code>ChunkedArray</code> as a new <code>Series</code> of …","","","","","","","Safety","","Slices this <code>Array</code>.","Slices the <code>Array</code>.","","","Get the standard deviation of the <code>ChunkedArray</code> as a new …","","Gets the number of strong (<code>Arc</code>) pointers to this …","Get the sum of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","Get the sum of the <code>ChunkedArray</code> as a new <code>Series</code> of length …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Arc</code> with uninitialized contents, in the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","","","","","","","","If we have the only reference to <code>T</code> then unwrap it. …","","Get the variance of the <code>ChunkedArray</code> as a new <code>Series</code> of …","","","","","","","","","","Gets the number of <code>Weak</code> pointers to this allocation.","An optional slice with the same length as the window that …","The length of the window.","Creates a new <code>Field</code> with metadata.","Attaches a <code>Metadata</code> to <code>Schema</code>","","","","","","","","Safety","Safety","","","","Cast null arrays to inner type and ensure that all offsets …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Utility trait to slice concrete arrow arrays whilst …","Slices this <code>Array</code>.","Slices the <code>Array</code>.","Enable the global string cache as long as the object is …","Disable and clear the global string cache.","Enable the global string cache.","Check whether the global string cache is enabled.","","","","","","This trait exists to be unify the API of polars Schema and …","A map from field/column name (<code>String</code>) to the type of that …","","","","","","","Whether the schema contains a field named <code>name</code>","","","","","","","","","","Returns the argument unchanged.","","","","Get a reference to the dtype of the field named <code>name</code>, or …","Get references to the name and dtype of the field at <code>index</code>","Get mutable references to the name and dtype of the field …","Look up the name in the schema and return an owned <code>Field</code> …","Return all data about the field named <code>name</code>: its index in …","Get a vector of all column names.","","Get the index of a column by name.","","","Insert a field with <code>name</code> and <code>dtype</code> at the given <code>index</code> into …","Calls <code>U::from(self)</code>.","","","Iterates over the <code>(&amp;name, &amp;dtype)</code> pairs in this schema","Iterates over references to the dtypes in this schema","Iterates the <code>Field</code>s in this schema, constructing them anew …","Iterates over references to the names in this schema","The number of fields in the schema","Merge <code>other</code> into <code>self</code>","Create a new, empty schema","Create a new schema from this one, inserting a field with …","Swap-remove a field by name and, if the field existed, …","Rename field <code>old</code> to <code>new</code>, and return the (owned) old name","Change the field named <code>name</code> to the given <code>dtype</code> and return …","Change the field at the given index to the given <code>dtype</code> and …","Remove a field by name, preserving order, and, if the …","Remove a field by name, preserving order, and, if the …","Convert self to <code>ArrowSchema</code> by cloning the fields","","Take another <code>Schema</code> and try to find the supertypes between …","","Get a reference to the dtype of the field named <code>name</code>, or …","","Look up the name in the schema and return an owned <code>Field</code> …","Return all data about the field named <code>name</code>: its index in …","Get a mutable reference to the dtype of the field named …","","","","","Create a new, empty schema with capacity","Insert a new column in the <code>Schema</code>","","","","","","","Used to convert a <code>ChunkedArray</code>, <code>&amp;dyn SeriesTrait</code> and <code>Series</code>","","","","","Series","","","","","","Get the sum of the Series as a new Series of length 1.","Get the sum of the Series as a new Series of length 1.","Create a new Series without checking if the inner dtype of …","convert numerical values to their absolute value","","","","","Append in place. This is done by adding the chunks of <code>other</code>…","Retrieve the indexes needed for a sort.","Retrieve the indexes needed for a sort.","Get first indexes of unique values.","Get first indexes of unique values.","","Returns a reference to the Arrow ArrayRef","Get a hold to self as <code>Any</code> trait reference. Only …","Get a hold to self as <code>Any</code> trait reference. Only …","Get a hold to self as <code>Any</code> trait reference. Only …","Get a hold to self as <code>Any</code> trait reference. Only …","Packs every element into a list.","","","","Rechunk and return a pointer to the start of the Series. …","Rechunk and return a pointer to the start of the Series. …","Only implemented for numeric types","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Binary]</code>","","","","","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Boolean]</code>","","","","","","","","Cast <code>[Series]</code> to another <code>[DataType]</code>.","Cast from physical to logical types without any checks on …","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Categorical]</code>","Ceil underlying floating point array to the highest …","","","","","Get the lengths of the underlying chunks","Underlying chunks.","Underlying chunks.","Safety","","","","Clone inner ChunkedArray and wrap in a new Arc","","","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Get an array with the cumulative sum computed at every …","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Decimal]</code>","","","","","","","","","","","","","","","","","","Drop all null values and return a new Series.","Drop all null values and return a new Series.","Get datatype of series.","Get datatype of series.","","","","","Create a boolean mask by checking for equality.","","","Create a boolean mask by checking for equality.","","","","Returns an estimation of the total (heap) allocated size …","Explode a list Series. This expands every item to a new …","Extend the memory backed by this array with the values …","Extend with a constant value.","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Float32]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Float64]</code>","Get field (used in schema)","Get field (used in schema)","Replace None values with one of the following strategies:","Filter by boolean mask. This operation clones data.","Filter by boolean mask. This operation clones data.","Floor underlying floating point array to the lowest …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Takes chunks and a polars datatype and constructs the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a single value by index. Don’t use this operation …","Get a pointer to the underlying data of this <code>Series</code>. Can …","","Get the value at this index as a downcastable Any trait …","Get the value at this index as a downcastable Any trait …","Get a single value by index. Don’t use this operation …","Get a single value by index. Don’t use this operation …","Create a boolean mask by checking if self &gt; rhs.","","","","Create a boolean mask by checking if self &gt;= rhs.","","Return if any the chunks in this <code>[ChunkedArray]</code> have a …","Get the head of the Series.","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int16]</code>","Unpack to <code>ChunkedArray</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int64]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Int8]</code>","","","Convert the values of this Series to a ListChunked with a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Check if Series is empty.","Check if Series is empty.","Check if numeric value is finite","Check if float value is infinite","Check if float value is NaN (note this is different than …","Check if float value is NaN (note this is different than …","Get a mask of the non-null values.","Get a mask of the null values.","","","","","iterate over <code>Series</code> as <code>AnyValue</code>.","Compute the kurtosis (Fisher or Pearson) of a dataset.","Get length of series.","Take <code>num_elements</code> from the top as a zero copy view.","Take <code>num_elements</code> from the top as a zero copy view.","Unpack to <code>ChunkedArray</code> of dtype list","Create a boolean mask by checking if self &lt; rhs.","","","","","Create a boolean mask by checking if self &lt;= rhs.","Returns the maximum value in the array, according to the …","Get the max of the Series as a new Series of length 1.","Get the max of the Series as a new Series of length 1.","Returns the mean value in the array Returns an option …","Returns the mean value in the array Returns an option …","","Returns the median value in the array Returns an option …","Returns the median value in the array Returns an option …","Get the median of the Series as a new Series of length 1.","Get the median of the Series as a new Series of length 1.","Returns the minimum value in the array, according to the …","Get the min of the Series as a new Series of length 1.","Get the min of the Series as a new Series of length 1.","","","","","Number of chunks in this Series","Number of chunks in this Series","Get unique values in the Series.","Get unique values in the Series.","Name of series.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new empty Series.","Create a new Series filled with values from the given …","","","","","Create a boolean mask by checking for inequality.","","Create a boolean mask by checking for inequality.","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Null]</code>","Count the null values.","","","Get the product of an array.","Get the quantile of the ChunkedArray as a new Series of …","Get the quantile of the ChunkedArray as a new Series of …","Aggregate all chunks to a contiguous array of memory.","","","","Rename the Series.","Rename series.","","return a Series in reversed order","Apply a custom function over a rolling/ moving window of …","Apply a custom function over a rolling/ moving window of …","Round underlying floating point array to given decimal.","Sample a fraction between 0.0-1.0 of this <code>ChunkedArray</code>.","","Check if series are equal. Note that <code>None == None</code> …","Check if all values in series are equal where <code>None == None</code> …","","Shift the values by a given period and fill the parts that …","Shrink the capacity of this array to fit its length.","Shrink the capacity of this array to fit its length.","Shrink the capacity of this array to fit its length.","","","Compute the sample skewness of a data set.","Get a zero copy view of the data.","","","","Get the standard deviation of the Series as a new Series …","Get the standard deviation of the Series as a new Series …","","Cast throws an error if conversion had overflows","","","","","Compute the sum of all values in this Series. Returns …","Get the sum of the Series as a new Series of length 1. …","Get the tail of the Series.","Take by index. This operation is clone.","Traverse and collect every nth element in a new array.","Take by index. This operation is clone.","Take by index.","Take by index if ChunkedArray contains a single chunk.","Take by index. This operation is clone.","Take by index.","Take by index if ChunkedArray contains a single chunk.","Take by index if ChunkedArray contains a single chunk.","","","Convert a chunk in the Series to the correct Arrow type. …","Cast numerical types to f64, and keep floats as is.","","","Cast a datelike Series to their physical representation. …","","","","","","","","","","","","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt16]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt32]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt64]</code>","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::UInt8]</code>","Get unique values in the Series.","Get unique values in the Series.","Returns a count of the unique values in the order of …","Compute the unique elements, but maintain order. This …","","","Unpack to <code>ChunkedArray</code> of dtype <code>[DataType::Utf8]</code>","Get the variance of the Series as a new Series of length 1.","Get the variance of the Series as a new Series of length 1.","","","","Return this Series with a new name.","Create a new ChunkedArray with values from self where the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked integer division. Computes self / rhs, returning …","Checked integer division. Computes self / rhs, returning …","Checked integer division. Computes self / rhs, returning …","","","","drop nulls","ignore nulls","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","A wrapper type that should make it a bit more clear that …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Swaps inner state with the <code>array</code>. Prefer …","","","","","","Temporary swaps out the array, and restores the original …","","","","","","Just a wrapper structure. Useful for certain impl …","","","","","","Transform to physical type and coerce floating point and …","","This takes ownership of the DataFrame so that drop is …","This takes ownership of the DataFrame so that drop is …","","","","","","","","","","","","","","ensure that nulls are propagated to both arrays","","","","","","Concat the DataFrames to a single DataFrame.","Concat the DataFrames to a single DataFrame.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Given two datatypes, determine the supertype that both …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Turn any iterator in a trusted length iterator","","","","Given two datatypes, determine the supertype that both …","","","","","","","","","","A utility that allocates an <code>UnstableSeries</code>. The applied …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,65,65,14,14,0,65,65,5,14,5,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,14,14,5,14,14,14,14,5,14,14,5,65,14,5,65,14,0,0,5,5,5,5,5,5,5,5,5,14,5,14,0,0,14,5,14,5,5,5,5,5,5,14,5,65,14,5,65,14,14,5,5,5,5,5,5,5,65,14,5,14,14,5,5,5,5,5,14,5,5,5,0,5,5,14,14,14,14,14,5,5,5,5,65,14,14,14,14,14,5,5,5,5,5,5,5,14,5,5,5,5,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,5,5,5,5,65,14,5,5,14,14,14,5,65,14,5,5,5,14,5,5,14,5,14,5,5,5,5,5,5,5,5,14,14,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,5,14,5,5,5,5,5,14,5,5,5,5,5,5,5,5,5,5,5,5,14,14,5,5,5,5,14,5,5,5,5,5,0,5,5,5,5,5,5,14,5,5,5,14,5,5,5,5,5,5,65,14,5,5,65,14,5,65,14,14,5,5,5,0,5,5,5,5,65,14,5,5,5,5,5,0,293,293,293,293,293,293,293,0,0,0,0,0,0,0,0,96,97,98,294,93,94,95,96,97,98,93,294,98,294,93,94,95,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,93,98,96,97,98,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,294,93,94,95,96,97,98,93,94,95,96,97,98,295,295,295,295,93,94,95,96,97,98,93,94,95,96,97,98,0,93,94,95,96,97,98,294,94,95,96,97,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,93,94,95,96,97,98,0,0,0,0,0,0,0,101,101,102,103,104,104,107,101,102,105,106,103,104,101,101,107,104,107,101,102,105,106,103,104,104,105,106,105,106,101,102,105,106,103,104,101,102,105,106,103,104,104,101,102,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,105,106,103,104,107,105,106,103,104,107,101,102,107,101,102,105,106,103,104,0,101,102,105,106,103,104,105,106,103,104,107,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,0,0,296,297,296,297,297,297,296,297,296,297,297,297,0,0,0,0,0,0,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,115,115,113,115,117,119,113,115,117,119,120,113,115,117,119,120,0,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,113,115,117,119,120,0,0,0,0,0,0,121,121,121,50,121,121,121,121,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,121,121,121,121,121,50,121,121,121,121,121,121,121,50,51,121,121,121,121,121,121,121,121,121,121,121,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,131,131,0,0,0,0,131,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,298,0,0,299,134,134,134,134,134,300,134,300,0,0,134,29,32,134,298,301,301,298,298,302,302,303,0,29,32,134,29,32,134,304,304,29,32,134,29,32,134,305,305,305,305,29,29,32,134,29,32,134,29,32,29,32,134,29,299,299,29,29,29,306,306,0,307,308,29,134,29,32,134,0,309,310,0,311,311,299,299,29,29,32,134,29,32,134,312,313,299,299,29,314,314,315,314,29,32,303,316,299,299,29,32,315,317,318,319,319,319,320,321,0,302,302,322,314,323,324,325,29,32,134,298,29,32,134,29,32,134,29,32,134,303,322,29,32,134,0,326,0,138,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,48,26,123,0,48,0,48,26,123,0,0,0,48,26,0,0,0,0,0,26,123,123,0,26,0,48,26,123,123,0,0,123,26,123,0,123,0,123,123,0,123,48,26,123,0,0,48,26,123,0,0,0,186,327,328,0,0,0,0,0,0,0,0,48,26,123,0,0,48,26,123,0,0,48,26,123,0,0,48,26,123,0,0,123,123,123,123,48,26,123,0,0,327,186,0,0,123,160,149,160,149,160,149,6,0,48,26,123,0,48,26,0,48,0,0,18,0,0,0,0,0,0,0,0,0,164,0,0,160,0,0,123,18,26,123,123,0,0,0,123,48,26,123,0,0,48,26,123,0,0,48,26,123,0,0,48,26,123,0,0,123,26,48,26,123,0,48,0,329,329,18,329,147,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,27,56,41,41,88,88,88,33,33,33,48,55,70,71,75,76,23,22,24,25,13,27,41,88,33,130,41,41,27,27,41,41,27,41,88,33,130,27,27,145,146,41,88,33,41,88,33,88,33,88,27,27,41,88,33,130,27,41,88,33,130,41,145,146,88,33,41,145,146,88,33,41,145,146,88,33,130,161,161,161,162,162,162,88,48,330,329,329,41,41,41,41,41,41,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,333,56,27,41,88,33,48,27,41,88,33,0,55,70,71,75,76,23,22,147,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,147,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,82,334,334,334,334,334,334,334,334,82,48,26,147,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,147,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,56,55,70,71,75,76,23,22,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,333,56,48,82,48,26,26,82,149,123,160,27,41,88,88,33,33,27,41,88,88,33,33,48,48,48,26,26,26,82,82,82,149,149,149,123,123,123,160,160,160,27,88,147,41,33,27,41,88,33,130,27,88,33,130,148,48,48,26,26,82,149,149,123,160,27,147,331,332,4,55,49,148,48,48,48,26,26,26,26,82,82,82,149,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,123,123,160,27,27,27,41,88,88,33,33,130,41,88,33,130,27,27,41,88,88,33,33,130,41,88,33,130,82,27,41,41,88,88,41,88,33,130,41,88,33,130,41,329,329,329,329,27,41,88,33,130,27,41,88,33,130,27,329,329,56,333,333,27,41,88,33,130,56,333,333,27,41,88,33,130,27,18,4,55,49,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,27,130,130,48,335,329,329,27,88,33,27,41,88,33,130,27,41,88,88,33,33,27,41,88,88,33,33,48,26,149,123,160,48,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,27,26,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,170,170,27,41,88,33,130,56,170,48,26,26,26,48,26,26,26,48,26,26,48,26,329,329,329,27,41,88,88,33,33,27,41,88,88,33,33,41,27,41,88,33,41,145,146,145,146,0,41,27,41,88,33,41,56,55,70,71,75,76,23,22,88,33,82,82,328,182,183,184,336,337,88,88,88,88,33,33,33,33,130,130,82,130,27,41,88,33,130,130,41,41,27,41,88,88,33,33,27,41,88,88,33,33,27,88,27,88,48,149,56,147,145,146,145,146,41,55,70,71,75,76,23,22,27,41,88,33,130,56,147,41,88,33,41,88,33,41,88,33,27,27,82,27,41,88,33,130,27,41,88,33,130,41,145,146,88,33,41,145,146,88,33,145,146,0,56,55,70,71,75,76,23,22,41,27,41,88,33,26,82,149,149,88,27,123,27,147,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,26,123,48,26,149,33,27,41,88,33,130,27,161,161,161,162,162,162,334,334,334,334,334,334,334,334,48,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,41,145,146,88,33,130,329,329,329,26,329,145,146,41,174,175,176,177,178,179,180,181,145,146,88,33,130,41,174,175,176,177,178,179,180,181,145,146,88,33,130,147,331,332,4,55,49,148,48,26,82,149,150,151,70,71,152,153,75,76,23,22,154,155,156,157,158,159,24,25,13,123,160,328,182,183,184,336,337,329,27,27,41,88,33,130,0,0,0,186,327,327,186,0,0,0,186,188,185,185,185,187,187,185,327,187,189,186,188,185,327,187,189,186,188,185,185,186,188,185,186,188,185,186,327,187,189,186,188,185,327,187,189,186,188,185,187,327,187,189,186,188,185,185,188,188,188,188,187,186,187,186,327,187,189,186,188,185,185,185,185,186,185,185,186,186,185,188,327,187,189,186,188,185,327,187,189,186,188,185,189,185,185,186,186,185,186,185,185,185,185,187,189,186,185,189,185,185,0,185,186,188,185,327,187,189,186,188,185,327,187,189,186,188,185,327,187,189,186,188,185,185,185,185,327,187,189,186,188,185,0,191,191,191,191,191,0,191,191,0,191,191,191,191,191,191,191,0,191,0,0,0,0,0,144,144,144,144,10,0,193,193,193,144,144,193,144,193,10,144,193,193,0,0,144,144,144,144,144,192,193,192,193,0,192,192,193,192,193,192,193,0,192,192,193,193,192,192,193,193,193,193,193,193,193,0,192,193,192,193,0,0,0,0,0,0,0,192,193,192,193,192,193,192,193,192,193,0,0,0,0,0,0,0,0,0,0,0,0,200,200,200,200,200,200,200,200,200,200,0,200,0,200,200,0,200,200,200,200,200,206,0,0,206,205,206,206,0,0,205,0,0,205,206,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,215,216,205,206,190,215,216,205,206,190,190,205,206,190,205,206,190,190,190,206,190,215,216,205,206,190,215,216,205,206,190,190,190,190,190,215,216,205,206,190,190,190,190,190,190,190,190,206,190,206,206,206,190,0,190,190,190,190,190,190,190,205,206,190,190,190,190,190,215,216,205,206,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,215,216,205,206,190,190,215,216,205,206,190,215,216,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,215,216,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,215,216,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,205,206,190,190,190,190,190,190,190,215,216,205,206,190,190,190,190,215,216,205,206,190,215,216,205,206,190,190,190,190,190,190,190,215,216,205,206,190,190,190,190,190,190,190,0,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,0,225,225,0,0,225,0,0,0,0,0,0,229,12,0,225,0,225,225,225,225,225,225,225,225,225,229,12,0,225,225,225,224,12,208,225,208,0,224,208,12,229,233,227,226,224,12,208,225,229,233,227,226,224,12,208,225,224,12,208,225,224,12,208,225,208,224,12,229,233,227,226,226,224,12,208,225,229,233,227,226,224,12,208,225,208,227,229,233,227,226,224,224,12,208,225,224,12,224,224,224,12,12,12,0,229,224,208,224,224,12,208,225,225,0,229,233,227,226,224,224,224,224,12,12,208,225,224,224,12,208,208,12,12,338,338,208,12,229,233,227,226,224,12,208,225,229,233,227,226,224,12,208,225,12,233,224,224,227,224,224,229,12,224,224,12,208,208,208,229,12,208,208,208,208,208,224,208,233,233,208,224,12,208,208,12,224,12,208,208,12,12,208,208,224,12,208,225,225,229,233,227,226,224,12,208,225,229,233,227,226,224,12,208,225,229,233,227,226,224,12,208,225,12,12,12,208,229,233,227,226,224,12,208,225,339,339,0,0,0,0,0,0,0,0,0,0,340,341,341,0,342,342,238,239,0,0,238,239,238,239,238,239,238,239,238,239,0,238,239,238,239,238,239,238,239,207,238,239,239,0,238,239,207,238,239,207,238,239,207,238,239,207,0,207,238,239,207,238,239,207,238,239,207,207,207,207,207,207,238,238,239,239,207,0,238,239,207,238,239,207,238,239,238,239,207,238,239,0,0,238,239,207,238,239,207,238,239,207,238,239,207,238,239,207,0,0,0,0,0,0,0,0,0,0,0,241,0,0,343,0,241,242,243,241,242,243,241,241,241,242,242,243,241,242,243,241,242,243,241,241,241,241,241,242,243,241,242,243,241,343,343,243,241,243,243,242,243,241,0,242,243,241,241,0,0,241,242,243,241,242,243,241,242,243,241,344,344,344,344,242,243,241,242,242,242,242,242,0,244,0,0,0,0,144,0,0,0,0,221,0,0,0,0,0,0,0,0,144,144,0,144,0,10,221,0,0,0,0,186,327,0,0,0,81,0,0,0,0,0,0,0,144,144,0,0,0,0,0,81,0,0,0,0,0,0,327,186,81,0,81,0,0,0,81,0,144,236,0,0,10,144,0,0,0,0,0,0,0,0,0,0,0,0,0,144,144,0,0,144,0,236,0,144,144,0,0,0,0,0,81,252,253,128,83,221,166,254,128,128,128,128,128,345,128,128,144,81,252,253,128,128,83,221,166,254,144,81,252,253,128,83,221,166,254,128,83,346,346,81,252,253,128,83,221,166,254,81,252,253,128,83,221,166,254,128,128,166,166,0,252,128,128,81,128,83,221,254,0,144,81,252,253,128,128,83,221,166,254,144,81,252,253,128,83,221,166,254,128,0,128,128,128,144,81,252,253,128,128,83,221,166,254,81,128,128,128,221,166,254,81,81,81,128,128,128,221,221,221,166,166,166,254,254,254,254,254,128,144,144,81,252,253,128,128,128,221,166,254,83,144,144,144,144,81,252,253,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,83,221,166,254,254,347,348,349,128,350,350,350,350,128,128,128,351,128,128,128,254,37,352,128,353,81,128,221,166,128,128,254,0,144,81,252,253,128,83,221,166,254,253,144,81,252,253,128,83,221,166,254,128,128,128,141,141,141,141,166,128,128,128,0,128,128,354,354,355,166,254,354,354,83,166,128,356,357,128,166,128,128,128,128,128,128,128,128,128,128,0,128,128,128,0,0,0,0,253,354,354,128,128,355,128,128,128,128,128,128,345,0,358,358,144,128,359,0,128,354,354,81,252,253,128,83,221,166,254,144,128,144,81,252,253,128,128,83,221,166,254,144,81,252,253,128,83,221,166,254,128,128,128,128,128,128,128,128,128,144,81,252,253,128,83,221,166,254,128,0,359,144,81,252,253,128,83,221,166,254,128,83,83,166,254,144,128,128,0,0,0,347,348,349,0,280,280,0,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,0,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,0,358,358,0,0,0,0,0,0,360,361,0,0,0,0,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,362,202,362,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,362,202,202,202,202,202,52,52,0,0,52,52,0,0,0,52,52,0,0,0,0,52,9,271,271,9,9,9,9,9,9,9,271,271,271,271,0,9,271,271,271,271,9,271,271,9,271,271,9,9,271,271,271,271,271,271,9,285,52,9,285,52,9,271,9,9,9,9,271,271,9,9,271,271,271,9,9,52,9,271,52,9,9,9,9,9,9,9,285,52,9,9,285,52,9,9,9,9,9,9,9,285,52,9,271,271,271,271,52,9,9,9,9,9,9,9,52,52,52,9,9,9,9,9,9,271,271,9,271,9,9,52,9,9,9,285,52,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,271,9,9,271,271,271,271,9,9,9,9,9,9,271,9,9,9,9,9,9,0,9,285,52,9,285,52,9,9,285,214,9,271,271,9,9,9,9,271,271,214,214,9,9,9,9,271,271,271,9,9,9,9,9,9,9,9,271,271,271,271,9,271,271,271,271,9,271,271,9,9,9,9,271,271,271,271,271,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,271,9,285,9,9,9,9,9,9,9,271,0,9,9,271,271,271,9,9,9,271,9,9,271,271,271,9,9,9,9,9,9,271,271,271,9,9,285,9,271,9,271,271,271,271,9,9,9,9,9,9,9,9,9,271,9,271,271,9,9,271,9,9,271,271,9,9,52,9,9,9,9,285,52,9,9,9,285,52,9,285,52,9,9,9,9,9,271,271,9,9,271,0,9,271,271,285,52,9,9,9,0,0,0,363,363,364,11,11,0,363,364,11,11,363,364,11,11,363,364,11,11,363,364,11,11,0,0,346,35,35,346,35,35,284,284,0,284,284,284,284,284,284,284,284,0,284,284,284,284,284,284,284,284,284,284,0,284,284,284,284,284,0,0,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,365,0,0,291,292,288,291,292,288,288,288,0,0,365,365,0,0,0,0,291,291,292,292,288,291,292,292,288,291,292,288,0,291,291,291,291,0,365,291,292,288,292,292,290,292,292,292,292,292,0,0,0,291,291,292,288,291,292,288,292,288,217,288,288,292,288,288,288,0,288,0,0,0,288,365,291,292,288,0,291,292,288,291,292,288,291,292,288,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[[5,[4]]],2],[[[5,[-1]]],[[5,[-1]]],6],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],9],[[10,[9]]],11],[[[5,[-1]],12],9,6],[[[5,[13]]],2],[[],14],[[[5,[13]]],[[15,[2]]]],[[[5,[4]]],[[0,[[0,[16]]]]]],[[[5,[4]],17],[[0,[[0,[16]]]]]],[[[5,[13]]],2],[[[5,[13]]],[[15,[2]]]],[[[5,[-1]],[5,[-1]]],1,18],[[[5,[-1]],-2],[[5,[-1]]],6,[19,20]],[[[5,[4]],-1],[[5,[4]]],21],[[[5,[4]],-1],[[5,[-2]]],[21,20],18],[[[5,[22]],-1],9,19],[[[5,[23]],-1],9,19],[[[5,[-1]],-2],[[5,[-3]]],18,21,18],[[[5,[-1]],-2],[[5,[-1]]],6,[19,20]],[[[5,[-1]],19],[[5,[-1]]],6],[[[5,[-1]],19],[[5,[-2]]],6,18],[[[5,[24]],-1],[[5,[24]]],21],[[[5,[-1]],-2],1,6,[19,20]],[[[5,[25]],-1],[[5,[25]]],21],[[[5,[-1]],26,-2],[[5,[-3]]],18,21,18],[[[5,[24]],-1],[[5,[24]]],21],[[[5,[4]],19],[[10,[27]]]],[[[5,[-1]],-2,[28,[-3]]],1,6,19,[]],[[[5,[-1]],-2],[[5,[-1]]],6,[19,20]],[[[5,[-1]],-2],[[5,[-3]]],18,21,18],[[[5,[-1]],29],30,31],[[[5,[-1]],32],[[10,[30]]],31],[[[5,[-1]]],[[10,[30]]],31],0,[[[5,[24]]],33],[[[5,[-1]]],[[5,[-1]]],18],[[[5,[-1]]],26,18],[[[5,[-1]],[5,[-1]]],[],31],[[14,14],14],[[14,14],1],[[[5,[-1]],[5,[-1]]],[],31],[[14,14],14],[[14,14],1],[14,34],[14,34],[[[5,[-1]],[5,[-1]]],[],31],[[14,14],14],[[14,14],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[5,[-1]],26],[[10,[9]]],6],[[[5,[-1]],-2],[[5,[-3]]],6,[19,20],6],[[[5,[-1]],26],[[10,[9]]],6],[[[5,[-1]],9],[[10,[9]]],35],[[[5,[-1]],-2],[[10,[9]]],35,8],[[[5,[-1]]],36,18],[[[5,[-1]]],[[38,[37]]],18],[[[5,[-1]]],[[38,[37]]],18],[[[5,[-1]]],[[5,[-1]]],18],[14,14],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[14,14],[[[5,[-1]]],[[10,[28]]],6],[[14,14],2],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]],2],[[5,[-1]]],6],[[[5,[-1]]],[[0,[16,39]]],6],[[],[[5,[-1]]],18],[[],14],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[14,14],14],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],9],[[10,[9]]],11],[[[5,[-1]]],1,18],[40,1],[40,1],[40,1],[[[5,[-1]]],26,18],[[],14],[[14,14],2],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],[5,[-1]]],1,6],[[14,-1],1,42],[[[5,[-1]]],[[10,[[5,[-1]]]]],6],[[[5,[-1]],41],[[10,[[5,[-1]]]]],6],[[[5,[-1]]],[[15,[40]]],18],0,[[[5,[13]],43],44],[[[5,[-1]],43],44,6],[[14,43],44],[[14,43],44],[[14,43],44],[[14,43],44],[[14,43],44],[[[5,[-1]],-2],1,18,21],[[[5,[4]],-1],1,21],[-1,[[5,[-2]]],45,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,[[15,[14]]]],[34,14],[34,14],[34,14],[[17,-1],[[5,[-2]]],42,[18,18]],[[[5,[-1]],-2],[[5,[-1]]],[18,18],42],[[17,[38,[37]]],[[5,[-1]]],18],[[17,[38,[37]],26],[[5,[-1]]],18],[-1,[[5,[-2]]],42,6],[-1,[[5,[-2]]],42,6],[-1,[[5,[13]]],42],[-1,14,42],[[17,-1],[[5,[-2]]],16,6],[-1,[[5,[-2]]],42,6],[-1,[[5,[13]]],42],[[17,-1],[[5,[-2]]],16,6],[17,[[15,[14]]]],[-1,[[5,[-2]]],46,6],[[17,28],[[5,[-1]]],6],[[17,[28,[15]]],[[5,[-1]]],6],[-1,[[5,[-2]]],47,6],[[17,38],[[5,[-1]]],6],[[17,40],[[5,[-1]]],6],[[17,40],[[5,[-1]]],6],[[17,40,26],27],[[[5,[-1]],40],15,18],[[[5,[-1]],40],[[10,[48]]],6],[[[5,[-1]],40],48,6],[[[5,[4]],40],[[15,[9]]]],[[[5,[-1]]],14,18],[[[5,[4]]],9],[[[5,[[49,[-1]]]],40],[[15,[50]]],51],[[[5,[[49,[-1]]]],40],[[15,[50]]],51],[14,52],[[[5,[-1]],40],15,18],[[[5,[-1]],2,2],[[10,[12]]],6],[[[5,[-1]],40,2,40],12,31],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]]],2,18],[[[5,[-1]],[15,[40]]],[[5,[-1]]],18],[[],40],[[],40],[[],40],[[40,53,[15,[54]]],[[5,[-1]]],6],[[[5,[4]]],26],[[14,14],1],[[14,14],14],[[14,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[55]],[15,[40]],40],[[10,[56]]]],[[[5,[55]],[15,[40]],40],56],[[[5,[-1]]],[],6],[14],[[[5,[-1]]],[[0,[16,57,58,59,39,47]]],6],[[[5,[-1]]],9,18],[14,2],[[[5,[-1]]],2,18],[14,2],[[[5,[-1]]],41,60],[[[5,[-1]]],41,60],[[[5,[-1]]],41,60],[[[5,[-1]]],41,60],[[[5,[-1]]],41,18],[[[5,[-1]]],41,18],[[[5,[-1]]],2,18],[[[5,[-1]]],52,18],[14,[[61,[14]]]],[14,[[62,[14]]]],[[[5,[-1]]],[[64,[[63,[37]]]]],18],0,[[[5,[-1]]],15,18],[[[5,[-1]]],[[15,[40]]],18],[[[5,[-1]]],[[65,[-1]]],18],[[[5,[-1]]],40,18],[[[5,[-1]],-2],[[5,[-1]]],6,[7,66]],[[[5,[-1]],-2],[[5,[-1]]],6,[7,66]],[[[5,[-1]],-2],[[5,[-1]]],6,[7,66]],[[[5,[-1]],40],[[5,[-1]]],18],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[13]]],[[15,[2]]]],[[[5,[-1]]],15,6],[[[5,[-1]]],9,6],[[[5,[-1]]],[[15,[67]]],6],[[[5,[13]]],[[15,[67]]]],[[[5,[-1]]],[[15,[67]]],31],[[[5,[-1]]],9,31],[[[5,[13]]],[[15,[2]]]],[[[5,[-1]]],15,6],[[[5,[-1]]],9,6],[[17,[28,[34]],40,40],[[5,[13]]]],[[17,28],[[5,[-1]]],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],9],[[10,[9]]],11],[[[5,[-1]]],[[10,[40]]],31],[[[5,[-1]]],17,18],[[17,[69,[68]]],[[5,[70]]]],[[17,-1],[[5,[71]]],[[72,[[28,[[15,[54]]]]]]]],[[17,-1],[[5,[25]]],[[72,[[28,[[15,[[38,[34]]]]]]]]]],[[17,-1],[[5,[25]]],[[72,[[28,[[38,[34]]]]]]]],[[17,-1],[[5,[24]]],[[72,[[28,[73]]]]]],[[17,[69,[74]]],[[5,[75]]]],[[17,-1],[[5,[13]]],[[72,[[28,[[15,[2]]]]]]]],[[17,-1],[[5,[76]]],[[72,[[28,[77]]]]]],[[17,-1],[[5,[22]]],[[72,[[28,[67]]]]]],[[17,-1],[[5,[24]]],[[72,[[28,[[15,[73]]]]]]]],[[17,-1],[[5,[23]]],[[72,[[28,[[15,[53]]]]]]]],[[17,-1],[[5,[76]]],[[72,[[28,[[15,[77]]]]]]]],[[17,-1],[[5,[71]]],[[72,[[28,[54]]]]]],[[17,[69,[77]]],[[5,[76]]]],[[17,-1],[[5,[75]]],[[72,[[28,[[15,[74]]]]]]]],[[17,-1],[[5,[75]]],[[72,[[28,[74]]]]]],[[17,-1],[[5,[23]]],[[72,[[28,[53]]]]]],[[17,[69,[54]]],[[5,[71]]]],[[17,-1],[[5,[13]]],[[72,[[28,[2]]]]]],[[17,-1],[[5,[22]]],[[72,[[28,[[15,[67]]]]]]]],[[17,-1],[[5,[70]]],[[72,[[28,[68]]]]]],[[17,-1],[[5,[70]]],[[72,[[28,[[15,[68]]]]]]]],[17,[[5,[[49,[-1]]]]],51],[[[5,[-1]],40,40],[[5,[-1]]],6],[[17,38,[15,[78]]],[[5,[-1]]],6],[[17,[38,[-1]]],[[5,[[49,[-1]]]]],51],[[17,38],[[5,[-1]]],6],[[[5,[-1]]],[[5,[-1]]],60],[14,14],[[[5,[-1]],-2],41,6,8],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],[5,[-1]]],41,6],[[[5,[-1]],-2],41,6,8],[[[5,[-1]]],40,18],0,0,[[[5,[4]]],[[0,[79]]]],[[[5,[24]]],[[0,[79]]]],[[[5,[4]]],[[0,[80]]]],[[[5,[24]]],[[0,[80]]]],[[[5,[-1]]],9,6],[[[5,[-1]],67,81],[[10,[[15,[67]]]]],31],[[[5,[-1]],67,81],[[10,[9]]],31],[[17,40,67],[[10,[[5,[13]]]]]],[[17,40,67,67],[[10,[[5,[-1]]]]],6],[[17,40],[[5,[-1]]],6],[[17,40,67,67],[[5,[-1]]],6],[[[5,[-1]]],[[5,[-1]]],18],[[[5,[-1]]],82,18],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],9],[[10,[9]]],11],[[14,14],1],[[[5,[-1]],17],1,18],[[[5,[-1]]],[[5,[-1]]],6],[[[5,[-1]],19,83],[[10,[9]]],6],[[[5,[-1]],40,-2],[[10,[[5,[-1]]]]],60,21],[[[5,[-1]],67,2,2,[15,[54]]],[[10,[[5,[-1]]]]],18],[[[5,[-1]],40,2,2,[15,[54]]],[[10,[[5,[-1]]]]],18],[[[5,[-1]],41,15],[[10,[[5,[-1]]]]],6],[[14,14,2],1],[[[5,[-1]],-2,15],[[10,[[5,[-1]]]]],6,42],[[[5,[-1]],-2,-3],[[10,[[5,[-1]]]]],6,42,19],[[[5,[4]]],1],[[[5,[4]],26],1],[[[5,[-1]],52],1,18],[[14,52],1],[[[5,[-1]],77],[[5,[-1]]],6],[[[5,[-1]],77,15],[[5,[-1]]],6],[[[5,[-1]]],1,18],[[[5,[-1]],77,40],[[5,[-1]]],18],[[[5,[-1]],2],[[5,[-1]]],31],[[[5,[-1]],29],[[5,[-1]]],31],[[[5,[-1]],34],[[15,[67]]],6],[[[5,[-1]],34],9,31],[[[5,[-1]],[5,[-1]]],[],6],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],-2],[],6,[7,8]],[[[5,[-1]],[5,[-1]]],[],6],[[14,14],14],[[14,14],1],[[[5,[-1]],9],[[10,[9]]],11],[[[5,[13]]],[[15,[84]]]],[[[5,[-1]]],15,6],[[[5,[-1]]],9,6],[[14,14],14],[[[5,[-1]],[15,[40]]],[[5,[-1]]],18],[[[5,[-1]],-2],[[10,[[5,[-1]]]]],18,[[72,[[28,[84]]]],85]],[[[5,[-1]],30],[[10,[[5,[-1]]]]],18],[[[5,[-1]],-2],[[5,[-1]]],18,[[72,[[28,[84]]]],85]],[[[5,[-1]],30],[[5,[-1]]],18],0,[[[5,[-1]],40],[[5,[-1]]],6],[[[5,[24]],40],[[10,[9]]]],[[[5,[4]],26],1],[[[5,[4]]],[[10,[86]]]],[[[5,[-1]]],[[10,[87]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[25]]],88],[[[5,[-1]]],[[38,[15]]],6],[[[5,[-1]]],[[89,[38,[38,[15]]]]],6],[[14,14],1],[[[5,[-1]],-2],[[10,[[5,[-1]]]]],6,[19,20]],[[[5,[4]],-1],[[10,[[5,[4]]]]],21],[[[5,[-1]],-2],[[90,[[5,[-3]],-4]]],18,[21,20],18,[]],[[[5,[-1]],-2],[[90,[[5,[-3]],-4]]],18,21,18,[]],[[[5,[-1]],-2],[[90,[[5,[-3]],-4]]],18,21,18,[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[[17,-1],[[90,[[5,[-2]],-3]]],42,[18,18],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[14,14],14],[[[5,[-1]]],[[10,[[5,[-1]]]]],31],[[[5,[-1]],9],[[10,[[5,[-1]]]]],18],[[[5,[-1]]],1,18],0,[[[5,[-1]],40],[],18],[[[5,[-1]],34],[[15,[67]]],6],[[[5,[-1]],34],9,31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,-1],[[5,[-2]]],45,[18,18]],[[[5,[-1]],[38,[37]]],[[5,[-1]]],18],[[[5,[-1]],17],[[5,[-1]]],18],[[[5,[4]],[5,[-1]],-2],[[5,[4]]],18,21],[[[5,[-1]],41,[5,[-1]]],[[10,[[5,[-1]]]]],6],0,[[[92,[-1]],[92,[-1]]],[[92,[-1]]],[]],[[[92,[-1]],[92,[-1]]],[[92,[-1]]],[]],[[[92,[-1]],-1],[[92,[-1]]],[]],[[[92,[-1]],[92,[-1]]],[[92,[-1]]],[]],[[[92,[-1]],[92,[-1]]],[[92,[-1]]],[]],[[[92,[-1]],-1],[[92,[-1]]],[]],[[[92,[-1]],[92,[-1]]],[[92,[-1]]],[]],0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[-1,1,[]],[93,1],[94,1],[95,1],[96,1],[[[97,[-1]]],1,6],[98,1],[[93,[15,[-1]]],1,[[72,[[28,[34]]]]]],[[-1,[15,[-2]]],1,[],[]],[[98,[15,[-1]]],1,[[72,[17]]]],[[-1,-2],1,[],[]],[[93,-1],1,[[72,[[28,[34]]]]]],[[94,[99,[[28,[34]]]]],1],[[95,[99,[17]]],1],[[96,2],1],[[[97,[-1]]],1,6],[[98,-1],1,[[72,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[96,96],[[[97,[-1]]],[[97,[-1]]],[6,100]],[98,98],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[-1,[[5,[-2]]],[],[]],[93,33],[94,[[5,[25]]]],[95,[[5,[24]]]],[96,41],[[[97,[-1]]],[[5,[-1]]],6],[98,88],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[17,-1],-2,16,[]],[[17,-1],-2,16,[]],[[17,[28,[-1]]],-2,[],[]],[[17,[28,[[15,[-1]]]]],-2,[],[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[17,40,40],93],[[17,40],94],[[17,40],95],[[17,40],96],[[17,40],[[97,[-1]]],6],[[17,40,40],98],[-1,1,[]],[94,1],[95,1],[96,1],[[[97,[-1]]],1,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[101,45],1],[101,1],[102,1],[[103,-1],1,[16,47]],[[[104,[-1]],-2],1,6,[16,47]],[[[104,[-1]],-2],1,6,[16,47]],[-1,1,[]],[101,1],[102,1],[105,1],[106,1],[103,1],[[[104,[-1]]],1,6],[[101,[15,[45]]],1],[[101,[15,[9]]],[[10,[1]]]],[[-1,[15,[9]]],[[10,[1]]],[]],[[[104,[-1]],[15,[28]]],1,6],[[-1,9],[[10,[1]]],[]],[[101,9],[[10,[1]]]],[[102,9],[[10,[1]]]],[[105,9],[[10,[1]]]],[[106,9],[[10,[1]]]],[[103,9],[[10,[1]]]],[[[104,[-1]],9],[[10,[1]]],6],[[[104,[-1]],28],1,6],[[105,-1],1,[16,47]],[[106,-1],1,[16,47]],[[105,-1],1,16],[[106,-1],1,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],101],[[],102],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[105,2],[106,2],[103,2],[[[104,[-1]]],2,6],[-1,2,[]],[105,82],[106,82],[103,82],[[[104,[-1]]],82,6],[-1,82,[]],[101,27],[102,27],[-1,27,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[26,40,40,17],[[10,[[108,[107]]]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[105,37],[106,37],[103,37],[[[104,[-1]]],37,6],[-1,37,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,40,[15,[26]]],101],[[17,40,[15,[26]]],102],[[17,40,40],105],[[17,40,40],106],[[17,40,40],103],[[17,40,40,26],[[104,[-1]]],6],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,17],[[5,[-2]]],[],[]],[[-1,[5,[-2]]],[[5,[-2]]],[],[]],[[-1,17],[[5,[-2]]],47,[]],[[-1,[5,[-2]]],[[5,[-2]]],47,[]],[[-1,17,26],[[5,[-2]]],47,[]],[[-1,17,26],[[5,[-2]]],[],[]],[[-1,17],[[90,[[5,[-2]],-3]]],16,[],[]],[[-1,[5,[-2]]],[[90,[[5,[-2]],-3]]],16,[],[]],[[-1,17],[[90,[[5,[-2]],-3]]],[16,47],[],[]],[[-1,[5,[-2]]],[[90,[[5,[-2]],-3]]],[16,47],[],[]],[[-1,17,26],[[90,[[5,[-2]],-3]]],[16,47],[],[]],[[-1,17,26],[[90,[[5,[-2]],-3]]],16,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[40,1],[40,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],40],[[],40],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[38,[[110,[109]],111]]],[]],[-1,[[38,[73,111]]],[]],[112,113],[[[114,[77]]],115],[[[116,[77]]],117],[[[118,[77]],26],119],[113,15],[115,15],[117,15],[119,15],[[[120,[-1]]],15,16],[113,15],[115,15],[117,15],[119,15],[[[120,[-1]]],15,39],0,[113,[[1,[40,[15,[40]]]]]],[115,[[1,[40,[15,[40]]]]]],[117,[[1,[40,[15,[40]]]]]],[119,[[1,[40,[15,[40]]]]]],[[[120,[-1]]],[[1,[40,[15,[40]]]]],16],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,3],1,[]],[[26,-1],[[121,[-2]]],42,51],[[26,-1],[[121,[-2]]],42,51],[-1,122,[]],[[[121,[-1]]],122,51],[[[121,[-1]]],122,51],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[121,[-1]]],[[121,[-1]]],[51,100]],[[-1,-2],1,[],[]],[[[121,[-1]]],123,51],[40,-1,[]],[40,-1,[]],[40,1],[[[121,[-1]],43],44,[51,124]],[-1,-1,[]],[[[121,[-1]],40],[[15,[-1]]],51],[[],40],[-1,-2,[],[]],[[[121,[-1]]],[],51],[[[121,[-1]],40],2,51],[[[121,[-1]],40],2,51],[[-1,40],2,[]],[[[121,[-1]]],[[127,[-1,[125,[-1]],126]]],51],[[[121,[-1]]],[[127,[126]]],51],[[[121,[-1]]],40,51],[[[121,[-1]]],40,51],0,[[[121,[-1]],[15,[78]]],1,51],[[[121,[-1]],40,40],1,51],[[-1,40,40],-2,[],[]],[[-1,40,40],-2,[],[]],[[[121,[-1]],40,40],1,51],[-1,[[108,[50]]],[]],[[[121,[-1]]],[[108,[45]]],51],[-1,-2,[],[]],[[26,-1],[[90,[[121,[-2]],-3]]],42,51,[]],[[26,-1],[[90,[[121,[-2]],-3]]],42,51,[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,17,[]],[[],17],[[[121,[-1]]],[[15,[78]]],51],[[[121,[-1]],40],-1,51],[[[121,[-1]],40],[],51],[[[121,[-1]],40],-1,51],[[[121,[-1]]],[[128,[[38,[-1]]]]],51],[[[121,[-1]]],[],51],[[[121,[-1]]],[[125,[-1]]],51],[-1,-2,[],[]],[[[121,[-1]],[15,[78]]],[[121,[-1]]],51],[[[121,[-1]],[15,[78]]],[[108,[45]]],51],[[[121,[-1]],[15,[78]]],[[121,[-1]]],51],0,[[[129,[-1]]],1,51],[[[129,[-1]]],1,51],[[[129,[-1]],[15,[-1]]],1,51],[[[129,[-1]],-1],1,51],[[[129,[-1]],122],1,51],[[[129,[-1]],122],[[10,[1]]],51],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[129,[-1]]],51],[40,-1,[]],[40,-1,[]],[40,1],[[[129,[-1]]],[[130,[-1]]],51],[-1,-1,[]],[[],40],[-1,-2,[],[]],[[17,40],[[129,[-1]]],51],[[[129,[-1]]],9,51],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[[-1,122],1,[]],[[17,40],[[108,[131]]]],[[],132],[[],2],[[133,132],1],[-1,9,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,-2],-1,[],[19,20]],[[-1,19],-1,[]],[[-1,19],[[5,[-2]]],[],18],[[-1,-2,[28,[-3]]],1,[],19,[]],[[-1,-2],-1,[],[19,20]],[[-1,29],30,[]],[[-1,32],[[10,[30]]],[]],[-1,[[10,[30]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,26],[[10,[9]]],[]],[[-1,26],[[10,[9]]],[]],[29,29],[32,32],[134,134],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[-1,2],[[5,[-2]]],[],[]],[[],29],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],0,0,[40,1],[40,1],[40,1],[[29,29],2],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[10,[9]]],[]],[-1,[[10,[[1,[9,[135,[77]]]]]]],[]],0,[[-1,-2],[[10,[-1]]],85,[]],[[-1,41],[[10,[[5,[-2]]]]],85,[]],[[29,43],44],[[134,43],44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[17,-1,40],-2,[],85],[[17,40],-1,85],0,[[-1,40],[[10,[48]]],[]],[[-1,40],48,[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[29,-1],1,136],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[41]]],[]],[-1,[[10,[41]]],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],0,[-1,[[15,[-2]]],[],[]],[-1,[[15,[67]]],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,[-1,[[10,[40]]],[]],[[-1,40,40],[[5,[-2]]],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],0,0,[[-1,67,81],[[10,[[15,[-2]]]]],[],[]],[-1,-1,[]],[[-1,19,83],[[10,[9]]],85],[[-1,41,[15,[-2]]],[[10,[-1]]],85,[]],[[-1,-2,[15,[-3]]],[[10,[-1]]],85,42,[]],[[-1,-2,-3],[[10,[-1]]],85,42,19],[[-1,77],[[5,[-2]]],[],[]],[[-1,77,-2],[[5,[-3]]],[],[],[]],0,[[-1,2],[[5,[-2]]],[],[]],[[-1,29],[[5,[-2]]],[],[]],[[-1,34],[[15,[67]]],[]],[-1,[[15,[-2]]],[],[]],[[-1,-2],[[10,[-1]]],85,[]],[[-1,-2],-1,[],[]],[-1,[[38,[[28,[34]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[10,[-1]]],85,[19,20]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,[[10,[[5,[-2]]]]],[],[]],[[-1,34],[[15,[67]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,41,[5,[-2]]],[[10,[[5,[-2]]]]],[],[]],0,0,0,0,[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],18,18,21,18],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],18,18,[[137,[15,15]]],18],[[[5,[-1]],[5,[-2]],-3],1,18,18,21],[[[5,[-1]],[5,[-2]],-3],[[5,[-4]]],18,18,21,18],[[[5,[-1]],[5,[-2]],-3,17],[[5,[-4]]],18,18,21,18],[[[5,[-1]],[5,[-2]],-3,2,2],[[5,[-1]]],18,18,21],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[5,[-5]]],18,18,18,[[138,[15,15,15]]],18],[[[5,[-1]],[5,[-2]],-3],[[90,[[5,[-4]],-5]]],18,18,21,18,139],[[[5,[-1]],[5,[-2]],-3],[[90,[[5,[-4]],-5]]],18,18,21,18,[]],[[[5,[-1]],[5,[-2]],-3],[[90,[[5,[-4]],-5]]],18,18,21,18,[]],[[[5,[-1]],[5,[-2]],-3,2,2],[[90,[[5,[-1]],-4]]],18,18,21,139],[[[5,[-1]],[5,[-2]],[5,[-3]],-4],[[90,[[5,[-5]],-6]]],18,18,18,21,18,[]],[[30,84],[[10,[1]]]],[[[92,[84]],84],[[10,[1]]]],[[40,[38,[2]]],1],0,[[[28,[[1,[-1,-2]]]],2,2],1,[140,57],[140,57,141]],[[[28,[-1]]],1,[141,140]],[[[28,[-1]]],1,[141,140]],[[[28,[9]],[28,[2]],2],[[10,[142]]]],[[17,[28,[9]],[28,[2]],2],[[10,[33]]]],[9,[[10,[37]]]],0,[[],143],[143,77],[143,77],[143,77],0,[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[27,2],[[56,56]],[[41,41]],[[41,41]],[[88,88]],[[88,17]],[[88,88]],[[33,33]],[[33,33]],[[33,[28,[34]]]],[[48,48],48],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[88,9],[[10,[9]]]],[[33,9],[[10,[9]]]],[[41,9],[[10,[9]]]],[[27,12],9],[[41,12],9],[[88,12],9],[[33,12],9],[[[130,[-1]],12],9,51],[41,2],[41,[[15,[2]]]],[27,[[0,[[0,[16]]]]]],[[27,17],[[0,[[0,[16]]]]]],[41,2],[41,[[15,[2]]]],[[27,-1],27,[19,20]],[[41,-1],41,[19,20]],[[88,-1],88,[19,20]],[[33,-1],33,[19,20]],[[[130,[-1]],-2],[[130,[-1]]],51,[19,20]],[[27,-1],27,21],[[27,-1],[[5,[-2]]],[21,20],18],[[145,-1],9,19],[[146,-1],9,19],[[41,19],41],[[88,19],88],[[33,19],33],[[41,19],[[5,[-1]]],18],[[88,19],[[5,[-1]]],18],[[33,19],[[5,[-1]]],18],[[88,-1],88,21],[[33,-1],33,21],[[88,-1],88,21],[[27,19],[[10,[27]]]],[[27,-1,[28,[-2]]],1,19,[]],[[41,-1,[28,[-2]]],1,19,[]],[[88,-1,[28,[-2]]],1,19,[]],[[33,-1,[28,[-2]]],1,19,[]],[[[130,[-1]],-2,[28,[-3]]],1,51,19,[]],[[27,-1],27,[19,20]],[[41,-1],41,[19,20]],[[88,-1],88,[19,20]],[[33,-1],33,[19,20]],[[[130,[-1]],-2],[[130,[-1]]],51,[19,20]],[[41,29],30],[[145,29],30],[[146,29],30],[[88,29],30],[[33,29],30],[[41,32],[[10,[30]]]],[[145,32],[[10,[30]]]],[[146,32],[[10,[30]]]],[[88,32],[[10,[30]]]],[[33,32],[[10,[30]]]],[41,[[10,[30]]]],[145,[[10,[30]]]],[146,[[10,[30]]]],[88,[[10,[30]]]],[33,[[10,[30]]]],[[[130,[-1]]],[[10,[30]]],51],[-1,-2,42,[]],[-1,-2,42,[]],[-1,-2,42,[]],[[26,-1],-2,42,[]],[[26,-1],-2,42,[]],[[26,-1],-2,42,[]],[88,33],[48,48],[-1,26,[]],[-1,[[15,[28]]],[]],[-1,[[15,[28]]],[]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,26],[[10,[9]]],[]],[[56,26],[[10,[9]]]],[[27,26],[[10,[9]]]],[[41,26],[[10,[9]]]],[[88,26],[[10,[9]]]],[[33,26],[[10,[9]]]],[[48,26],[[10,[48]]]],[[27,26],[[10,[9]]]],[[41,26],[[10,[9]]]],[[88,26],[[10,[9]]]],[[33,26],[[10,[9]]]],0,[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[145,9],[[10,[9]]]],[[146,9],[[10,[9]]]],[[[147,[-1,-2]]],[[147,[-1,-2]]],18,18],[148,148],[48,48],[26,26],[82,82],[149,149],[150,150],[151,151],[70,70],[71,71],[152,152],[153,153],[75,75],[76,76],[23,23],[22,22],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[24,24],[25,25],[13,13],[123,123],[160,160],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[82,26],1],[-1,-2,[],161],[-1,-2,[],161],[-1,-2,47,161],[-1,-2,47,161],[[-1,26],-2,47,162],[[-1,26],-2,47,162],[[-1,26],-2,[],162],[[-1,26],-2,[],162],[82,26],[[],48],[[],26],[40,-1,[]],[[[147,[-1,-2]]],[],18,18],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[[147,[-1,-2]]],[],18,18],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[56,56]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[-1,26,[]],[56,26],[48,26],0,[[48,48],2],[[26,123],2],[[26,26],2],[[82,82],2],[[149,149],2],[[123,123],2],[[160,160],2],[[27,27],41],[[41,41],41],[[88,88],41],[[88,17],41],[[33,[28,[34]]],41],[[33,33],41],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,[28,[34]]],41],[[33,33],41],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[27,[[10,[[1,[9,[135,[77]]]]]]]],[88,[[10,[[1,[9,[135,[77]]]]]]]],[[[147,[-1,-2]]],82,18,18],[[41,2],[[10,[41]]]],[[33,[28,[34]]],[[10,[33]]]],[[27,41],[[10,[27]]]],[[41,41],[[10,[[5,[13]]]]]],[[88,41],[[10,[[5,[24]]]]]],[[33,41],[[10,[[5,[25]]]]]],[[[130,[-1]],41],[[10,[[5,[[49,[-1]]]]]]],51],[[27,43],44],[[88,43],44],[[33,43],44],[[[130,[-1]],43],44,51],[[148,43],44],[[48,43],44],[[48,43],44],[[26,43],44],[[26,43],44],[[82,43],44],[[149,43],44],[[149,43],44],[[123,43],[[90,[1,163]]]],[[160,43],[[90,[1,163]]]],[[27,-1],1,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,48,164],[-1,-1,[]],[[[15,[-1]]],48,[[165,[48]]]],[48,26],[123,26],[48,26],[-1,-1,[]],[48,82],[166,82],[-1,-1,[]],[160,149],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[167,123],[168,123],[-1,-1,[]],[-1,27,42],[-1,27,42],[-1,27,42],[-1,41,42],[-1,88,42],[-1,88,42],[-1,33,42],[-1,33,42],[-1,[[130,[-2]]],42,51],[[17,-1],[[5,[13]]],16],[[17,-1],88,16],[[17,-1],33,16],[[17,-1],[[130,[-2]]],16,51],[-1,27,42],[-1,27,42],[-1,41,42],[-1,88,42],[-1,88,42],[-1,33,42],[-1,33,42],[-1,[[130,[-2]]],42,51],[[17,-1],[[5,[13]]],16],[[17,-1],88,16],[[17,-1],33,16],[[17,-1],[[130,[-2]]],16,51],[[169,26],82],[-1,27,46],[-1,41,46],[-1,41,46],[-1,88,46],[-1,88,46],[[17,[28,[2]]],41],[[17,[28,[-1]]],88,[[72,[17]]]],[[17,[28,[-1]]],33,[[72,[[28,[34]]]]]],[[17,[28,[-1]]],[[130,[-1]]],51],[[17,[28,[[15,[2]]]]],41],[[17,[28,[[15,[-1]]]]],88,[[72,[17]]]],[[17,[28,[[15,[-1]]]]],33,[[72,[[28,[34]]]]]],[[17,[28,[[15,[-1]]]]],[[130,[-1]]],51],[-1,41,47],[[38,26],-1,[]],[[38,26],-1,[]],[[38,26],-1,[]],[[38,26],-1,[]],[[17,9,40],27],[[17,2,40],41],[[17,17,40],88],[[17,[28,[34]],40],33],[[17,-1,40],[[130,[-1]]],51],[[17,40],27],[[17,40],41],[[17,40],88],[[17,40],33],[[17,40],[[130,[-1]]],51],[[17,40,26],27],[[-1,40],15,[]],[[-1,40],15,[]],[[56,40],[[10,[48]]]],[[-1,40],[[10,[48]]],[]],[[-1,40],[[10,[48]]],[]],[[27,40],[[10,[48]]]],[[41,40],[[10,[48]]]],[[88,40],[[10,[48]]]],[[33,40],[[10,[48]]]],[[[130,[-1]],40],[[10,[48]]],51],[[56,40],48],[[-1,40],48,[]],[[-1,40],48,[]],[[27,40],48],[[41,40],48],[[88,40],48],[[33,40],48],[[[130,[-1]],40],48,51],[[27,40],[[15,[9]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[27,9],[[[130,[-1]],40],[[15,[50]]],51],[[[130,[-1]],40],[[15,[50]]],51],[48,[[15,[17]]]],[[-1,40],48,[]],[[-1,40],15,[]],[[-1,40],15,[]],[27,40],[88,40],[33,40],[[27,2,2],[[10,[12]]]],[[41,2,2],[[10,[12]]]],[[88,2,2],[[10,[12]]]],[[33,2,2],[[10,[12]]]],[[[130,[-1]],2,2],[[10,[12]]],51],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,[28,[34]]],41],[[33,33],41],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,[28,[34]]],41],[[33,33],41],[[48,-1],1,136],[[26,-1],1,136],[[149,-1],1,136],[[123,-1],1,136],[[160,-1],1,136],[[48,-1,2],1,136],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[27,26],[26,[[15,[26]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[170,[15,[40]],40],[[10,[56]]]],[[170,[15,[40]],40],56],[27],[41],[88],[33],[[[130,[-1]]],[],51],[56,9],[170,9],[48,[[10,[48]]]],[26,2],[26,2],[26,2],[48,2],[26,2],[26,2],[26,2],[48,2],[26,2],[26,2],[48,2],[26,2],[-1,[[127,[126]]],[]],[-1,15,[]],[-1,15,[]],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,[28,[34]]],41],[[33,33],41],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,[28,[34]]],41],[[33,33],41],[41,[[15,[2]]]],[27,9],[41,9],[88,9],[33,9],[41,[[15,[67]]]],[145,[[15,[53]]]],[146,[[15,[67]]]],[145,9],[146,9],[[26,26],[[10,[26]]]],[41,[[15,[2]]]],[27,9],[41,9],[88,9],[33,9],[[17,[28,[34]],40,40],41],[[56,56]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[88,[[10,[40]]]],[33,[[10,[40]]]],[82,169],0,[[]],[[]],[[]],[[]],[[]],[[]],[[17,-1],88,[[72,[[28,[[99,[17]]]]]]]],[[17,-1],88,[[72,[[28,[17]]]]]],[[17,-1],88,[[72,[[28,[[15,[17]]]]]]]],[[17,-1],88,[[72,[[28,[[15,[[99,[17]]]]]]]]]],[[17,-1],33,[[72,[[28,[[28,[34]]]]]]]],[[17,-1],33,[[72,[[28,[[15,[[99,[[28,[34]]]]]]]]]]]],[[17,-1],33,[[72,[[28,[[99,[[28,[34]]]]]]]]]],[[17,-1],33,[[72,[[28,[[15,[[28,[34]]]]]]]]]],[[17,-2],[[130,[-1]]],51,[[72,[[28,[[15,[-1]]]]]]]],[[17,[28,[-1]]],[[130,[-1]]],51],[[17,26],82],[17,[[130,[-1]]],51],[[27,40,40],27],[[41,40,40],41],[[88,40,40],88],[[33,40,40],33],[[[130,[-1]],40,40],[[130,[-1]]],51],[[17,[38,[-1]]],[[130,[-1]]],51],[41],[41],[[27,27],41],[[41,41],41],[[88,88],41],[[88,17],41],[[33,33],41],[[33,[28,[34]]],41],[[27,27],41],[[41,41],41],[[88,17],41],[[88,88],41],[[33,33],41],[[33,[28,[34]]],41],[27,[[0,[79]]]],[88,[[0,[79]]]],[27,[[0,[80]]]],[88,[[0,[80]]]],[[48,48],[[15,[171]]]],[[149,149],[[15,[171]]]],[56,[[15,[40]]]],[[[147,[155,55]]],[[15,[40]]]],[[145,67,81],[[10,[[15,[53]]]]]],[[146,67,81],[[10,[[15,[67]]]]]],[[145,67,81],[[10,[9]]]],[[146,67,81],[[10,[9]]]],[[17,40,67],[[10,[41]]]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[27,27],[41,41],[88,88],[33,33],[[[130,[-1]]],[[130,[-1]]],51],[56,40],[[[147,[155,55]]],40],[[41,41,[15,[2]]],[[10,[41]]]],[[88,41,[15,[17]]],[[10,[88]]]],[[33,41,[15,[[28,[34]]]]],[[10,[33]]]],[[41,-1,[15,[2]]],[[10,[41]]],42],[[88,-1,[15,[17]]],[[10,[88]]],42],[[33,-1,[15,[[28,[34]]]]],[[10,[33]]],42],[[41,-1,-2],[[10,[41]]],42,19],[[88,-1,-2],[[10,[88]]],42,19],[[33,-1,-2],[[10,[33]]],42,19],[27,1],[[27,26],1],[[82,169],1],[[27,77],27],[[41,77],41],[[88,77],88],[[33,77],33],[[[130,[-1]],77],[[130,[-1]]],51],[[27,77,[15,[9]]],27],[[41,77,[15,[2]]],41],[[88,77,[15,[17]]],88],[[33,77,[15,[[28,[34]]]]],33],[[[130,[-1]],77,[15,[[49,[-1]]]]],[[5,[[49,[-1]]]]],51],[[41,2],41],[[145,2],145],[[146,2],146],[[88,2],88],[[33,2],33],[[41,29],[[5,[13]]]],[[145,29],145],[[146,29],146],[[88,29],[[5,[24]]]],[[33,29],[[5,[25]]]],[[145,34],9],[[146,34],9],0,[[56,56]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[[[5,[-1]],9],[[90,[9,144]]],[]],[41,[[15,[84]]]],[27,9],[41,9],[88,9],[33,9],[26,123],[82,166],[149,160],[149,17],[[88,40],[[10,[9]]]],[[27,26],1],[123,123],[27,[[10,[86]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[123,172],[-1,73,[]],[-1,73,[]],[-1,73,[]],[33,88],[[27,-1],[[10,[27]]],[19,20]],[[41,-1],[[10,[41]]],[19,20]],[[88,-1],[[10,[88]]],[19,20]],[[33,-1],[[10,[33]]],[19,20]],[[[130,[-1]],-2],[[10,[[130,[-1]]]]],51,[19,20]],[[27,-1],[[10,[27]]],21],[-1,[[90,[-2,-3]]],42,[],[]],[-1,[[90,[-2,-3]]],42,[],[]],[-1,[[90,[-2,-3]]],42,[],[]],[[26,-1],[[90,[-2,-3]]],42,[],[]],[[26,-1],[[90,[-2,-3]]],42,[],[]],[[26,-1],[[90,[-2,-3]]],42,[],[]],[-1,[[90,[-3,-4]]],16,[],[[161,[-2]]],[]],[-1,[[90,[-3,-4]]],16,[],[[161,[-2]]],[]],[-1,[[90,[-3,-4]]],[16,47],[],[[161,[-2]]],[]],[-1,[[90,[-3,-4]]],[16,47],[],[[161,[-2]]],[]],[[-1,26],[[90,[-3,-4]]],[16,47],[],[[162,[-2]]],[]],[[-1,26],[[90,[-3,-4]]],[16,47],[],[[162,[-2]]],[]],[[-1,26],[[90,[-3,-4]]],16,[],[[162,[-2]]],[]],[[-1,26],[[90,[-3,-4]]],16,[],[[162,[-2]]],[]],[48,[[10,[-1]]],66],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[41,[[10,[41]]]],[145,[[10,[[5,[23]]]]]],[146,[[10,[[5,[22]]]]]],[88,[[10,[88]]]],[33,[[10,[33]]]],[[[130,[-1]]],[[10,[[5,[[49,[-1]]]]]]],51],[[-1,40],[],[]],[[-1,40],[],[]],[[-1,40],[],[]],[[26,48],2],[-1,[],[]],[[145,34],9],[[146,34],9],[[41,173,[38,[54]]],[[10,[1]]]],[[174,173,[38,[54]]],[[10,[1]]]],[[175,173,[38,[54]]],[[10,[1]]]],[[176,173,[38,[54]]],[[10,[1]]]],[[177,173,[38,[54]]],[[10,[1]]]],[[178,173,[38,[54]]],[[10,[1]]]],[[179,173,[38,[54]]],[[10,[1]]]],[[180,173,[38,[54]]],[[10,[1]]]],[[181,173,[38,[54]]],[[10,[1]]]],[[145,173,[38,[54]]],[[10,[1]]]],[[146,173,[38,[54]]],[[10,[1]]]],[[88,173,[38,[54]]],[[10,[1]]]],[[33,173,[38,[54]]],[[10,[1]]]],[[[130,[-1]],173,[38,[54]]],[[10,[1]]],51],[[41,173,[28,[54]]],[[10,[1]]]],[[174,173,[28,[54]]],[[10,[1]]]],[[175,173,[28,[54]]],[[10,[1]]]],[[176,173,[28,[54]]],[[10,[1]]]],[[177,173,[28,[54]]],[[10,[1]]]],[[178,173,[28,[54]]],[[10,[1]]]],[[179,173,[28,[54]]],[[10,[1]]]],[[180,173,[28,[54]]],[[10,[1]]]],[[181,173,[28,[54]]],[[10,[1]]]],[[145,173,[28,[54]]],[[10,[1]]]],[[146,173,[28,[54]]],[[10,[1]]]],[[88,173,[28,[54]]],[[10,[1]]]],[[33,173,[28,[54]]],[[10,[1]]]],[[[130,[-1]],173,[28,[54]]],[[10,[1]]],51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40],[40,[[182,[-1,-2]]],[],[]],[40,[[183,[-1,-2]]],[],[]],[40,[[184,[-1]]],[]],[40],[40],[[-1,[15,[78]]],-1,[]],[[27,[5,[-1]],-2],27,18,21],[[27,41,27],[[10,[27]]]],[[41,41,41],[[10,[41]]]],[[88,41,88],[[10,[88]]]],[[33,41,33],[[10,[33]]]],[[[130,[-1]],41,[5,[[49,[-1]]]]],[[10,[[5,[[49,[-1]]]]]]],51],0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[185,185],[[10,[[128,[186]]]]]],[[185,185],[[10,[1]]]],[187,1],[[187,17],1],[[185,29],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[185,26],[[10,[9]]]],[186,186],[188,188],[185,185],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],186],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[187,-1],1,42],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[185,26],[[188,188],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[187,17],2],[[186,17],[[15,[68]]]],[187,185],[[186,43],44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[176,[128,[186]]],185],[176,185],[[17,40],185],[[186,68],17],[[185,40],[[10,[48]]]],[[185,40],48],[186,[[114,[77]]]],[[186,68],[[15,[17]]]],[185,[[128,[186]]]],[[188,-1],1,136],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[185,9],[185,2],[186,2],[186,2],[185,189],[186,40],[185,40],[185,176],[185,[[10,[40]]]],[185,17],[[17,40],187],[189,15],[[186,186],2],[[185,2],1],[189,[[1,[40,[15,[40]]]]]],[[185,2],185],[[185,29],185],0,[185,185],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[185,[[10,[185]]]],[185,2],[185,[[10,[190]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],191],[40,-1,[]],[40,-1,[]],[[],1],[191,1],[40,1],[[],1],[-1,-1,[]],[[],191],[[],40],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[[],2],[-1,-2,[],[]],0,[[],1],[[],1],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[40,-1,[]],[192],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],0,[[192,43],[[90,[1,163]]]],[[192,43],[[90,[1,163]]]],[[193,43],[[90,[1,163]]]],[[193,43],[[90,[1,163]]]],[-1,192,[[165,[[99,[17]]]]]],[-1,-1,[]],[194,193],[195,193],[-1,-1,[]],[196,193],[197,193],[198,193],[-1,193,[139,57,58]],[[]],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,144,139],0,0,0,0,[[],1],[-1,144,199],[-1,73,[]],[-1,73,[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[200,200],[[-1,-2],1,[],[]],[40,-1,[]],[40,-1,[]],[40,1],[[43,201,40],44],[-1,-1,[]],[[],200],[[],40],[-1,-2,[],[]],[200,1],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[190,[38,[9]],202],[[10,[1]]]],[[190,41],[[10,[190]]]],[[190,[28,[169]]],[[10,[190]]]],[[190,[28,[169]]],[[10,[190]]]],[[190,77,40],190],[[190,[28,[203]],52],190],[[190,[28,[[15,[203]]]]],190],[[190,190]],[[190,9]],[[190,9]],[190,190],[190,190],[[190,17,-1],[[10,[190]]],204],[[190,40,-1],[[10,[190]]],204],[190,190],[190,190],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[190,190],[205,205],[206,206],[190,190],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[190,17],[[10,[9]]]],[[190,-1],[[10,[[38,[9]]]]],42],[[],206],[[],190],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[190,[15,[[28,[67]]]]],[[10,[190]]]],[[190,9]],[[190,9]],[[190,190]],[40,1],[40,1],[40,1],[40,1],[40,1],[[190,17],[[10,[190]]]],[[190,17],[[10,[9]]]],[[190,[28,[-1]]],190,[[72,[17]]]],[[190,[184,[17]]],190],[[190,[15,[[28,[-1]]]]],[[10,[190]]],[[72,[17]]]],[190,[[38,[26]]]],[[],190],[[206,206],2],[[190,190],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[190,40],0,[[190,-1],[[10,[190]]],42],[[190,[38,[9]]],[[10,[190]]]],[[190,190],[[10,[1]]]],[190,[[38,[82]]]],[[190,134],[[10,[190]]]],[[190,41],[[10,[190]]]],[[190,17],[[15,[40]]]],[[205,43],44],[[206,43],44],[[190,43],44],[[190,43],44],[[190,190],2],[[190,190],2],[[190,190],[[10,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[202,190],[-1,-1,[]],[-1,190,42],[[[28,[207]]],[[10,[190]]]],[[[28,[207]],202],[[10,[190]]]],[[-1,202],[[10,[190]]],16],[[190,40],[[15,[[38,[48]]]]]],[190,[[38,[17]]]],[190,[[38,[169]]]],[190,[[28,[9]]]],[190,[[38,[9]]]],[[190,40],[[10,[207]]]],[[190,40,207],[[10,[1]]]],[[190,40,207],1],[190,[[15,[[10,[26]]]]]],0,[[190,-1],[[10,[208]]],42],[[190,-1],[[10,[208]]],42],[[190,[38,[9]],2,2],[[10,[208]]]],[[190,[15,[173]]],[[10,[177]]]],[[190,[15,[40]]],190],[190,40],[190,[[10,[[15,[9]]]]]],[[190,205],[[10,[[15,[9]]]]]],[190,[[10,[[15,[9]]]]]],[[190,[28,[9]]],[[10,[190]]]],[[190,[28,[9]]],[[10,[190]]]],[[190,[28,[9]]],190],[[190,205],[[10,[[15,[9]]]]]],[[190,[209,[40]]]],[[190,40]],[[190,210]],[[190,[211,[40]]]],[[190,[69,[40]]]],[[190,[212,[40]]]],[[190,[213,[40]]]],[[190,17]],[[],40],[[],40],[[],40],[[],40],[[],40],[[190,40,-1],[[10,[190]]],214],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[190,[[10,[41]]]],[190,2],[190,[[10,[41]]]],[190,[[63,[9]]]],[190,215],[190,216],[190,190],[190,190],[190,190],[[190,-1,-2],[[10,[190]]],[[217,[169]]],[[217,[169]]]],[[190,218],[[10,[190]]]],[190,190],[[190,9]],[[190,9]],[[190,190]],[190,40],[[[38,[-1]]],[[10,[190]]],214],[[[38,[9]]],190],[215,15],[216,15],[190,190],[[190,-1,2],[[10,[[38,[190]]]]],[[217,[73]]]],[[190,-1,2],[[10,[[38,[190]]]]],[[217,[73]]]],[[190,-1],[[10,[-2]]],19,[]],[[190,-1],[[10,[-2]]],19,[]],[[190,-1,-2],[[10,[-3]]],19,[],[]],[190,[[15,[9]]]],[[190,190],2],[[190,67,81],[[10,[190]]]],[[190,9]],[[190,190]],[[190,9]],[[190,17,17],[[10,[190]]]],[[190,17,-1],[[10,[190]]],214],[[190,40,-1],[[10,[190]]],214],[[190,17,-1],[[10,[190]]],214],[190,190],0,[[190,67,2,2,[15,[54]]],[[10,[190]]]],[[190,9,2,2,[15,[54]]],[[10,[190]]]],[[190,40,2,2,[15,[54]]],[[10,[190]]]],[190,202],[[190,-1],[[10,[190]]],42],[[190,40],[[15,[9]]]],[[190,-1],[[10,[190]]],[[219,[40]]]],[[190,-1],[[10,[190]]],42],[[190,-1],[[10,[[38,[9]]]]],[[217,[169]]]],[[190,-1,220],[[10,[190]]],42],[[190,-1,202],[[10,[190]]],42],[[190,[28,[-1]]],[[10,[1]]],[[72,[17]]]],[190,[[1,[40,40]]]],[[190,77],190],[190,2],[190,1],[215,[[1,[40,[15,[40]]]]]],[216,[[1,[40,[15,[40]]]]]],[[190,77,40],190],[[190,77,40],190],[[190,-1,-2,2],[[10,[190]]],[[217,[169]]],[[217,[2]]]],[[190,[38,[9]],[38,[2]],2,2,[15,[[1,[77,40]]]],2],[[10,[190]]]],[[190,-1,-2,2],[[10,[190]]],[[217,[169]]],[[217,[2]]]],[[190,17,29],[[10,[190]]]],[[190,34],190],[[190,9]],[[190,9]],[[190,190]],[190,190],[[190,[15,[40]]],190],[[190,30],[[10,[190]]]],[[190,30],190],[[190,221],[[10,[86]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,73,[]],[[190,40,-1,-2],[[10,[190]]],[[217,[2]]],[[217,[169]]]],[[190,[15,[17]],[15,[[89,[73,[38,[73]]]]]]],[[10,[190]]]],[[190,17,-1],[[10,[190]]],204],[[190,40,-1],[[10,[190]]],204],[[190,17],[[10,[40]]]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[222,[[10,[190]]]],[-1,[[90,[-2]]],[],[]],[[[1,[223,[28,[166]]]]],[[10,[190]]]],[[-1,202],[[10,[190]]],16],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[190,[15,[[28,[73]]]],206,[15,[[1,[77,40]]]]],[[10,[190]]]],[[190,2,[15,[[28,[73]]]],206,[15,[[1,[77,40]]]]],[[10,[190]]]],[[190,[15,[[28,[73]]]],206,[15,[[1,[77,40]]]]],[[10,[190]]]],[[190,34],190],[[190,190],[[10,[190]]]],[[190,190],[[10,[190]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[190,40],[[190,-1],[[10,[190]]],214],[[190,-1,202],[[10,[190]]],214],[[190,9],190],[[190,17,[15,[84]]],[[10,[190]]]],[[190,17,[15,[84]]],190],0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[218,218],[[-1,-2],1,[],[]],[[],218],[40,-1,[]],[40,-1,[]],[40,1],[[218,218],2],[[218,43],44],[-1,-1,[]],0,[[],40],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],0,0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[208,[[10,[190]]]],0,[224,[[28,[[38,[84]]]]]],[[208,-1],[[10,[190]]],[21,57,58]],[12,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[224,224],[12,12],[208,208],[225,225],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[208,[[10,[190]]]],[[],224],[[],12],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[226],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],0,[[227,-1],[],228],[40,1],[40,1],[40,1],[40,1],[40,1],[224,1],[40,1],[40,1],[40,1],[[224,224],2],[[12,12],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[229,84],[224,[[28,[84]]]],[208,[[10,[190]]]],[224,[[38,[84]]]],[[224,43],44],[[12,43],44],[[208,43],44],[[225,43],44],[[225,43],44],[[17,225],73],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[[1,[[38,[84]],[38,[[38,[84]]]]]]]]],224],[[[38,[[38,[230]]]]],224],[[[38,[230]]],224],[224,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,224,42],[-1,224,46],[[12,40],229],[208,12],[208,12],[12,30],[[12,17],30],[[-1,2,2],[[10,[12]]],[]],[[-1,2,2],[[10,[12]]],[]],[208,[[10,[190]]]],[12,224],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,224],[-1,-2,[],[]],[224],[224],[-1,-2,[],[]],[224],[224],[229,2],[12,2],[224,2],[224,[[232,[[231,[[63,[84]]]],[63,[[38,[84]]]]]]]],[12,233],[208,[[38,[9]]]],[[208,[15,[[1,[77,40]]]]],[[38,[9]]]],[208,[[10,[190]]]],[229,40],[12,40],[208,[[10,[190]]]],[208,[[10,[190]]]],[208,[[10,[190]]]],[208,[[10,[190]]]],[208,[[10,[190]]]],[[[38,[84]],[38,[[38,[84]]]],2],224],[[190,[38,[9]],12,[15,[[38,[73]]]]],208],[233,15],[[233,40],15],[[208,-1],[[10,[190]]],[19,57,58]],[-1,[],[]],[12,227],[[208,67,81],[[10,[190]]]],[[208,-1],208,42],[[12,77,40],226],[224,1],[12,1],[[208,34],[[10,[190]]]],[208,[[10,[190]]]],[12,[[38,[84]]]],[12,[[38,[84]]]],[208,12],[208,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,73,[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[12,12],[12,224],[12,234],[[208,34],[[10,[190]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[224,-1],9,[19,57,58]],[[224,-1],9,[19,57,58]],[[[28,[[235,[84]]]],-1],9,[19,57,58]],[[[28,[[235,[84]]]],-1],9,[19,57,58]],[[[28,[-1]],-2,236],[[92,[-1]]],[141,237],[16,47]],[[[28,[-1]],78,-2,236],[[92,[-1]]],[141,237],[16,47]],[[[5,[-1]],84,84],[[5,[-1]]],18],[[234,[28,[37]]],2],[[-1,12],9,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,[[-1,190,12],[[10,[9]]],[]],[-1,[[10,[17]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[238,48],[[15,[1]]]],[[239,48],1],[[239,48],1],[[[28,[48]]],[[10,[[1,[26,40]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[238,238],[239,239],[207,207],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[28,[-1]]],26,[[240,[26]]]],[[],207],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[[207,207],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[207,43],44],[[[1,[26,40]]],238],[-1,-1,[]],[[[1,[26,40]]],239],[-1,-1,[]],[-1,-1,[]],[[-1,40],202,16],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[238,9],[239,9],[[26,40],238],[[26,40],239],[[[38,[48]]],207],[[238,40],9],[[239,40],9],[[[28,[207]],[15,[40]]],202],[[[28,[207]],[15,[40]]],[[10,[202]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[190]]],[[10,[190]]]],[[[28,[190]]],[[10,[190]]]],[[[5,[-1]],[5,[-1]]],[[15,[67]]],6],[[[5,[-1]],[5,[-1]],34],[[15,[67]]],6],0,0,0,0,0,0,0,[[-1,3],1,[]],[[54,54],54],[[[28,[190]],[15,[173]]],[[10,[[1,[[38,[177]],173]]]]]],[[-1,54],54,[]],[[[116,[77]],173,[38,[54]]],1],[241,54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[241,241],[[-1,-2],1,[],[]],[[],242],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[[241,241],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[242,54],[[243,43],44],[[241,43],44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[173,54],[173,54],[[243,-1],1,136],[[241,-1],1,136],0,0,[[],40],[[],40],[[],40],[-1,54,244],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[[28,[34]]]],54],241],0,[[[245,[243,-1,-2]],84,54,190,-3,-4],1,[],246,19,21],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[-1,173,[38,[54]]],[[10,[1]]],[]],[[-1,173,[38,[54]]],[[10,[1]]],[]],[[-1,173,[28,[54]]],[[10,[1]]],[]],[[-1,173,[28,[54]]],[[10,[1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[242,[28,[34]]],1],[[242,74],1],[[242,77],1],[[242,68],1],[[242,54],1],0,[-1,54,[]],[[54,54,54],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[[128,[-1,-2]]],-2,[],247],[[[128,[-1,111]]],248,249],[[[128,[-1,-2]]],[],85,247],[[[128,[-1,111]]],74,250],[[[128,[-1,-2]]],-1,85,247],[-1,[[28,[34]]],[]],[[[128,[[28,[[251,[-1]]]],-2]]],[[128,[[28,[-1]],-2]]],[],[100,247]],[[[128,[[251,[-1]],-2]]],[[128,[-1,-2]]],[],[100,247]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[128,[-1,-2]]],-1,85,247],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[128,[-1,111]]],[[15,[139]]],[139,85]],0,[[-1,9],[[10,[9]]],[]],[[-1,-2],[[10,[9]]],[],8],[81,81],[252,252],[253,253],[[[128,[-1,-2]]],[[128,[-1,-2]]],85,[247,100]],[83,83],[221,221],[166,166],[254,254],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[128,[-1,-2]],[128,[-1,-2]]],171,[255,85],247],[[-1,-2],171,[],[]],[166,123],0,0,0,[[],1],[-1,1,247],[[],81],[[],[[128,[-1,111]]],256],[[],83],[[],221],[[],254],0,[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[[128,[-1,-2]]],-1,85,247],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[[128,[-1,111]]],17,[139,85]],0,[[[128,[122,-1]]],[[90,[[128,[-2,-1]],[128,[122,-1]]]]],[247,100],[122,57,58]],[[[128,[122,-1]]],[[128,[-2,-1]]],[247,100],[122,57,58]],[[[128,[-1,-2]]],[[257,[-1,-2]]],85,[100,247]],[40,1],[40,1],[40,1],[40,1],[40,1],[[[128,[-1,-2]]],1,85,247],[40,1],[40,1],[40,1],[40,1],[[81,81],2],[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],[[[128,[45,111]],45],2],[[[128,[258,111]],258],2],[[221,221],2],[[166,166],2],[[254,254],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[254,-1],254,19],[[[128,[259,111]]],[[90,[1,198]]]],[[144,43],[[90,[1,163]]]],[[144,43],[[90,[1,163]]]],[[81,43],[[90,[1,163]]]],[[252,43],[[90,[1,163]]]],[[253,43],[[90,[1,163]]]],[[[128,[-1,-2]],43],[[90,[1,163]]],[199,85],247],[[[128,[-1,-2]],43],[[90,[1,163]]],85,247],[[[128,[-1,-2]],43],[[90,[1,163]]],[124,85],247],[[221,43],44],[[166,43],[[90,[1,163]]]],[[254,43],[[90,[1,163]]]],0,[198,144],[-1,-1,[]],[260,144],[193,144],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[-1,-2]]],[[128,[[28,[-1]],-2]]],[],[247,100]],[[[28,[-1]]],[[128,[[28,[-1]],111]]],100],[261,[[128,[262,111]]]],[263,[[128,[264,111]]]],[265,[[128,[265,111]]]],[73,[[128,[17,111]]]],[[[99,[-1]]],[[128,[-1,111]]],[266,85]],[264,[[128,[264,111]]]],[-1,-1,[]],[267,[[128,[265,111]]]],[[[235,[-1]]],[[128,[[28,[-1]],111]]],[]],[268,-1,[]],[-1,[[128,[-1,111]]],[]],[[[108,[-1,-2]]],[[128,[-1,-2]]],85,247],[17,[[128,[17,111]]]],[262,[[128,[262,111]]]],[[[128,[17,111]]],[[128,[[28,[34]],111]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[166,111]]],254],[-1,-1,[]],[[-1,[15,[78]]],-2,[],[]],[[[269,[77]],[269,[34]],[15,[78]]],-1,[]],[[[269,[77]],[269,[34]],[15,[78]]],-1,[]],[-1,[[128,[[28,[-2]],111]]],42,[]],[[-1,40],[[118,[77]]],42],[-1,[[118,[77]]],42],[[-1,123],[[118,[77]]],42],[[-1,40],[[118,[77]]],42],[-1,[[128,[[28,[-2]],111]]],46,57],[[],[[128,[-1,111]]],85],[-1,[[128,[-2,-1]]],247,85],[[17,-1],-2,[],[]],[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],[[[128,[-1,-2]]],[[15,[-1]]],85,247],[[[128,[-1,-2]]],-1,85,247],[254,[[38,[17]]]],[[37,40],48],[-1,40,[]],[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],[-1,2,[]],[[81,-1],1,136],[[[128,[-1,-2]],-3],1,[270,85],247,136],[[221,-1],1,136],[[166,-1],1,136],[[],1],[-1,1,[100,247]],[[254,17],[[15,[40]]]],[[[28,[68]]],[[0,[16]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[128,[-1,-2]]],[[15,[-1]]],[],247],[[[128,[-1,-2]]],[],85,247],[[[128,[271]]],9],[[],2],[[],2],[[],2],[-1,2,85],0,[[[128,[259,111]]],2],[[[128,[259,111]]],2],[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],0,[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],[[[128,[-1,-2]]],-1,100,[247,100]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,[-1,9,[]],[-1,9,[]],0,0,[[[128,[-1,-2]],[128,[-1,-2]]],2,[],247],[[-1,40],[[15,[40]]],[]],[[17,-1],-2,[],[]],[-1,[[128,[-1,111]]],[]],[[-1,123,2],166,[[165,[73]]]],[-1,[[128,[-2,111]]],204,[]],[[-1,-2],[[128,[-1,-2]]],[],247],[[],[[128,[[251,[-1]],111]]],[]],[-1,[[128,[[251,[-2]],-1]]],247,[]],[40,[[128,[[28,[[251,[-1]]]],111]]],[]],[[40,-1],[[128,[[28,[[251,[-2]]]],-1]]],247,[]],[[],[[128,[[251,[-1]],111]]],[]],[-1,[[128,[[251,[-2]],-1]]],247,[]],[40,[[128,[[28,[[251,[-1]]]],111]]],[]],[[40,-1],[[128,[[28,[[251,[-2]]]],-1]]],247,[]],0,[[[128,[-1,-2]],[128,[-1,-2]]],[[15,[171]]],[],247],[-1,[[272,[[128,[-1,111]]]]],[]],[[-1,-2],[[272,[[128,[-1,-2]]]]],[],247],0,0,0,0,0,[-1,9,[]],[-1,9,[]],[[[128,[-1,111]],273],1,[139,85]],[[[128,[-1,-2]],[128,[-1,-2]]],2,85,247],[[-1,67,81],[[10,[9]]],[]],[[[128,[259,111]],[28,[34]]],[[90,[40,198]]]],[[[128,[259,111]],274],[[90,[1,198]]]],[[[128,[259,111]],[38,[34,111]]],[[90,[40,198]]]],[[[128,[259,111]],73],[[90,[40,198]]]],[[[128,[259,111]],[28,[275]]],[[90,[40,198]]]],[[[128,[259,111]],276],[[90,[54,198]]]],[[-1,40,2],1,[]],0,[[-1,40,40],-1,85],[[-1,40,40],-1,85],[144,[[15,[139]]]],[[[128,[-1,111]]],[[15,[139]]],[139,85]],[[-1,34],9,[]],0,[[[128,[-1,-2]]],40,85,247],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,73,[]],[-1,73,[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[[[128,[[28,[-1]],-2]]],[[90,[[128,[[235,[-1]],-2]]]]],[],[247,100]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[[128,[-1,111]],277]]],[]],[[-1,-2],[[90,[[128,[-1,-2]],277]]],[],247],[[],[[90,[[128,[[251,[-1]],111]],277]]],[]],[-1,[[90,[[128,[[251,[-2]],-1]],277]]],247,[]],[[],[[90,[[128,[[251,[-1]],111]],277]]],[]],[-1,[[90,[[128,[[251,[-2]],-1]],277]]],247,[]],[-1,[[90,[[272,[[128,[-1,111]]]],277]]],[]],[[-1,-2],[[90,[[272,[[128,[-1,-2]]]],277]]],[],247],[[[128,[-1,-2]]],[[90,[-1,[128,[-1,-2]]]]],[],247],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[[128,[-1,-2]]],-1,100,[247,100]],0,[[-1,34],9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[128,[-1,-2]]],40,85,247],0,0,[[166,[278,[73,73,111]]],166],[[254,[278,[73,73,111]]],254],[[144,19],144],[[[128,[259,111]],[28,[34]]],[[90,[40,198]]]],[[[128,[259,111]],[28,[279]]],[[90,[40,198]]]],0,0,0,[[-1,[15,[78]]],-2,[],[]],[[[269,[77]],[269,[34]],[15,[78]]],-1,[]],[[[269,[77]],[269,[34]],[15,[78]]],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[45,123],[[108,[45,111]]]],[40,-1,[]],[40,-1,[]],[40,1],[[280,[15,[123]]],[[90,[[118,[77]],193]]]],[-1,-1,[]],[[],40],[-1,-2,[],[]],[280,2],[40,280],[280,[[28,[77]]]],[[280,45],1],[280,1],[[280,[28,[[108,[45,111]]]]],1],[280,1],[[280,[15,[45]]],1],[280,[[281,[77]]]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],0,[282,122],[282,[[108,[45,111]]]],[282,122],[-1,-2,[],[]],[-1,-2,[],[]],[282,123],[[],282],[40,-1,[]],[40,-1,[]],[40,1],[[282,40],1],[[282,43],[[90,[1,163]]]],[-1,-1,[]],[[],40],[-1,-2,[],[]],[282,40],[282,1],[[282,40],1],[282,1],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[282,[[15,[283]]]],[-1,-2,[],[]],0,[[-1,40,40],-1,85],[[-1,40,40],-1,85],0,[[],1],[[],1],[[],2],0,0,[[-1,40,40],[[114,[77]]],16],[[-1,40,40],[[116,[77]]],16],[54,1],0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[202,202],[[-1,-2],1,[],[]],[[202,17],2],[[],202],[40,-1,[]],[40,-1,[]],[40,1],[[202,202],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[202,43],44],[-1,-1,[]],[[[28,[9]]],202],[207,202],[-1,202,42],[[202,17],[[15,[26]]]],[[202,40],[[15,[[1,[169,26]]]]]],[[202,40],[[15,[[1,[169,26]]]]]],[[202,17],[[15,[82]]]],[[202,17],[[15,[[1,[40,169,26]]]]]],[-1,[[38,[17]]],[]],[202,[[38,[17]]]],[[-1,17],[[15,[40]]],[]],[[202,17],[[15,[40]]]],[[],40],[[202,40,169,26],[[10,[[15,[26]]]]]],[-1,-2,[],[]],[202],[202,2],[202,[[0,[16]]]],[202,[[0,[16,59]]]],[202,[[0,[16,59]]]],[202,[[0,[16,59]]]],[202,40],[[202,202],1],[[],202],[[202,40,169,26],[[10,[202]]]],[[202,17],[[15,[26]]]],[[202,17,169],[[15,[169]]]],[[202,17,26],[[15,[26]]]],[[202,40,26],[[15,[26]]]],[[202,17],[[15,[26]]]],[[202,40],[[15,[[1,[169,26]]]]]],[202,254],[-1,-2,[],[]],[[202,202],[[10,[2]]]],[-1,[[90,[-2]]],[],[]],[[202,17],[[10,[26]]]],[[202,40],[[10,[[1,[169,26]]]]]],[[202,17],[[10,[82]]]],[[202,17],[[10,[[1,[40,169,26]]]]]],[[202,17],[[10,[26]]]],[[-1,17],[[10,[40]]],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],[40,202],[[202,169,26],[[15,[26]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[-1,9,[]],[-1,9,[]],[[17,[38,[37]],123],[[10,[9]]]],[9,[[10,[9]]]],[[9,-1],[],[7,66]],[[9,9]],[[9,9]],[[9,-1],[],[7,66]],[[9,9],[[10,[9]]]],[[-1,29],30,[]],[[-1,29],30,[]],[-1,[[10,[30]]],[]],[-1,[[10,[30]]],[]],0,[[9,40],37],[-1,122,[]],[-1,122,[]],[-1,122,[]],[-1,122,[]],[9,27],[271,[[5,[-1]]],18],[271,[[5,[-1]]],18],[9,271],[-1,[[10,[40]]],[]],[-1,[[10,[40]]],[]],[9,[[10,[40]]]],[9,[[10,[33]]]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[9,[[10,[41]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,26],[[10,[9]]],[]],[[9,26],[[10,[9]]]],[[9,26],[[10,[9]]]],[9,[[10,[185]]]],[9,[[10,[9]]]],[[-1,9],[[10,[9]]],[]],[[-1,9],[[10,[9]]],[]],[[9,9],[[10,[9]]]],[[9,-1],[[10,[9]]],8],[-1,36,[]],[-1,[[38,[37]]],[]],[-1,[[38,[37]]],[]],[9,[[38,[37]]]],[9,9],[52,52],[9,9],[-1,[[128,[271]]],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[9,2],9],[[9,2],9],[[9,2],9],[[9,2],9],[9,[[10,[56]]]],[[],9],[40,-1,[]],[40,-1,[]],[40,-1,[]],[9],[40,-1,[]],[40,-1,[]],[40,-1,[]],[[9,77,284],[[10,[9]]]],[[9,-1],[],[7,66]],[[9,9]],[[9,9]],[[9,-1],[],[7,66]],[[9,9],[[15,[67]]]],[40,1],[40,1],[40,1],[-1,9,[]],[-1,9,[]],[-1,26,[]],[-1,26,[]],[[52,52],2],[[9,9],2],[[9,17],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,9],[[10,[41]]]],[[9,17]],[[9,-1],[],164],[[9,9],[[10,[41]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[9,40],[9,[[10,[9]]]],[[9,9],[[10,[9]]]],[[9,48,40],[[10,[9]]]],[9,[[10,[145]]]],[9,[[10,[146]]]],[-1,[[99,[82]]],[]],[-1,[[99,[82]]],[]],[[9,134],[[10,[9]]]],[[-1,41],[[10,[9]]],[]],[[9,41,2],[[10,[9]]]],[9,[[10,[9]]]],[[52,43],44],[[9,43],44],[[9,43],44],[9,73],[-1,-1,[]],[-1,-1,[]],[[[5,[-1]]],9,18],[-1,-1,[]],[[17,[28,[48]],2],[[10,[9]]]],[[17,[28,[48]],26,2],[[10,[9]]]],[[17,37],[[10,[9]]]],[[17,[38,[37]],26],9],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[-1,9,42],[[17,[38,[53]]],9],[[17,[38,[77]]],9],[[17,[38,[54]]],9],[[17,[38,[67]]],9],[[17,[38,[68]]],9],[[17,[38,[74]]],9],[[17,40,26],9],[[-1,40],[[10,[48]]],[]],[9,40],[9,14],[[-1,40],[[15,[50]]],[]],[[-1,40],[[15,[50]]],[]],[[-1,40],48,[]],[[-1,40],48,[]],[[9,9],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,17],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,9],[[10,[41]]]],[[9,17],[[10,[41]]]],[-1,2,[]],[[9,[15,[40]]],9],[9,[[10,[179]]]],[9,[[10,[180]]]],[9,[[10,[181]]]],[9,[[10,[178]]]],[9,[[10,[30]]]],0,[9,[[10,[27]]]],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,190],[-1,-2,[],[]],[-1,9,85],[9,9],[-1,2,[]],[-1,2,[]],[9,[[10,[41]]]],[9,[[10,[41]]]],[9,[[10,[41]]]],[9,[[10,[41]]]],[-1,41,[]],[-1,41,[]],[[],2],[[],2],[[],2],[9,52],[9,285],[[9,2,2],[[10,[[15,[67]]]]]],[-1,40,[]],[[-1,40],9,[]],[[-1,40],9,[]],[9,[[10,[27]]]],[[9,9],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,17],[[10,[41]]]],[[9,17],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,9],[[10,[41]]]],[9,[[15,[-1]]],66],[-1,9,[]],[-1,9,[]],[-1,[[15,[67]]],[]],[-1,[[15,[67]]],[]],[9,9],[-1,[[15,[67]]],[]],[-1,[[15,[67]]],[]],[-1,9,[]],[-1,9,[]],[9,[[15,[-1]]],66],[-1,9,[]],[-1,9,[]],[[9,-1],[],[7,66]],[[9,9]],[[9,9]],[[9,-1],[],[7,66]],[-1,40,[]],[-1,40,[]],[-1,[[10,[40]]],[]],[-1,[[10,[40]]],[]],[-1,17,[]],[[17,-1],9,[[72,[[28,[[99,[17]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[9]]]]]]]],[[17,[69,[54]]],9],[[17,-1],9,[[72,[[28,[[15,[[38,[34]]]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[17]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[[28,[34]]]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[77]]]]]]]],[[17,-1],9,[[72,[[28,[67]]]]]],[[17,-1],9,[[72,[[28,[53]]]]]],[[17,-1],9,[[72,[[28,[[15,[74]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[[99,[17]]]]]]]]]],[[17,-1],9,[[72,[[28,[[99,[[28,[34]]]]]]]]]],[[17,-1],9,[[72,[[28,[17]]]]]],[[17,-1],9,[[72,[[28,[[28,[34]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[67]]]]]]]],[[17,-1],9,[[72,[[28,[73]]]]]],[[17,[69,[68]]],9],[[17,[69,[77]]],9],[[17,-1],9,[[72,[[28,[[38,[34]]]]]]]],[[17,-1],9,214],[[17,-1],9,[[72,[[28,[[15,[2]]]]]]]],[[17,9],9],[[17,-1],9,[[72,[[28,[48]]]]]],[[17,-1],9,[[72,[[28,[68]]]]]],[[17,-1],9,[[72,[[28,[2]]]]]],[[17,-1],9,[[72,[[28,[[15,[53]]]]]]]],[[17,-1],9,[[72,[[28,[54]]]]]],[[17,-1],9,[[72,[[28,[9]]]]]],[[17,[69,[74]]],9],[[17,-1],9,[[72,[[28,[[15,[68]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[54]]]]]]]],[[17,-1],9,[[72,[[28,[77]]]]]],[[17,-1],9,[[72,[[28,[74]]]]]],[[17,-1],9,[[72,[[28,[[15,[73]]]]]]]],[[17,-1],9,[[72,[[28,[[15,[[99,[[28,[34]]]]]]]]]]]],[[17,26],9],[[-1,40,40],9,[]],[[17,40],9],[285,15],[[9,17],[[10,[41]]]],[[9,-1],[[10,[41]]],164],[[9,9],[[10,[41]]]],[[9,-1],[],164],[[9,9],[[10,[41]]]],[[9,17]],[9,[[10,[0]]]],[-1,40,[]],0,[9,286],[9,9],[[-1,67,81],[[10,[9]]],[]],[[-1,67,81],[[10,[9]]],[]],[-1,9,[]],[[9,-1],[],[7,66]],[[9,9]],[[9,-1],[],[7,66]],[[-1,17],1,[]],[[9,17],9],[[9,[28,[77]]],[[10,[9]]]],[-1,9,[]],[[-1,19,83],[[10,[9]]],[]],[[-1,19,83],[[10,[9]]],[]],[[9,68],[[10,[9]]]],[[9,67,2,2,[15,[54]]],[[10,[9]]]],[[9,40,2,2,[15,[54]]],[[10,[9]]]],[[9,9],2],[[9,9],2],[[9,52],1],[[-1,77],9,[]],[-1,1,[]],[-1,1,[]],[9,1],[[9,[15,[54]]],9],[285,[[1,[40,[15,[40]]]]]],[[9,2],[[10,[[15,[67]]]]]],[[-1,77,40],9,[]],[[9,2],9],[[-1,29],9,[]],[[-1,29],9,[]],[[-1,34],9,[]],[[-1,34],9,[]],[[9,40],[[10,[[99,[17]]]]]],[[9,26],[[10,[9]]]],[[9,-1],[],[7,66]],[[9,-1],[],[7,66]],[[9,9]],[[9,9]],[9,[[15,[-1]]],66],[9,9],[[9,[15,[40]]],9],[[-1,30],[[10,[9]]],[]],[[9,40],9],[[-1,[28,[84]]],[[10,[9]]],[]],[[-1,[28,[84]]],9,[]],[[9,[28,[84]],2],9],[[9,30,2],[[10,[9]]]],[[-1,30],9,[]],[[9,[28,[84]]],9],[[9,30,2],9],[[-1,40],9,[]],[[-1,40],9,[]],[[9,40],37],[9,[[10,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[9,[[99,[9]]]],[-1,73,[]],[[9,9],[[10,[9]]]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[[[1,[17,37]]],[[10,[9]]]],[[[1,[17,[38,[37]]]]],[[10,[9]]]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[9,[[10,[175]]]],[9,[[10,[176]]]],[9,[[10,[177]]]],[9,[[10,[174]]]],[-1,[[10,[9]]],[]],[-1,[[10,[9]]],[]],[9,30],[9,[[10,[9]]]],[271,[[10,[[5,[-1]]]]],18],0,[9,[[10,[88]]]],[[-1,34],9,[]],[[-1,34],9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,17],9],[[9,41,9],[[10,[9]]]],0,0,0,0,[[-1,9],[],[]],[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],0,[[-1,9],[],[]],[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[-1,9],[],[]],[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[-1,9],[],[]],[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[-1,9],[],[]],[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],0,0,[[-1,9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[[5,[-1]],9],[[10,[9]]],[]],[[-1,-2],[[10,[9]]],[],8],[[[5,[-1]],-2],[[10,[9]]],[],8],[[[5,[-1]],-2],[[10,[9]]],[],8],0,0,0,[[-1,3],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[284,284],[[-1,-2],1,[],[]],[[],284],[40,-1,[]],[40,-1,[]],0,[40,1],[[284,284],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[284,43],44],[-1,-1,[]],[[284,-1],1,136],[[],40],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],0,0,[[-1,3],1,[]],[287,9],[287,9],[-1,-2,[],[]],[-1,-2,[],[]],[287,287],[[-1,-2],1,[],[]],[287,9],[40,-1,[]],[40,-1,[]],[40,1],[-1,-1,[]],[[],40],[-1,-2,[],[]],[9,287],[[287,37],1],[-1,-2,[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,-2,[],[]],[[287,37,-1],-2,19,[]],0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[],40],[[[28,[9]]],[[38,[9]]]],[[[38,[190]]],[[10,[190]]]],[-1,[[10,[190]]],42],[-1,190,42],[[[5,[-1]],[5,[-2]]],[[1,[[99,[[5,[-1]]]],[99,[[5,[-2]]]]]]],18,18],[[[5,[-1]],[5,[-2]],[5,[-3]]],[[1,[[99,[[5,[-1]]]],[99,[[5,[-2]]]],[99,[[5,[-3]]]]]]],18,18,18],[-1,2,85],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[288,[-1,-2]]],[[288,[-1,-2]]],[100,16],100],[[-1,-2],1,[],[]],[[[5,[-1]],[5,[-1]]],[[1,[[99,[[5,[-1]]]],[99,[[5,[-1]]]]]]],18],[[9,9],[[1,[9,9]]]],[-1,-2,[85,47],289],[-1,-2,[85,47],290],[[[15,[78]],[15,[78]]],[[15,[78]]]],[[[15,[78]],[15,[78]]],[[15,[78]]]],[-1,[[10,[190]]],42],[-1,190,42],[[[291,[-1]]],[],[]],[40,-1,[]],[40,-1,[]],[[[292,[-1]]],[],[]],[40,-1,[]],[40,-1,[]],[[[292,[-1]]],[],[]],[40,-1,[]],[40,-1,[]],[40,1],[40,1],[40,1],[[9,17],[[10,[1]]]],[[[291,[9]],[291,[9]]],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[-1,-2,-3],[[15,[-2]]],16,[],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[292,[41]]],42],[-1,[[292,[[5,[-2]]]]],42,6],[-1,-2,42,[]],[-1,[[292,[41]]],42],[-1,[[292,[[5,[-2]]]]],42,6],[-1,[[292,[[5,[-2]]]]],46,6],[-1,[[292,[[5,[-2]]]]],47,6],[-1,[[292,[41]]],47],[[9,9],[[10,[9]]]],[[26,26],[[15,[26]]]],[[149,149],149],[[[291,[9]],-1],1,136],[[],40],[[],40],[[],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[292,[-1]]],-1,[]],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[73,111]]],[]],[-1,[[38,[[110,[109]],111]]],[]],[-1,[[292,[-1]]],[]],[[-1,40],[[288,[-1,-2]]],16,[]],[[[288,[-1,-2]]],15,16,[]],[[[288,[-1,-2]]],15,[16,39],[]],0,[[[288,[-1,-2]]],[[1,[40,[15,[40]]]]],16,[]],[[[28,[-1]],77,40],[[28,[-1]]],[]],[[[5,[-1]],40],[[10,[[38,[[5,[-1]]]]]]],18],[[190,40],[[10,[[38,[190]]]]]],[-1,-2,[],[]],[[-1,40],[[288,[-1]]],85],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[[26,26],[[10,[26]]]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,[[90,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[26,-1],-2,19,[]],[[[28,[[38,[-1]]]]],[[1,[40,[38,[40]]]]],[]],[190,[[0,[16]]]],[[[28,[-2]]],[[38,[-1]]],[57,58,20],[[72,[[28,[-1]]]]]],[9,[[38,[9]]]]],"c":[2988,3059,3120,3123,3124,3125,3126,3127,3132,3135,3140,3141,3178],"p":[[15,"tuple"],[15,"bool"],[3,"Private",4543],[3,"ListType",1102],[3,"ChunkedArray",37],[8,"PolarsNumericType",1102],[8,"Num",4544],[8,"ToPrimitive",4545],[3,"Series",3966],[6,"PolarsResult",3383],[8,"NumOpsDispatchInner",4348],[4,"GroupsProxy",2952],[3,"BooleanType",1102],[3,"Settings",37],[4,"Option",4546],[8,"Iterator",4547],[15,"str"],[8,"PolarsDataType",1102],[8,"Fn",4548],[8,"Copy",4549],[8,"FnMut",4548],[3,"Float64Type",1102],[3,"Float32Type",1102],[3,"Utf8Type",1102],[3,"BinaryType",1102],[4,"DataType",1102],[6,"ListChunked",1102],[15,"slice"],[3,"SortOptions",898],[6,"IdxCa",1102],[8,"PolarsIntegerType",1102],[3,"SortMultipleOptions",898],[6,"BinaryChunked",1102],[15,"u8"],[8,"NumOpsDispatchCheckedInner",4373],[6,"ChunkIdIter",37],[6,"ArrayRef",3383],[3,"Vec",4550],[8,"DoubleEndedIterator",4551],[15,"usize"],[6,"BooleanChunked",1102],[8,"IntoIterator",4552],[3,"Formatter",4553],[6,"Result",4553],[8,"Array",4554],[8,"IntoParallelIterator",4555],[8,"TrustedLen",4556],[4,"AnyValue",1102],[3,"ObjectType",1102],[8,"PolarsObjectSafe",806],[8,"PolarsObject",806],[4,"IsSorted",3966],[15,"f32"],[15,"u64"],[3,"Int128Type",1102],[6,"DecimalChunked",1102],[8,"Send",4549],[8,"Sync",4549],[8,"ExactSizeIterator",4557],[8,"PolarsFloatType",1102],[3,"Iter",4558],[3,"IterNames",4558],[3,"Iter",4559],[3,"Map",4560],[4,"ChunkedArrayLayout",37],[8,"NumCast",4545],[15,"f64"],[15,"u32"],[3,"Range",4561],[3,"UInt32Type",1102],[3,"UInt64Type",1102],[8,"AsRef",4562],[3,"String",4563],[15,"i32"],[3,"Int32Type",1102],[3,"Int64Type",1102],[15,"i64"],[3,"Bitmap",4564],[8,"ParallelIterator",4555],[8,"IndexedParallelIterator",4555],[4,"QuantileInterpolOptions",3383],[3,"Field",1102],[3,"RollingOptionsFixedWindow",3383],[6,"IdxSize",3383],[8,"Sized",4549],[6,"Array2",4565],[6,"ArrayView1",4565],[6,"Utf8Chunked",1102],[4,"Either",4566],[4,"Result",4567],[3,"TypeId",4568],[3,"PrimitiveArray",4569],[3,"BinaryChunkedBuilder",427],[3,"BinaryChunkedBuilderCow",427],[3,"Utf8ChunkedBuilderCow",427],[3,"BooleanChunkedBuilder",427],[3,"PrimitiveChunkedBuilder",427],[3,"Utf8ChunkedBuilder",427],[4,"Cow",4570],[8,"Clone",4571],[3,"AnonymousListBuilder",561],[3,"AnonymousOwnedListBuilder",561],[3,"ListBooleanChunkedBuilder",561],[3,"ListPrimitiveChunkedBuilder",561],[3,"ListUtf8ChunkedBuilder",561],[3,"ListBinaryChunkedBuilder",561],[8,"ListBuilderTrait",561],[3,"Box",4572],[3,"LazyCompact",4573],[3,"SmartString",4574],[3,"Global",4575],[3,"BooleanArray",4576],[3,"BoolIterNoNull",711],[3,"Utf8Array",4577],[3,"Utf8IterNoNull",711],[3,"BinaryArray",4578],[3,"BinaryIterNoNull",711],[3,"ListArray",4579],[3,"ListIterNoNull",711],[3,"SomeIterator",711],[3,"ObjectArray",806],[8,"Any",4568],[4,"ArrowDataType",1102],[8,"Debug",4553],[6,"ObjectValueIter",806],[3,"BitmapIter",4580],[4,"ZipValidity",4581],[3,"Arc",3383],[3,"ObjectChunkedBuilder",865],[6,"ObjectChunked",1102],[8,"AnonymousObjectBuilder",888],[6,"ObjectConverter",888],[6,"BuilderConstructor",888],[4,"FillNullStrategy",898],[3,"OffsetsBuffer",4582],[8,"Hasher",4583],[8,"BinaryFnMut",1069],[8,"TernaryFnMut",1069],[8,"Error",4584],[8,"PartialOrd",4585],[8,"IsFloat",3383],[3,"RowsEncoded",4586],[3,"NaiveDateTime",4587],[4,"PolarsError",3383],[6,"Float32Chunked",1102],[6,"Float64Chunked",1102],[3,"Logical",1102],[3,"OwnedObject",1102],[4,"TimeUnit",1102],[3,"UInt8Type",1102],[3,"UInt16Type",1102],[3,"Int8Type",1102],[3,"Int16Type",1102],[3,"DateType",1102],[3,"DecimalType",1102],[3,"DatetimeType",1102],[3,"DurationType",1102],[3,"CategoricalType",1102],[3,"TimeType",1102],[4,"ArrowTimeUnit",1102],[8,"ArrayFromIter",1102],[8,"ArrayFromIterDtype",1102],[3,"Error",4553],[8,"NumericNative",1102],[8,"Into",4562],[3,"ArrowField",3383],[4,"IntegerType",4588],[4,"PrimitiveType",4589],[6,"String",4590],[6,"Int128Chunked",1102],[4,"Ordering",4585],[4,"PhysicalType",4588],[3,"RandomState",4591],[6,"UInt8Chunked",1102],[6,"UInt16Chunked",1102],[6,"UInt32Chunked",1102],[6,"UInt64Chunked",1102],[6,"Int8Chunked",1102],[6,"Int16Chunked",1102],[6,"Int32Chunked",1102],[6,"Int64Chunked",1102],[6,"PlHashMap",1102],[6,"PlIdHashMap",1102],[6,"PlHashSet",1102],[3,"CategoricalChunked",2385],[4,"RevMapping",2385],[3,"CategoricalChunkedBuilder",2385],[3,"StrHashLocal",2385],[3,"CatIter",2385],[3,"DataFrame",2659],[3,"StringCacheHolder",2529],[3,"ErrString",2552],[4,"ArrowError",2552],[3,"Utf8Error",4592],[3,"Utf8Error",4593],[3,"TryReserveError",4594],[3,"FromUtf8Error",4563],[3,"Error",4595],[8,"Display",4553],[4,"FloatFmt",2637],[15,"i128"],[3,"Schema",3901],[6,"ChunkId",1102],[8,"FnOnce",4548],[4,"NullStrategy",2659],[4,"UniqueKeepStrategy",2659],[3,"Row",3205],[3,"GroupBy",2952],[3,"RangeInclusive",4561],[3,"RangeFull",4561],[3,"RangeFrom",4561],[3,"RangeTo",4561],[3,"RangeToInclusive",4561],[8,"IntoSeries",3966],[3,"RecordBatchIter",2659],[3,"PhysRecordBatchIter",2659],[8,"IntoVec",4433],[3,"MeltArgs",2927],[8,"RangeBounds",4561],[6,"SchemaRef",3901],[4,"IndexOrder",3383],[3,"StructArray",4596],[6,"ArrowChunk",2659],[3,"GroupsIdx",2952],[4,"GroupByMethod",2952],[3,"SlicedGroups",2952],[3,"GroupsProxyParIter",2952],[8,"UnindexedConsumer",4597],[4,"GroupsIndicator",2952],[6,"IdxItem",2952],[3,"Copied",4598],[3,"Zip",4599],[3,"GroupsProxyIter",2952],[6,"GroupsSlice",2952],[15,"array"],[6,"DynArgs",3383],[8,"NativeType",4600],[4,"AnyValueBuffer",3205],[4,"AnyValueBufferTrusted",3205],[8,"Borrow",4601],[3,"BytesHash",3301],[3,"IdHasher",3301],[3,"IdxHash",3301],[8,"AsU64",3380],[3,"HashMap",4602],[8,"BuildHasher",4583],[8,"Allocator",4603],[3,"BorrowedFd",4604],[8,"AsFd",4604],[8,"AsRawFd",4605],[19,"MaybeUninit",4606],[3,"RollingVarParams",3383],[3,"RollingQuantileParams",3383],[3,"ArrowSchema",3383],[8,"Ord",4585],[8,"Default",4607],[3,"Weak",4608],[8,"Scalar",4609],[3,"File",4610],[4,"Error",4611],[3,"CString",4612],[3,"CStr",4613],[3,"OsString",4614],[3,"OsStr",4614],[3,"Path",4615],[8,"ToOwned",4570],[3,"PathBuf",4615],[15,"never"],[3,"Buffer",4616],[8,"Hash",4583],[8,"SeriesTrait",3966],[3,"Pin",4617],[3,"Request",4584],[3,"BorrowedCursor",4618],[3,"IoSliceMut",4619],[4,"SeekFrom",4619],[3,"AllocError",4603],[3,"BTreeMap",4620],[3,"IoSlice",4619],[3,"AnonymousBuilder",3840],[3,"Offsets",4582],[3,"MutableNullArray",3864],[3,"MutableBitmap",4621],[4,"NullBehavior",4381],[3,"SeriesIter",3966],[6,"SeriesPhysIter",3966],[3,"UnstableSeries",4409],[3,"TrustMyLength",4433],[8,"FromIteratorReversed",4622],[8,"FromTrustedLenIterator",4433],[3,"Wrap",4433],[3,"NoNull",4433],[8,"ArrayArithmetics",419],[8,"ChunkedBuilder",427],[8,"NewChunkedArray",427],[8,"ChunkedCollectInferIterExt",697],[8,"ChunkedCollectIterExt",697],[8,"ChunkApply",898],[8,"ChunkCompare",898],[6,"FillNullLimit",898],[8,"ChunkApplyKernel",898],[8,"ChunkSort",898],[8,"ChunkUnique",898],[8,"ChunkCast",898],[8,"ChunkCumAgg",898],[8,"ChunkExplode",898],[8,"ChunkFillNullValue",898],[8,"ChunkFilter",898],[8,"ChunkFull",898],[8,"ChunkFullNull",898],[8,"ChunkAnyValue",898],[8,"IsFirstDistinct",898],[8,"IsLastDistinct",898],[8,"ChunkAgg",898],[8,"ChunkQuantile",898],[8,"ChunkExpandAtIndex",898],[8,"ChunkReverse",898],[8,"ChunkRollApply",898],[8,"ChunkSet",898],[8,"ChunkShift",898],[8,"ChunkShiftFill",898],[8,"ChunkVar",898],[8,"ChunkTake",898],[8,"ChunkTakeUnchecked",898],[8,"ChunkBytes",898],[8,"ChunkZip",898],[4,"RevMappingBuilder",2385],[8,"InitHashMaps",1102],[8,"StaticArray",1102],[8,"AsRefDataType",1102],[3,"Nested",1102],[3,"Flat",1102],[8,"LogicalType",1102],[8,"ArrayCollectIterExt",1102],[8,"GetAnyValue",1102],[6,"PlIndexMap",1102],[6,"PlIndexSet",1102],[8,"IntoGroupsProxy",2952],[13,"Slice",3187],[8,"AggList",3189],[8,"TakeExtremum",3189],[8,"PhysicalAggExpr",3202],[8,"FxHash",3301],[8,"VecHash",3301],[8,"MutableBitmapExtension",3383],[8,"NumOpsDispatchChecked",3383],[8,"FromData",3834],[8,"FromDataUtf8",3834],[8,"FromDataBinary",3834],[8,"ListFromIter",3383],[8,"NamedFromOwned",3383],[8,"ValueSize",3383],[8,"PolarsArray",3383],[8,"ChunkAggSeries",3383],[8,"QuantileAggSeries",3383],[8,"IndexToUsize",3383],[8,"NamedFrom",3383],[8,"SlicedArray",3383],[8,"VarAggSeries",3383],[8,"Utf8FromIter",3896],[8,"BinaryFromIter",3896],[8,"IndexOfSchema",3901],[8,"LhsNumOps",4348],[8,"NumOpsDispatch",4348],[8,"CustomIterTools",4433]],"b":[[52,"impl-Add-for-ChunkedArray%3CT%3E"],[53,"impl-Add%3CN%3E-for-ChunkedArray%3CT%3E"],[54,"impl-Add-for-%26ChunkedArray%3CT%3E"],[55,"impl-Add%3CN%3E-for-%26ChunkedArray%3CT%3E"],[69,"impl-ChunkedArray%3CFloat64Type%3E"],[70,"impl-ChunkedArray%3CFloat32Type%3E"],[75,"impl-ChunkedArray%3CUtf8Type%3E"],[76,"impl-ChunkedArray%3CT%3E"],[77,"impl-ChunkedArray%3CBinaryType%3E"],[97,"impl-Settings"],[98,"impl-Flags-for-Settings"],[141,"impl-Div%3CN%3E-for-ChunkedArray%3CT%3E"],[142,"impl-Div-for-ChunkedArray%3CT%3E"],[143,"impl-Div-for-%26ChunkedArray%3CT%3E"],[144,"impl-Div%3CN%3E-for-%26ChunkedArray%3CT%3E"],[153,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[154,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[155,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[156,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[163,"impl-Debug-for-ChunkedArray%3CBooleanType%3E"],[164,"impl-Debug-for-ChunkedArray%3CT%3E"],[165,"impl-Binary-for-Settings"],[166,"impl-LowerHex-for-Settings"],[167,"impl-Debug-for-Settings"],[168,"impl-Octal-for-Settings"],[169,"impl-UpperHex-for-Settings"],[177,"impl-Settings"],[178,"impl-Flags-for-Settings"],[184,"impl-FromIterator%3C(Vec%3C%3CT+as+PolarsNumericType%3E::Native%3E,+Option%3CBitmap%3E)%3E-for-ChunkedArray%3CT%3E"],[185,"impl-FromIterator%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[186,"impl-FromIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[189,"impl-FromTrustedLenIterator%3COption%3C%3CT+as+PolarsNumericType%3E::Native%3E%3E-for-ChunkedArray%3CT%3E"],[190,"impl-FromTrustedLenIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[213,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[214,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[215,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[216,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[259,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[260,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[261,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[262,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[263,"impl-ChunkedArray%3CBooleanType%3E"],[264,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[266,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[267,"impl-ChunkedArray%3CBooleanType%3E"],[270,"impl-ChunkedArray%3CBooleanType%3E"],[271,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[273,"impl-ChunkedArray%3CBooleanType%3E"],[274,"impl-ChunkedArray%3CT%3E"],[275,"impl-Mul%3CN%3E-for-ChunkedArray%3CT%3E"],[276,"impl-Mul%3CN%3E-for-%26ChunkedArray%3CT%3E"],[277,"impl-Mul-for-ChunkedArray%3CT%3E"],[278,"impl-Mul-for-%26ChunkedArray%3CT%3E"],[282,"impl-NamedFrom%3CRange%3Cu32%3E,+UInt32Type%3E-for-ChunkedArray%3CUInt32Type%3E"],[283,"impl-NamedFrom%3CT,+%5BOption%3Cu64%3E%5D%3E-for-ChunkedArray%3CUInt64Type%3E"],[284,"impl-NamedFrom%3CT,+%5BOption%3CVec%3Cu8%3E%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[285,"impl-NamedFrom%3CT,+%5BVec%3Cu8%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[286,"impl-NamedFrom%3CT,+%5BString%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[287,"impl-NamedFrom%3CRange%3Ci32%3E,+Int32Type%3E-for-ChunkedArray%3CInt32Type%3E"],[288,"impl-NamedFrom%3CT,+%5BOption%3Cbool%3E%5D%3E-for-ChunkedArray%3CBooleanType%3E"],[289,"impl-NamedFrom%3CT,+%5Bi64%5D%3E-for-ChunkedArray%3CInt64Type%3E"],[290,"impl-NamedFrom%3CT,+%5Bf64%5D%3E-for-ChunkedArray%3CFloat64Type%3E"],[291,"impl-NamedFrom%3CT,+%5BOption%3CString%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[292,"impl-NamedFrom%3CT,+%5BOption%3Cf32%3E%5D%3E-for-ChunkedArray%3CFloat32Type%3E"],[293,"impl-NamedFrom%3CT,+%5BOption%3Ci64%3E%5D%3E-for-ChunkedArray%3CInt64Type%3E"],[294,"impl-NamedFrom%3CT,+%5Bu64%5D%3E-for-ChunkedArray%3CUInt64Type%3E"],[295,"impl-NamedFrom%3CRange%3Ci64%3E,+Int64Type%3E-for-ChunkedArray%3CInt64Type%3E"],[296,"impl-NamedFrom%3CT,+%5BOption%3Ci32%3E%5D%3E-for-ChunkedArray%3CInt32Type%3E"],[297,"impl-NamedFrom%3CT,+%5Bi32%5D%3E-for-ChunkedArray%3CInt32Type%3E"],[298,"impl-NamedFrom%3CT,+%5Bf32%5D%3E-for-ChunkedArray%3CFloat32Type%3E"],[299,"impl-NamedFrom%3CRange%3Cu64%3E,+UInt64Type%3E-for-ChunkedArray%3CUInt64Type%3E"],[300,"impl-NamedFrom%3CT,+%5Bbool%5D%3E-for-ChunkedArray%3CBooleanType%3E"],[301,"impl-NamedFrom%3CT,+%5BOption%3Cf64%3E%5D%3E-for-ChunkedArray%3CFloat64Type%3E"],[302,"impl-NamedFrom%3CT,+%5Bu32%5D%3E-for-ChunkedArray%3CUInt32Type%3E"],[303,"impl-NamedFrom%3CT,+%5BOption%3Cu32%3E%5D%3E-for-ChunkedArray%3CUInt32Type%3E"],[311,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[312,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[314,"impl-ChunkCompare%3C%26ChunkedArray%3CT%3E%3E-for-ChunkedArray%3CT%3E"],[315,"impl-ChunkCompare%3CRhs%3E-for-ChunkedArray%3CT%3E"],[319,"impl-ChunkedArray%3CListType%3E"],[320,"impl-ChunkedArray%3CUtf8Type%3E"],[321,"impl-ChunkedArray%3CListType%3E"],[322,"impl-ChunkedArray%3CUtf8Type%3E"],[332,"impl-Rem%3CN%3E-for-ChunkedArray%3CT%3E"],[333,"impl-Rem-for-ChunkedArray%3CT%3E"],[334,"impl-Rem%3CN%3E-for-%26ChunkedArray%3CT%3E"],[335,"impl-Rem-for-%26ChunkedArray%3CT%3E"],[360,"impl-Sub-for-ChunkedArray%3CT%3E"],[361,"impl-Sub%3CN%3E-for-%26ChunkedArray%3CT%3E"],[362,"impl-Sub%3CN%3E-for-ChunkedArray%3CT%3E"],[363,"impl-Sub-for-%26ChunkedArray%3CT%3E"],[367,"impl-ChunkedArray%3CBooleanType%3E"],[368,"impl-ChunkAgg%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-ChunkedArray%3CT%3E"],[372,"impl-ChunkTake%3CI%3E-for-ChunkedArray%3CT%3E"],[373,"impl-ChunkTake%3CChunkedArray%3CUInt32Type%3E%3E-for-ChunkedArray%3CT%3E"],[374,"impl-ChunkTakeUnchecked%3CI%3E-for-ChunkedArray%3CT%3E"],[375,"impl-ChunkTakeUnchecked%3CChunkedArray%3CUInt32Type%3E%3E-for-ChunkedArray%3CT%3E"],[380,"impl-ChunkedArray%3CListType%3E"],[381,"impl-ChunkedArray%3CT%3E"],[811,"impl-ArrayFromIterDtype%3C%26T%3E-for-ObjectArray%3CT%3E"],[812,"impl-ArrayFromIterDtype%3COption%3C%26T%3E%3E-for-ObjectArray%3CT%3E"],[834,"impl-ObjectArray%3CT%3E"],[835,"impl-StaticArray-for-ObjectArray%3CT%3E"],[847,"impl-ArrayFromIterDtype%3C%26T%3E-for-ObjectArray%3CT%3E"],[848,"impl-ArrayFromIterDtype%3COption%3C%26T%3E%3E-for-ObjectArray%3CT%3E"],[856,"impl-StaticArray-for-ObjectArray%3CT%3E"],[857,"impl-ObjectArray%3CT%3E"],[859,"impl-StaticArray-for-ObjectArray%3CT%3E"],[860,"impl-ObjectArray%3CT%3E"],[862,"impl-ObjectArray%3CT%3E"],[863,"impl-Array-for-ObjectArray%3CT%3E"],[866,"impl-AnonymousObjectBuilder-for-ObjectChunkedBuilder%3CT%3E"],[867,"impl-ObjectChunkedBuilder%3CT%3E"],[869,"impl-ObjectChunkedBuilder%3CT%3E"],[870,"impl-AnonymousObjectBuilder-for-ObjectChunkedBuilder%3CT%3E"],[1311,"impl-Add-for-%26ChunkedArray%3CBooleanType%3E"],[1312,"impl-Add-for-ChunkedArray%3CBooleanType%3E"],[1313,"impl-Add-for-ChunkedArray%3CUtf8Type%3E"],[1314,"impl-Add%3C%26str%3E-for-%26ChunkedArray%3CUtf8Type%3E"],[1315,"impl-Add-for-%26ChunkedArray%3CUtf8Type%3E"],[1316,"impl-Add-for-ChunkedArray%3CBinaryType%3E"],[1317,"impl-Add-for-%26ChunkedArray%3CBinaryType%3E"],[1318,"impl-Add%3C%26%5Bu8%5D%3E-for-%26ChunkedArray%3CBinaryType%3E"],[1397,"impl-BitAnd-for-%26ChunkedArray%3CBooleanType%3E"],[1398,"impl-BitAnd-for-ChunkedArray%3CBooleanType%3E"],[1399,"impl-BitOr-for-%26ChunkedArray%3CBooleanType%3E"],[1400,"impl-BitOr-for-ChunkedArray%3CBooleanType%3E"],[1401,"impl-BitXor-for-ChunkedArray%3CBooleanType%3E"],[1402,"impl-BitXor-for-%26ChunkedArray%3CBooleanType%3E"],[1663,"impl-PartialEq%3CDataType%3E-for-DataType"],[1664,"impl-PartialEq-for-DataType"],[1671,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1672,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1673,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1674,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1677,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1678,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1679,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1680,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1714,"impl-Display-for-AnyValue%3C\'_%3E"],[1715,"impl-Debug-for-AnyValue%3C\'a%3E"],[1716,"impl-Display-for-DataType"],[1717,"impl-Debug-for-DataType"],[1719,"impl-Debug-for-TimeUnit"],[1720,"impl-Display-for-TimeUnit"],[1731,"impl-From%3CK%3E-for-AnyValue%3C\'_%3E"],[1733,"impl-From%3COption%3CT%3E%3E-for-AnyValue%3C\'a%3E"],[1734,"impl-From%3CAnyValue%3C\'_%3E%3E-for-DataType"],[1735,"impl-From%3C%26DataType%3E-for-DataType"],[1736,"impl-From%3C%26AnyValue%3C\'a%3E%3E-for-DataType"],[1738,"impl-From%3C%26AnyValue%3C\'a%3E%3E-for-Field"],[1739,"impl-From%3C%26Field%3E-for-Field"],[1763,"impl-From%3CIntegerType%3E-for-DataType"],[1764,"impl-From%3CPrimitiveType%3E-for-DataType"],[1766,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CListType%3E"],[1767,"impl-FromIterator%3COption%3CBox%3Cdyn+Array%3E%3E%3E-for-ChunkedArray%3CListType%3E"],[1768,"impl-FromIterator%3COption%3CSeries%3E%3E-for-ChunkedArray%3CListType%3E"],[1770,"impl-FromIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1771,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[1772,"impl-FromIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1773,"impl-FromIterator%3CPtr%3E-for-ChunkedArray%3CBinaryType%3E"],[1779,"impl-FromTrustedLenIterator%3COption%3CSeries%3E%3E-for-ChunkedArray%3CListType%3E"],[1780,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CListType%3E"],[1782,"impl-FromTrustedLenIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1783,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[1784,"impl-FromTrustedLenIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1785,"impl-FromTrustedLenIterator%3CPtr%3E-for-ChunkedArray%3CBinaryType%3E"],[1793,"impl-FromParallelIterator%3Cbool%3E-for-ChunkedArray%3CBooleanType%3E"],[1794,"impl-FromParallelIterator%3COption%3Cbool%3E%3E-for-ChunkedArray%3CBooleanType%3E"],[1795,"impl-FromParallelIterator%3CPtr%3E-for-ChunkedArray%3CUtf8Type%3E"],[1796,"impl-FromParallelIterator%3COption%3CPtr%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1880,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1881,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1882,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1883,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1886,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1887,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1888,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1889,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1989,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1990,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1991,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1992,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[1995,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[1996,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[1997,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[1998,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[2034,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+str%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[2035,"impl-NamedFrom%3CT,+%5B%26str%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[2036,"impl-NamedFrom%3CT,+%5BOption%3C%26str%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[2037,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+str%3E%3E%5D%3E-for-ChunkedArray%3CUtf8Type%3E"],[2038,"impl-NamedFrom%3CT,+%5B%26%5Bu8%5D%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2039,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+%5Bu8%5D%3E%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2040,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+%5Bu8%5D%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2041,"impl-NamedFrom%3CT,+%5BOption%3C%26%5Bu8%5D%3E%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2042,"impl-NamedFrom%3CS,+%5BOption%3CT%3E%5D%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[2043,"impl-NamedFrom%3C%26%5BT%5D,+%26%5BT%5D%3E-for-ChunkedArray%3CObjectType%3CT%3E%3E"],[2052,"impl-Not-for-ChunkedArray%3CBooleanType%3E"],[2053,"impl-Not-for-%26ChunkedArray%3CBooleanType%3E"],[2056,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[2057,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[2058,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[2059,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2062,"impl-ChunkCompare%3C%26str%3E-for-ChunkedArray%3CUtf8Type%3E"],[2063,"impl-ChunkCompare%3C%26ChunkedArray%3CUtf8Type%3E%3E-for-ChunkedArray%3CUtf8Type%3E"],[2064,"impl-ChunkCompare%3C%26ChunkedArray%3CBinaryType%3E%3E-for-ChunkedArray%3CBinaryType%3E"],[2065,"impl-ChunkCompare%3C%26%5Bu8%5D%3E-for-ChunkedArray%3CBinaryType%3E"],[2591,"impl-Debug-for-ErrString"],[2592,"impl-Display-for-ErrString"],[2593,"impl-Display-for-ArrowError"],[2594,"impl-Debug-for-ArrowError"],[2597,"impl-From%3CUtf8Error%3E-for-ArrowError"],[2598,"impl-From%3CUtf8Error%3E-for-ArrowError"],[2600,"impl-From%3CTryReserveError%3E-for-ArrowError"],[2601,"impl-From%3CFromUtf8Error%3E-for-ArrowError"],[2602,"impl-From%3CError%3E-for-ArrowError"],[2681,"impl-Add%3C%26DataFrame%3E-for-%26DataFrame"],[2682,"impl-Add%3C%26Series%3E-for-DataFrame"],[2683,"impl-Add%3C%26Series%3E-for-%26DataFrame"],[2722,"impl-Div%3C%26Series%3E-for-%26DataFrame"],[2723,"impl-Div%3C%26Series%3E-for-DataFrame"],[2724,"impl-Div%3C%26DataFrame%3E-for-%26DataFrame"],[2753,"impl-Display-for-DataFrame"],[2754,"impl-Debug-for-DataFrame"],[2791,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-DataFrame"],[2792,"impl-Index%3Cusize%3E-for-DataFrame"],[2793,"impl-Index%3CRangeFull%3E-for-DataFrame"],[2794,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-DataFrame"],[2795,"impl-Index%3CRange%3Cusize%3E%3E-for-DataFrame"],[2796,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-DataFrame"],[2797,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-DataFrame"],[2798,"impl-Index%3C%26str%3E-for-DataFrame"],[2824,"impl-Mul%3C%26Series%3E-for-DataFrame"],[2825,"impl-Mul%3C%26Series%3E-for-%26DataFrame"],[2826,"impl-Mul%3C%26DataFrame%3E-for-%26DataFrame"],[2841,"impl-Rem%3C%26Series%3E-for-%26DataFrame"],[2842,"impl-Rem%3C%26DataFrame%3E-for-%26DataFrame"],[2843,"impl-Rem%3C%26Series%3E-for-DataFrame"],[2875,"impl-Sub%3C%26Series%3E-for-%26DataFrame"],[2876,"impl-Sub%3C%26Series%3E-for-DataFrame"],[2877,"impl-Sub%3C%26DataFrame%3E-for-%26DataFrame"],[2896,"impl-TryFrom%3CStructArray%3E-for-DataFrame"],[2898,"impl-TryFrom%3C(Chunk%3CBox%3Cdyn+Array%3E%3E,+%26%5BField%5D)%3E-for-DataFrame"],[3064,"impl-Debug-for-GroupByMethod"],[3065,"impl-Display-for-GroupByMethod"],[3072,"impl-From%3CVec%3C(Vec%3Cu32%3E,+Vec%3CVec%3Cu32%3E%3E)%3E%3E-for-GroupsIdx"],[3073,"impl-From%3CVec%3CVec%3C(u32,+Vec%3Cu32%3E)%3E%3E%3E-for-GroupsIdx"],[3074,"impl-From%3CVec%3C(u32,+Vec%3Cu32%3E)%3E%3E-for-GroupsIdx"],[3108,"impl-IntoIterator-for-GroupsIdx"],[3109,"impl-IntoIterator-for-%26GroupsIdx"],[3111,"impl-IntoParallelIterator-for-%26GroupsIdx"],[3112,"impl-IntoParallelIterator-for-GroupsIdx"],[3496,"impl-Arc%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[3497,"impl-Arc%3CMaybeUninit%3CT%3E,+A%3E"],[3586,"impl-PartialEq-for-Arc%3CT,+A%3E"],[3587,"impl-PartialEq%3Cdyn+Array%3E-for-Arc%3Cdyn+Array%3E"],[3588,"impl-PartialEq%3Cdyn+Scalar%3E-for-Arc%3Cdyn+Scalar%3E"],[3610,"impl-Display-for-PolarsError"],[3611,"impl-Debug-for-PolarsError"],[3615,"impl-Display-for-Arc%3CT,+A%3E"],[3616,"impl-Pointer-for-Arc%3CT,+A%3E"],[3617,"impl-Debug-for-Arc%3CT,+A%3E"],[3622,"impl-From%3CError%3E-for-PolarsError"],[3624,"impl-From%3CError%3E-for-PolarsError"],[3625,"impl-From%3CArrowError%3E-for-PolarsError"],[3629,"impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E"],[3630,"impl-From%3C%26%5BT%5D%3E-for-Arc%3C%5BT%5D%3E"],[3631,"impl-From%3CCString%3E-for-Arc%3CCStr%3E"],[3632,"impl-From%3COsString%3E-for-Arc%3COsStr%3E"],[3633,"impl-From%3C%26Path%3E-for-Arc%3CPath%3E"],[3634,"impl-From%3CString%3E-for-Arc%3Cstr%3E"],[3635,"impl-From%3CCow%3C\'a,+B%3E%3E-for-Arc%3CB%3E"],[3636,"impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E"],[3638,"impl-From%3CPathBuf%3E-for-Arc%3CPath%3E"],[3639,"impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E"],[3641,"impl-From%3CT%3E-for-Arc%3CT%3E"],[3642,"impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E"],[3643,"impl-From%3C%26str%3E-for-Arc%3Cstr%3E"],[3644,"impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E"],[3645,"impl-From%3CArc%3Cstr%3E%3E-for-Arc%3C%5Bu8%5D%3E"],[3920,"impl-From%3C%26%5BSeries%5D%3E-for-Schema"],[3921,"impl-From%3C%26Row%3C\'_%3E%3E-for-Schema"],[3987,"impl-Add%3CT%3E-for-%26Series"],[3988,"impl-Add-for-%26Series"],[3989,"impl-Add-for-Series"],[3990,"impl-Add%3CT%3E-for-Series"],[4056,"impl-Div%3CT%3E-for-%26Series"],[4057,"impl-Div-for-Series"],[4058,"impl-Div-for-%26Series"],[4059,"impl-Div%3CT%3E-for-Series"],[4070,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4071,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4072,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4073,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4074,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4075,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4092,"impl-Display-for-Series"],[4093,"impl-Debug-for-Series"],[4103,"impl-FromIterator%3C%26bool%3E-for-Series"],[4104,"impl-FromIterator%3C%26f32%3E-for-Series"],[4105,"impl-FromIterator%3Cf64%3E-for-Series"],[4106,"impl-FromIterator%3COption%3Cbool%3E%3E-for-Series"],[4107,"impl-FromIterator%3Ci32%3E-for-Series"],[4108,"impl-FromIterator%3C%26u64%3E-for-Series"],[4109,"impl-FromIterator%3CString%3E-for-Series"],[4110,"impl-FromIterator%3Cu32%3E-for-Series"],[4111,"impl-FromIterator%3COption%3Ci64%3E%3E-for-Series"],[4112,"impl-FromIterator%3C%26i32%3E-for-Series"],[4113,"impl-FromIterator%3COption%3Cu64%3E%3E-for-Series"],[4114,"impl-FromIterator%3COption%3Ci32%3E%3E-for-Series"],[4115,"impl-FromIterator%3COption%3Cf32%3E%3E-for-Series"],[4116,"impl-FromIterator%3Ci64%3E-for-Series"],[4117,"impl-FromIterator%3C%26f64%3E-for-Series"],[4118,"impl-FromIterator%3C%26i64%3E-for-Series"],[4119,"impl-FromIterator%3COption%3Cu32%3E%3E-for-Series"],[4120,"impl-FromIterator%3C%26u32%3E-for-Series"],[4121,"impl-FromIterator%3Cu64%3E-for-Series"],[4122,"impl-FromIterator%3COption%3Cf64%3E%3E-for-Series"],[4123,"impl-FromIterator%3Cbool%3E-for-Series"],[4124,"impl-FromIterator%3C%26str%3E-for-Series"],[4125,"impl-FromIterator%3Cf32%3E-for-Series"],[4126,"impl-NamedFromOwned%3CVec%3Cf32%3E%3E-for-Series"],[4127,"impl-NamedFromOwned%3CVec%3Ci64%3E%3E-for-Series"],[4128,"impl-NamedFromOwned%3CVec%3Cu64%3E%3E-for-Series"],[4129,"impl-NamedFromOwned%3CVec%3Cf64%3E%3E-for-Series"],[4130,"impl-NamedFromOwned%3CVec%3Cu32%3E%3E-for-Series"],[4131,"impl-NamedFromOwned%3CVec%3Ci32%3E%3E-for-Series"],[4140,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4141,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4142,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4143,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4144,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4145,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4183,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4184,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4185,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4186,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4187,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4188,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4202,"impl-Mul%3CT%3E-for-%26Series"],[4203,"impl-Mul-for-%26Series"],[4204,"impl-Mul-for-Series"],[4205,"impl-Mul%3CT%3E-for-Series"],[4211,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+str%3E%5D%3E-for-Series"],[4212,"impl-NamedFrom%3CT,+%5BOption%3CSeries%3E%5D%3E-for-Series"],[4213,"impl-NamedFrom%3CRange%3Cu64%3E,+UInt64Type%3E-for-Series"],[4214,"impl-NamedFrom%3CT,+%5BOption%3CVec%3Cu8%3E%3E%5D%3E-for-Series"],[4215,"impl-NamedFrom%3CT,+%5BOption%3C%26str%3E%5D%3E-for-Series"],[4216,"impl-NamedFrom%3CT,+%5BOption%3C%26%5Bu8%5D%3E%5D%3E-for-Series"],[4217,"impl-NamedFrom%3CT,+%5BOption%3Ci64%3E%5D%3E-for-Series"],[4218,"impl-NamedFrom%3CT,+%5Bf64%5D%3E-for-Series"],[4219,"impl-NamedFrom%3CT,+%5Bf32%5D%3E-for-Series"],[4220,"impl-NamedFrom%3CT,+%5BOption%3Ci32%3E%5D%3E-for-Series"],[4221,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+str%3E%3E%5D%3E-for-Series"],[4222,"impl-NamedFrom%3CT,+%5BCow%3C\'a,+%5Bu8%5D%3E%5D%3E-for-Series"],[4223,"impl-NamedFrom%3CT,+%5B%26str%5D%3E-for-Series"],[4224,"impl-NamedFrom%3CT,+%5B%26%5Bu8%5D%5D%3E-for-Series"],[4225,"impl-NamedFrom%3CT,+%5BOption%3Cf64%3E%5D%3E-for-Series"],[4226,"impl-NamedFrom%3CT,+%5BString%5D%3E-for-Series"],[4227,"impl-NamedFrom%3CRange%3Cu32%3E,+UInt32Type%3E-for-Series"],[4228,"impl-NamedFrom%3CRange%3Ci64%3E,+Int64Type%3E-for-Series"],[4229,"impl-NamedFrom%3CT,+%5BVec%3Cu8%3E%5D%3E-for-Series"],[4230,"impl-NamedFrom%3CT,+T%3E-for-Series"],[4231,"impl-NamedFrom%3CT,+%5BOption%3Cbool%3E%5D%3E-for-Series"],[4232,"impl-NamedFrom%3C%26Series,+str%3E-for-Series"],[4233,"impl-NamedFrom%3CT,+%5BAnyValue%3C\'a%3E%5D%3E-for-Series"],[4234,"impl-NamedFrom%3CT,+%5Bu32%5D%3E-for-Series"],[4235,"impl-NamedFrom%3CT,+%5Bbool%5D%3E-for-Series"],[4236,"impl-NamedFrom%3CT,+%5BOption%3Cf32%3E%5D%3E-for-Series"],[4237,"impl-NamedFrom%3CT,+%5Bu64%5D%3E-for-Series"],[4238,"impl-NamedFrom%3CT,+ListType%3E-for-Series"],[4239,"impl-NamedFrom%3CRange%3Ci32%3E,+Int32Type%3E-for-Series"],[4240,"impl-NamedFrom%3CT,+%5BOption%3Cu32%3E%5D%3E-for-Series"],[4241,"impl-NamedFrom%3CT,+%5BOption%3Cu64%3E%5D%3E-for-Series"],[4242,"impl-NamedFrom%3CT,+%5Bi64%5D%3E-for-Series"],[4243,"impl-NamedFrom%3CT,+%5Bi32%5D%3E-for-Series"],[4244,"impl-NamedFrom%3CT,+%5BOption%3CString%3E%5D%3E-for-Series"],[4245,"impl-NamedFrom%3CT,+%5BOption%3CCow%3C\'a,+%5Bu8%5D%3E%3E%5D%3E-for-Series"],[4250,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4251,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4252,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4253,"impl-ChunkCompare%3CRhs%3E-for-Series"],[4254,"impl-ChunkCompare%3C%26Series%3E-for-Series"],[4255,"impl-ChunkCompare%3C%26str%3E-for-Series"],[4264,"impl-Rem%3CT%3E-for-Series"],[4265,"impl-Rem-for-%26Series"],[4266,"impl-Rem%3CT%3E-for-%26Series"],[4294,"impl-Sub%3CT%3E-for-Series"],[4295,"impl-Sub%3CT%3E-for-%26Series"],[4296,"impl-Sub-for-Series"],[4297,"impl-Sub-for-%26Series"],[4321,"impl-TryFrom%3C(%26str,+Box%3Cdyn+Array%3E)%3E-for-Series"],[4322,"impl-TryFrom%3C(%26str,+Vec%3CBox%3Cdyn+Array%3E%3E)%3E-for-Series"],[4491,"impl-FromIterator%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"],[4492,"impl-FromIterator%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[4494,"impl-FromTrustedLenIterator%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"],[4495,"impl-FromTrustedLenIterator%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[4497,"impl-FromIteratorReversed%3C%3CT+as+PolarsNumericType%3E::Native%3E-for-NoNull%3CChunkedArray%3CT%3E%3E"],[4498,"impl-FromIteratorReversed%3Cbool%3E-for-NoNull%3CChunkedArray%3CBooleanType%3E%3E"]]},\
"polars_io":{"doc":"","t":"IDIIILCALLLLAKALLLLLLLLLLAKKKLLLLAFAAMAKKKMAAAAALLLLLLALEDDENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLMFLLLLLLLLLLLLMLLLLLFLLLLLLLLLLALLMLLMLLLLLLLLLLLLLLLNNNENNNNENNNNNNNNDENNNNNNNNNENNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDEDDNNNNNEEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMLALMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLFFFDDLLLLFMMLLLLLLLMMMMMMLLLLDEDDDDDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNENDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNINELLLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDNDDNGNDDNNNEDEDDNNNNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLFLLLLLLDDIILLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLCCCHHHFFF","n":["ArrowReader","RowCount","SerReader","SerWriter","WriterFactory","__clone_box","async_glob","avro","borrow","borrow_mut","clone","clone_into","cloud","create_writer","csv","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","export","extension","finish","finish","fmt","from","init","into","ipc","is_cloud_url","json","mmap","name","ndjson","new","new","next_record_batch","offset","parquet","partition","pl_async","predicates","prelude","serialize","set_rechunk","to_owned","try_from","try_into","type_id","utils","vzip","AvroCompression","AvroReader","AvroWriter","Compression","Deflate","Deflate","Snappy","Snappy","__clone_box","arrow_schema","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","finish","finish","fmt","from","from","from","hash","init","init","init","into","into","into","new","new","schema","set_rechunk","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_columns","with_compression","with_n_rows","with_projection","CloudLocation","CloudReader","CloudWriter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bucket","build_object_store","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","execute","expansion","flush","fmt","from","from","from","glob","init","init","init","into","into","into","new","new","new","new_with_object_store","options","poll_read","poll_seek","prefix","queue","read_varint_async","scheme","sync_update","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","write_varint","AccessKey","AccessKeyId","AccountName","AmazonS3ConfigKey","ApplicationCredentials","AuthorityId","Aws","Azure","AzureConfigKey","Bucket","Bucket","Checksum","Client","Client","Client","ClientId","ClientSecret","CloudOptions","CloudType","ContainerCredentialsRelativeUri","ContainerName","CopyIfNotExists","DefaultRegion","Endpoint","Endpoint","FederatedTokenFile","File","Gcp","GoogleConfigKey","ImdsV1Fallback","MetadataEndpoint","MsiEndpoint","MsiResourceId","ObjectId","Region","SasKey","SecretAccessKey","ServiceAccount","ServiceAccountKey","Token","Token","UnsignedPayload","UseAzureCli","UseEmulator","UseFabricEndpoint","VirtualHostedStyleRequest","__clone_box","__clone_box","__clone_box","__clone_box","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_aws","build_azure","build_gcp","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","from_str","from_str","from_str","from_untyped_config","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","max_retries","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_aws","with_azure","with_gcp","AllColumns","AllColumnsSingle","Always","BatchedWriter","CsvEncoding","CsvReader","CsvWriter","LossyUtf8","Named","Necessary","Never","NonNumeric","NullValues","QuoteStyle","SerializeOptions","Utf8","__clone_box","__clone_box","__clone_box","__clone_box","batched","batched_borrowed_mmap","batched_borrowed_read","batched_mmap","batched_read","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","date_format","datetime_format","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","finish","float_precision","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_path","has_header","has_header","hash","hash","infer_schema","init","init","init","init","init","init","init","into","into","into","into","into","into","into","line_terminator","low_memory","new","new","null","quote_char","quote_style","raise_if_empty","read_impl","sample_size","separator","serialize","serialize","serialize","serialize","time_format","to_owned","to_owned","to_owned","to_owned","truncate_ragged_lines","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_batch_size","with_chunk_size","with_columns","with_comment_char","with_date_format","with_datetime_format","with_dtypes","with_dtypes_slice","with_encoding","with_end_of_line_char","with_float_precision","with_ignore_errors","with_line_terminator","with_missing_is_null","with_n_rows","with_n_threads","with_null_value","with_null_values","with_path","with_predicate","with_projection","with_quote_char","with_quote_char","with_quote_style","with_rechunk","with_row_count","with_schema","with_separator","with_separator","with_skip_rows","with_skip_rows_after_header","with_time_format","with_try_parse_dates","write_batch","BatchedCsvReaderMmap","BatchedCsvReaderRead","OwnedBatchedCsvReader","OwnedBatchedCsvReaderMmap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","next_batches","next_batches","next_batches","next_batches","to_batched_owned_mmap","to_batched_owned_read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","infer_file_schema","infer_file_schema_inner","is_compressed","ParquetStatistics","Statistics","borrow","borrow_mut","deref","deref_mut","deserialize","distinct_count","distinct_count","drop","eq","fmt","from","from","init","into","max_value","max_value","min_value","min_value","null_count","null_count","try_from","try_into","type_id","vzip","BatchedWriter","IpcCompression","IpcReader","IpcStreamReader","IpcStreamWriter","IpcStreamWriterOption","IpcWriter","IpcWriterOption","LZ4","ZSTD","__clone_box","arrow_schema","arrow_schema","batched","batched_async","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_writer","create_writer","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extension","extension","finish","finish","finish","finish","finish","finish_with_scan_ops","fmt","from","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","memory_mapped","new","new","new","new","new","new","new_async","schema","schema","serialize","set_rechunk","set_rechunk","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_columns","with_columns","with_compression","with_compression","with_compression","with_compression","with_extension","with_extension","with_n_rows","with_n_rows","with_projection","with_projection","with_row_count","with_row_count","write_batch","ArrowResult","Err","Json","JsonFormat","JsonLines","JsonReader","JsonWriter","Ok","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","finish","finish","from","from","from","infer_schema_len","init","init","init","into","into","into","new","new","set_rechunk","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_batch_size","with_ignore_errors","with_json_format","with_json_format","with_projection","with_schema","with_schema_overwrite","Borrowed","Mapped","MmapBytesReader","Owned","ReaderBytes","borrow","borrow_mut","deref","deref","deref_mut","drop","from","from","init","into","to_bytes","to_file","try_from","try_into","type_id","vzip","core","JsonLineReader","StructArray","__clone_box","arced","as_any","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","boxed","clone","clone_into","data_type","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fields","finish","fmt","from","from","from","from","from_path","get_fields","infer_schema_len","init","init","into","into","into_data","into_iter","iter","len","low_memory","new","new","new_empty","new_null","set_validity","slice","slice","slice_typed","slice_typed_unchecked","slice_unchecked","slice_unchecked","sliced","sliced_unchecked","to_boxed","to_owned","try_from","try_from","try_into","try_into","try_new","type_id","type_id","validity","validity","values","values_iter","vzip","vzip","with_chunk_size","with_n_rows","with_n_threads","with_path","with_rechunk","with_schema","with_schema_overwrite","with_validity","with_validity","Auto","BatchedParquetReader","BatchedWriter","Brotli","BrotliLevel","BrotliLevel","Columns","FileMetaDataRef","Gzip","GzipLevel","GzipLevel","Lz4Raw","Lzo","None","ParallelStrategy","ParquetAsyncReader","ParquetCompression","ParquetReader","ParquetWriter","RowGroups","Snappy","Uncompressed","Zstd","ZstdLevel","ZstdLevel","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_finish_with_scan_ops","batched","batched","batched","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","finish","finish","finish","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_uri","get_metadata","get_metadata","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","iter","new","new","new","next_batches","num_rows","num_rows","predicates","read_parallel","schema","schema","serialize","serialize","serialize","serialize","serialize","set_low_memory","set_parallel","set_rechunk","set_rechunk","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_statistics","use_statistics","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_columns","with_compression","with_data_pagesize_limit","with_hive_partition_columns","with_hive_partition_columns","with_n_rows","with_n_rows","with_predicate","with_projection","with_projection","with_row_count","with_row_count","with_row_group_size","with_statistics","write_batch","PartitionedWriter","borrow","borrow_mut","deref","deref_mut","drop","finish","from","init","into","new","try_from","try_into","type_id","vzip","with_parallel","RuntimeManager","block_on","block_on_potential_spawn","borrow","borrow_mut","deref","deref_mut","drop","from","get_runtime","init","into","try_from","try_into","type_id","vzip","BatchStats","ColumnStats","PhysicalIoExpr","StatsEvaluator","as_stats_evaluator","borrow","borrow","borrow_mut","borrow_mut","column_stats","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","dtype","evaluate","fmt","fmt","from","from","from_column_literal","get_min_state","get_stats","init","init","into","into","new","new","null_count","schema","serialize","serialize","should_read","to_max","to_min","to_min_max","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SerReader","SerWriter","cloud","BOOLEAN_RE","FLOAT_RE","INTEGER_RE","get_reader_bytes","materialize_projection","resolve_homedir"],"q":[[0,"polars_io"],[56,"polars_io::avro"],[123,"polars_io::cloud"],[185,"polars_io::cloud::options"],[358,"polars_io::csv"],[576,"polars_io::csv::read_impl"],[636,"polars_io::csv::utils"],[639,"polars_io::export"],[665,"polars_io::ipc"],[829,"polars_io::json"],[886,"polars_io::mmap"],[907,"polars_io::ndjson"],[908,"polars_io::ndjson::core"],[986,"polars_io::parquet"],[1248,"polars_io::partition"],[1264,"polars_io::pl_async"],[1280,"polars_io::predicates"],[1329,"polars_io::prelude"],[1332,"polars_io::utils"],[1338,"dyn_clone::sealed"],[1339,"alloc::boxed"],[1340,"std::io"],[1341,"core::result"],[1342,"serde::de"],[1343,"std::path"],[1344,"polars_core::frame"],[1345,"polars_error"],[1346,"core::fmt"],[1347,"core::fmt"],[1348,"core::marker"],[1349,"polars_core::frame::chunks"],[1350,"core::option"],[1351,"serde::ser"],[1352,"core::any"],[1353,"nano_arrow::datatypes::schema"],[1354,"std::io"],[1355,"polars_core::schema"],[1356,"alloc::string"],[1357,"alloc::vec"],[1358,"object_store"],[1359,"alloc::sync"],[1360,"std::io::error"],[1361,"crossterm::command"],[1362,"std::io::error"],[1363,"core::pin"],[1364,"core::task::wake"],[1365,"core::task::poll"],[1366,"std::io"],[1367,"alloc::alloc"],[1368,"core::ops::function"],[1369,"parquet_format_safe::thrift::varint::decode"],[1370,"core::iter::traits::collect"],[1371,"polars_core::schema"],[1372,"core::convert"],[1373,"nano_arrow::datatypes::field"],[1374,"parquet2::metadata::row_metadata"],[1375,"nano_arrow::error"],[1376,"nano_arrow::io::parquet::read::statistics"],[1377,"futures_io::if_std"],[1378,"core::marker"],[1379,"core::any"],[1380,"nano_arrow::array::growable::structure"],[1381,"nano_arrow::array::struct_::mutable"],[1382,"nano_arrow::bitmap::immutable"],[1383,"nano_arrow::scalar"],[1384,"nano_arrow::array::struct_::iterator"],[1385,"nano_arrow::bitmap::utils::iterator"],[1386,"nano_arrow::bitmap::utils::zip_validity"],[1387,"parquet2::metadata::file_metadata"],[1388,"polars_core::series"],[1389,"core::marker"]],"d":["","","","","","","","","","","","","Interface with cloud storage through the object_store …","","(De)serializing CSV files","","","","","","","","","","","","","Take the SerReader and return a parsed DataFrame.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Check if the path is a cloud url.","(De)serialize JSON files.","","","","Create a new instance of the <code>[SerReader]</code>","","","","Reading Apache parquet files.","","","","","","Make sure that all columns are contiguous in memory by …","","","","","","","Valid compressions","Read Apache Avro format into a <code>DataFrame</code>","Write a <code>DataFrame</code> to Apache Avro format","Valid compressions","Deflate","Deflate","Snappy","Snappy","","Get arrow schema of the avro File, this is faster than a …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Get schema of the Avro File","","","","","","","","","","","","","","","Columns to select/ project","Set the compression used. Defaults to None.","Stop reading when <code>n</code> rows are read.","Set the reader’s column projection. This counts from 0, …","A location on cloud storage, may have wildcards.","Adaptor to translate from AsyncSeek and AsyncRead to the …","Adaptor which wraps the asynchronous interface of …","","","","","","","The bucket name.","Build an <code>ObjectStore</code> based on the URL and passed in url. …","","","","","","","","","","","","Executes the given command directly.","The path components that need to be expanded.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","List files with a prefix derived from the pattern.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new CloudWriter from a path and an optional …","Parse a CloudLocation from an url.","Construct a new CloudWriter, re-using the given …","","","","The prefix inside the bucket, this will be the full key …","Queues the given command for further execution.","","The scheme (s3, …).","Performs a set of actions within a synchronous update.","","","","","","","","","","","","","","","Master key for accessing storage account","AWS Access Key","The name of the azure storage account","Configuration keys for <code>AmazonS3Builder</code>","Application credentials path","Tenant id used in oauth flows","","","Configuration keys for <code>MicrosoftAzureBuilder</code>","Bucket name","Bucket name","Set the checksum algorithm for this client","Client options","Client options","Client options","Service principal client id for authorizing requests","Service principal client secret for authorizing requests","Options to connect to various cloud providers.","","Set the container credentials relative URI","Container name","Configure how to provide <code>ObjectStore::copy_if_not_exists</code>","Default region","Sets custom endpoint for communicating with AWS S3.","Override the endpoint used to communicate with blob storage","File containing token for Azure AD workload identity …","","","Configuration keys for <code>GoogleCloudStorageBuilder</code>","Fall back to ImdsV1","Set the instance metadata endpoint","Endpoint to request a imds managed identity token","Msi resource id for use with managed identity …","Object id for use with managed identity authentication","Region","Shared access signature.","Secret Access Key","Path to the service account file","The serialized service account key.","Token to use for requests (passed to underlying provider)","Bearer token","Avoid computing payload checksum when calculating …","Use azure cli for acquiring access token","Use object store with azurite storage emulator","Use object store with url scheme …","If virtual hosted style request has to be used","","","","","","","","","","","","","","","","","","Build the <code>ObjectStore</code> implementation for AWS.","Build the <code>ObjectStore</code> implementation for Azure.","Build the <code>ObjectStore</code> implementation for GCP.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Parse a configuration from a Hashmap. This is the …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the configuration for AWS connections. This is the …","Set the configuration for Azure connections. This is the …","Set the configuration for GCP connections. This is the …","Multiple values that are used for all columns","A single value that’s used for all columns","This puts quotes around every field. Always.","","","Create a new DataFrame by reading a csv file.","Write a DataFrame to csv.","Utf8 encoding and unknown bytes are replaced with �","Tuples that map column names to null value of that column","This puts quotes around fields only when necessary.","Never quote any fields, even if it would produce invalid …","This puts quotes around all fields that are non-numeric. …","","","Options to serialize logical types to CSV.","Utf8 encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used for <code>DataType::Date</code>.","Used for <code>DataType::Datetime</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read the file and create the DataFrame.","","Used for <code>DataType::Float64</code> and <code>DataType::Float32</code>.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This is the recommended way to create a csv reader as this …","Set whether the CSV file has headers","Set whether to write headers.","","","Set the CSV reader to infer the schema of the file","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","String appended after every row.","Reduce memory consumption at the expense of performance","Create a new CsvReader from a file/ stream","","Null value representation.","Quoting character.","","Raise an error if CSV is empty (otherwise return an empty …","","Sets the size of the sample taken from the CSV file. The …","Used as separator.","","","","","Used for <code>DataType::Time</code>.","","","","","Truncate lines that are longer than the schema.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the batch size to use while writing the CSV.","Sets the chunk size used by the parser. This influences …","Columns to select/ project","Set the comment character. Lines starting with this …","Set the CSV file’s date format.","Set the CSV file’s datetime format.","Overwrite the schema with the dtypes in this given Schema. …","Overwrite the dtypes in the schema in the order of the …","Set  <code>CsvEncoding</code>","","Set the CSV file’s float precision.","Continue with next batch when a ParserError is encountered.","Set the CSV file’s line terminator.","Treat missing fields as null.","Try to stop parsing when <code>n</code> rows are parsed. During …","Set the number of threads used in CSV reading. The default …","Set the CSV file’s null value representation.","Set values that will be interpreted as missing/ null. Note …","The preferred way to initialize this builder. This allows …","","Set the reader’s column projection. This counts from 0, …","Set the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If …","Set the single byte character used for quoting.","Set the CSV file’s quoting behavior. See more on …","Rechunk the DataFrame to contiguous memory after the CSV …","Add a <code>row_count</code> column.","Set the CSV file’s schema. This only accepts datatypes …","Set the CSV file’s column separator as a byte character","Set the CSV file’s column separator as a byte character.","Skip the first <code>n</code> rows during parsing. The header will be …","Skip these rows after the header","Set the CSV file’s time format.","Automatically try to parse dates/ datetimes and time. If …","Write a batch to the csv writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Infer the schema of a CSV file by reading through the …","","check if csv file is compressed","Arrow-deserialized parquet Statistics of a file","Arrow-deserialized parquet Statistics of a file","","","","","Deserializes the statistics in the column chunks from a …","number of dictinct values. This is a <code>UInt64Array</code> for …","number of dictinct values. This is a <code>UInt64Array</code> for …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Maximum","Maximum","Minimum","Minimum","number of nulls. This is a <code>UInt64Array</code> for non-nested types","number of nulls. This is a <code>UInt64Array</code> for non-nested types","","","","","","Compression codec","Read Arrows IPC format into a DataFrame","Read Arrows Stream IPC format into a DataFrame","Write a DataFrame to Arrow’s Streaming IPC format","","Write a DataFrame to Arrow’s IPC format","","LZ4 (framed)","ZSTD","","Get arrow schema of the Ipc File, this is faster than …","Get arrow schema of the Ipc Stream File, this is faster …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the footer of the IPC file.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set if the file is to be memory_mapped. Only works with …","","","","","","","","Get schema of the Ipc File","Get schema of the Ipc Stream File","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Columns to select/ project","Columns to select/ project","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the compression used. Defaults to None.","Set the extension. Defaults to “.ipc”.","Set the extension. Defaults to “.ipc”.","Stop reading when <code>n</code> rows are read.","Stop reading when <code>n</code> rows are read.","Set the reader’s column projection. This counts from 0, …","Set the reader’s column projection. This counts from 0, …","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Write a batch to the parquet writer.","Typedef for a <code>std::result::Result</code> of an <code>Error</code>.","Contains the error value","A single JSON array containing each DataFrame row as an …","The format to use to write the DataFrame to JSON: <code>Json</code> (a …","Each DataFrame row is serialized as a JSON object on a …","Reads JSON in one of the formats in <code>JsonFormat</code> into a …","Writes a DataFrame to JSON.","Contains the success value","","","","","","","","","","","","","","","","","Take the SerReader and return a parsed DataFrame.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Set the JSON reader to infer the schema of the file. …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>JsonWriter</code> writing to <code>buffer</code> with format …","","","","","","","","","","","","","","","Set the batch size (number of records to load at one time)","Return a <code>null</code> if an error occurs during parsing.","","","Set the reader’s column projection: the names of the …","Set the JSON file’s schema","Overwrite parts of the inferred schema.","","","Trait used to get a hold to file handler or to the …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","","","","","","","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","","","","","","","","","","","","Returns the fields of this <code>StructArray</code>.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","This is the recommended way to create a json reader as …","Returns the fields the <code>DataType::Struct</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs the <code>StructArray</code> into its individual …","","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","","Reduce memory consumption at the expense of performance","Create a new JsonLineReader from a file/ stream","Returns a new <code>StructArray</code>","Creates an empty <code>StructArray</code>.","Creates a null <code>StructArray</code> of length <code>length</code>.","Sets the validity of this array.","Slices this <code>StructArray</code>.","","","","Slices this <code>StructArray</code>.","","Returns this array sliced.","Returns this array sliced.","","","","","","","Returns a new <code>StructArray</code>.","","","The optional validity.","","Returns the values of this <code>StructArray</code>.","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","","","Sets the chunk size used by the parser. This influences …","","","","","","","Returns this array with a new validity.","","Automatically determine over which unit to parallelize …","","","","","","Parallelize over the columns","","","","","","","Don’t parallelize","","A Parquet reader on top of the async object_store API. …","","Read Apache parquet format into a DataFrame.","Write a DataFrame to parquet format","Parallelize over the row groups","","","","Represents a valid zstd compression level.","Represents a valid zstd compression level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the given DataFrame in the the writer <code>W</code>. Returns the …","Writes the footer of the parquet file. Returns the total …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn the batched reader into an iterator.","Create a new <code>ParquetReader</code> from an existing <code>Reader</code>.","","Create a new writer","","Number of rows in the parquet file.","","","Read the parquet file in parallel (default). The single …","<code>Schema</code> of the file.","","","","","","","Try to reduce memory pressure at the expense of …","Serialize columns in parallel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use statistics in the parquet to determine if pages can be …","Use statistics in the parquet to determine if pages can be …","","","","","","","","","","","Columns to select/ project","Set the compression used. Defaults to <code>Zstd</code>.","Sets the maximum bytes size of a data page. If <code>None</code> will …","","","Stop parsing when <code>n</code> rows are parsed. By settings this …","","","Set the reader’s column projection. This counts from 0, …","","Add a <code>row_count</code> column.","","Set the row group size (in number of rows) during writing. …","Compute and write statistic","Write a batch to the parquet writer.","Write a DataFrame with disk partitioning","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Write the parquet file in parallel (default).","","","Keep track of rayon threads that drive the runtime. Every …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","A collection of column stats with a known schema.","The statistics for a column in a Parquet file or Hive …","","","Can take &amp;dyn Statistics and determine of a file should be …","","","","","","","","","","","","","","","Take a <code>DataFrame</code> and produces a boolean <code>Series</code> that serves …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,0,0,3,3,3,3,0,127,0,3,3,3,3,3,3,3,3,3,3,0,127,134,4,3,3,3,3,0,0,0,0,3,0,134,4,135,3,0,0,0,0,0,3,134,3,3,3,3,0,3,0,0,0,0,28,28,28,28,28,24,24,29,28,24,29,28,28,28,24,29,28,24,29,28,24,29,28,28,28,28,28,28,28,24,29,28,24,29,28,28,24,29,28,24,29,28,24,29,24,24,28,24,29,28,24,29,28,24,29,28,24,29,28,24,29,24,24,0,0,0,46,40,37,46,40,37,37,0,46,40,37,46,40,37,46,40,40,37,37,40,37,40,37,46,40,37,0,46,40,37,46,40,37,46,40,37,40,0,46,46,37,40,46,37,40,46,40,37,46,40,37,46,40,37,46,40,37,40,40,58,57,58,0,59,58,60,60,0,57,59,57,57,58,59,58,58,0,0,57,58,57,57,57,58,58,60,60,0,57,57,58,58,58,57,58,57,59,59,57,58,57,58,58,58,57,36,57,58,59,57,58,59,36,60,57,58,59,36,60,57,58,59,36,36,36,36,57,58,59,36,57,58,59,36,36,60,57,58,59,36,60,57,58,59,36,57,58,59,36,60,57,58,59,36,60,57,58,59,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,36,57,58,59,36,60,57,58,59,60,57,58,59,36,57,58,59,36,60,57,58,59,36,60,57,58,59,36,36,57,58,59,36,57,58,59,36,60,57,58,59,36,60,57,58,59,36,60,57,58,59,36,60,57,58,59,36,36,36,72,72,73,0,0,0,0,71,72,73,73,73,0,0,0,71,71,72,73,74,62,64,64,64,64,64,62,63,71,72,73,74,64,62,63,71,72,73,74,71,72,73,74,71,72,73,74,74,74,73,74,64,62,63,71,72,73,74,64,62,63,71,72,73,74,71,72,73,74,64,62,63,71,72,73,74,71,72,73,74,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,74,74,74,74,74,64,62,74,71,72,73,74,64,62,63,71,72,73,74,64,64,62,73,74,64,64,62,63,71,72,73,74,64,62,63,71,72,73,74,74,64,64,62,74,74,74,64,0,64,74,71,72,73,74,74,71,72,73,74,64,64,62,63,71,72,73,74,64,62,63,71,72,73,74,64,62,63,71,72,73,74,0,64,62,63,71,72,73,74,62,64,64,64,62,62,64,64,64,64,62,64,62,64,64,64,62,64,64,64,64,64,62,62,64,64,64,64,62,64,64,62,64,63,0,0,0,0,65,69,67,70,65,69,67,70,65,69,67,70,65,69,67,70,65,69,69,67,70,70,65,69,67,70,65,69,67,70,65,69,67,70,65,69,67,70,0,0,65,69,67,70,65,69,67,70,65,69,67,70,65,69,67,70,0,0,0,0,0,82,82,82,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,92,92,92,85,86,87,87,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,92,92,93,94,93,94,92,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,92,85,86,95,93,87,88,94,92,92,92,92,92,92,92,93,94,85,86,95,87,88,85,92,85,86,95,93,87,88,94,92,92,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,85,85,86,95,93,87,94,87,85,86,92,85,86,92,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,85,86,95,93,87,88,94,92,85,86,95,93,87,94,93,94,85,86,85,86,85,86,88,0,21,98,0,98,0,0,21,98,96,97,98,96,97,98,96,97,98,96,97,98,96,97,96,97,98,96,97,97,98,96,97,98,96,97,96,97,97,98,96,97,98,96,97,98,96,97,98,96,97,97,97,96,97,97,97,97,79,79,0,79,0,79,79,79,79,79,79,79,79,79,79,66,66,79,79,79,79,0,0,0,99,99,99,99,103,99,103,99,99,99,99,99,103,99,103,99,103,99,99,99,99,103,99,103,99,99,99,103,99,103,103,99,103,99,99,99,99,99,103,103,99,99,99,99,99,99,99,99,99,99,99,99,99,99,103,99,103,99,99,103,99,99,99,99,99,103,99,103,103,103,103,103,103,103,99,99,116,0,0,120,0,0,116,0,120,0,0,120,120,116,0,0,0,0,0,116,120,120,120,0,0,116,117,118,119,120,111,111,113,114,111,113,112,114,115,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,116,117,118,119,120,116,117,118,119,120,116,120,111,113,112,114,115,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,116,117,118,119,120,116,116,116,116,116,117,117,117,117,117,118,118,118,118,118,119,119,119,119,119,120,120,120,120,120,111,113,114,115,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,113,111,113,117,118,119,120,111,113,112,114,115,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,112,111,112,114,112,111,113,0,111,111,113,116,117,118,119,120,111,114,111,113,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,111,113,112,114,115,116,117,118,119,120,117,118,119,111,113,112,114,115,116,117,118,119,120,111,113,111,113,112,114,115,116,117,118,119,120,111,114,114,111,113,111,113,113,111,113,111,113,114,114,115,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,129,129,129,129,129,129,129,129,0,129,129,129,129,129,129,0,0,0,0,78,132,131,132,131,131,132,131,132,131,132,131,132,131,132,78,132,131,132,131,132,132,131,132,131,132,131,132,131,132,131,132,131,130,132,132,132,132,131,132,131,132,131,132,131,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[[-1,1],2,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],2,[],[]],0,[[-1,-2],[[5,[4]]],[],6],0,[7,-1,[]],[7,-1,[]],[-1,[[8,[3]]],9],[7,2],[[3,3],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[-1,11,[]],[-1,[[13,[12]]],[]],[[-1,12],[[13,[2]]],[]],[[3,14],15],[-1,-1,[]],[[],7],[-1,-2,[],[]],0,[-1,10,[[17,[16]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],18],[-1,[[21,[[20,[19]]]]],[]],0,0,0,0,0,0,[[3,-1],8,22],[[-1,10],-1,18],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[[24,[-1]]],[[13,[25]]],[26,27]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,2],[7,2],[7,2],[[28,28],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[24,[-1]]],[[13,[12]]],[26,27]],[[[29,[-1]],12],[[13,[2]]],6],[[28,14],[[8,[2,30]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[28,-1],2,31],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-1]]],[26,27]],[-1,[[29,[-1]]],6],[[[24,[-1]]],[[13,[32]]],[26,27]],[[[24,[-1]],10],[[24,[-1]]],[26,27]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]],[20,[[34,[33]]]]],[[24,[-1]]],[26,27]],[[[29,[-1]],[20,[28]]],[[29,[-1]]],6],[[[24,[-1]],[20,[7]]],[[24,[-1]]],[26,27]],[[[24,[-1]],[20,[[34,[7]]]]],[[24,[-1]]],[26,27]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[35,[20,[36]]],[[13,[[2,[37,[39,[38]]]]]]]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,2],[40,2],[7,2],[7,2],[[37,37],10],[[-1,-2],[[8,[-3,41]]],[],42,[]],0,[40,[[43,[2]]]],[[37,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[35,[20,[36]]],[[13,[[34,[33]]]]]],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[44]],[39,[38]],45],46],[[35,[20,[36]]],[[13,[40]]]],[35,[[13,[37]]]],[[[39,[38]],45],[[13,[40]]]],0,[[[47,[46]],48,[50,[49]]],[[51,[[43,[7]]]]]],[[[47,[46]],48,52],[[51,[[43,[44]]]]]],0,[[-1,-2],[[8,[-3,41]]],[],42,[]],[-1,[[47,[[5,[53,54]]]]],[]],0,[[-1,-2],[[8,[-3,41]]],[],55,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[40,[50,[49]]],[[43,[7]]]],[[-1,-2],[[8,[7,41]]],[],56],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[57,35],[58,35],[59,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[36,35],[[13,[[0,[38]]]]]],[[36,35],[[13,[[0,[38]]]]]],[[36,35],[[13,[[0,[38]]]]]],[36,36],[57,57],[58,58],[59,59],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],36],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[36]]],9],[-1,[[8,[57]]],9],[-1,[[8,[58]]],9],[-1,[[8,[59]]],9],[7,2],[7,2],[7,2],[7,2],[7,2],[[36,36],10],[[60,60],10],[[57,57],10],[[58,58],10],[[59,59],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[36,14],15],[[57,14],[[8,[2,30]]]],[[58,14],[[8,[2,30]]]],[[59,14],[[8,[2,30]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[35,[[8,[60]]]],[35,[[8,[57]]]],[35,[[8,[58]]]],[35,[[8,[59]]]],[[35,-1],[[13,[36]]],61],[[57,-1],2,31],[[58,-1],2,31],[[59,-1],2,31],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[36,-1],8,22],[[57,-1],8,22],[[58,-1],8,22],[[59,-1],8,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[36,-1],36,61],[[36,-1],36,61],[[36,-1],36,61],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[[62,[-1]],32],[[13,[[63,[-1]]]]],6],[[[64,[-1]]],[[13,[65]]],66],[[[64,[-1]]],[[13,[67]]],66],[[[64,[[5,[66]]]],[20,[68]]],[[13,[69]]]],[[[64,[[5,[66]]]],[20,[68]]],[[13,[70]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[72,72],[73,73],[74,74],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],73],[[],74],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[71]]],9],[-1,[[8,[72]]],9],[-1,[[8,[73]]],9],[-1,[[8,[74]]],9],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[[71,71],10],[[72,72],10],[[73,73],10],[[74,74],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[64,[-1]]],[[13,[12]]],66],[[[62,[-1]],12],[[13,[2]]],6],0,[[71,14],15],[[72,14],15],[[73,14],15],[[74,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[[64,[75]]]]],[[76,[11]]]],[[[64,[-1]],10],[[64,[-1]]],66],[[[62,[-1]],10],[[62,[-1]]],6],[[73,-1],2,31],[[74,-1],2,31],[[[64,[-1]],[20,[7]]],[[64,[-1]]],66],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[64,[-1]],10],[[64,[-1]]],66],[-1,[[64,[-1]]],66],[-1,[[62,[-1]]],6],0,0,0,[[[64,[-1]],10],[[64,[-1]]],66],0,[[[64,[-1]],7],[[64,[-1]]],66],0,[[71,-1],8,22],[[72,-1],8,22],[[73,-1],8,22],[[74,-1],8,22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1]],10],[[64,[-1]]],66],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1]],7],[[62,[-1]]],6],[[[64,[-1]],7],[[64,[-1]]],66],[[[64,[-1]],[20,[[34,[33]]]]],[[64,[-1]]],66],[[[64,[-1]],[20,[49]]],[[64,[-1]]],66],[[[62,[-1]],[20,[33]]],[[62,[-1]]],6],[[[62,[-1]],[20,[33]]],[[62,[-1]]],6],[[[64,[-1]],[20,[68]]],[[64,[-1]]],66],[[[64,[-1]],[20,[[50,[77]]]]],[[64,[-1]]],66],[[[64,[-1]],71],[[64,[-1]]],66],[[[64,[-1]],49],[[64,[-1]]],66],[[[62,[-1]],[20,[7]]],[[62,[-1]]],6],[[[64,[-1]],10],[[64,[-1]]],66],[[[62,[-1]],33],[[62,[-1]]],6],[[[64,[-1]],10],[[64,[-1]]],66],[[[64,[-1]],[20,[7]]],[[64,[-1]]],66],[[[64,[-1]],[20,[7]]],[[64,[-1]]],66],[[[62,[-1]],33],[[62,[-1]]],6],[[[64,[-1]],[20,[72]]],[[64,[-1]]],66],[[[64,[-1]],[20,[-2]]],[[64,[-1]]],66,[[76,[11]]]],[[[64,[-1]],[20,[[39,[78]]]]],[[64,[-1]]],66],[[[64,[-1]],[20,[[34,[7]]]]],[[64,[-1]]],66],[[[64,[-1]],[20,[49]]],[[64,[-1]]],66],[[[62,[-1]],49],[[62,[-1]]],6],[[[62,[-1]],73],[[62,[-1]]],6],[[[64,[-1]],10],[[64,[-1]]],66],[[[64,[-1]],[20,[3]]],[[64,[-1]]],66],[[[64,[-1]],[20,[68]]],[[64,[-1]]],66],[[[64,[-1]],49],[[64,[-1]]],66],[[[62,[-1]],49],[[62,[-1]]],6],[[[64,[-1]],7],[[64,[-1]]],66],[[[64,[-1]],7],[[64,[-1]]],66],[[[62,[-1]],[20,[33]]],[[62,[-1]]],6],[[[64,[-1]],10],[[64,[-1]]],66],[[[63,[-1]],12],[[13,[2]]],6],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,2],[7,2],[69,2],[7,2],[70,2],[7,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[65,7],[[13,[[20,[[34,[12]]]]]]]],[[69,7],[[13,[[20,[[34,[12]]]]]]]],[[67,7],[[13,[[20,[[34,[12]]]]]]]],[[70,7],[[13,[[20,[[34,[12]]]]]]]],[[[64,[[5,[66]]]],68],69],[[[64,[[5,[66]]]],68],70],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,49,[20,[7]],10,[20,[32]],7,7,[20,[49]],[20,[49]],49,[20,[72]],10,10],[[13,[[2,[32,7,7]]]]]],[[79,49,[20,[7]],10,[20,[32]],7,7,[20,[49]],[20,[49]],49,[20,[72]],10,49,10],[[13,[[2,[32,7,7]]]]]],[[[50,[49]]],10],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[[80,81],[[8,[82,83]]]],0,0,[7,2],[[82,82],10],[[82,14],[[8,[2,30]]]],[-1,-1,[]],[84,82],[[],7],[-1,-2,[],[]],0,0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[[85,[-1]]],[[13,[25]]],66],[[[86,[-1]]],[[13,[25]]],26],[[[87,[-1]],32],[[13,[[88,[-1]]]]],6],[[[87,[-1]],32],[[13,[[0,[-1]]]]],[89,90,91]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[[-1,-2],2,[],[]],[[93,-1],[[5,[4]]],6],[[94,-1],[[5,[4]]],6],[[],93],[[],94],[[],92],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[92]]],9],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[[92,92],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[93,11],[94,11],[[[85,[-1]]],[[13,[12]]],66],[[[86,[-1]]],[[13,[12]]],26],[[[95,[-1]],12],[[13,[2]]],6],[[[87,[-1]],12],[[13,[2]]],6],[[[88,[-1]]],[[13,[2]]],6],[[[85,[-1]],[20,[[39,[78]]]],10],[[13,[12]]],66],[[92,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[92,-1],2,31],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1]],10],[[85,[-1]]],66],[-1,[[85,[-1]]],66],[-1,[[86,[-1]]],26],[-1,[[95,[-1]]],6],[[],93],[-1,[[87,[-1]]],6],[[],94],[-1,[[87,[-1]]],[89,90,91]],[[[85,[-1]]],[[13,[32]]],66],[[[86,[-1]]],[[13,[32]]],26],[[92,-1],8,22],[[[85,[-1]],10],[[85,[-1]]],66],[[[86,[-1]],10],[[86,[-1]]],26],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1]],[20,[[34,[33]]]]],[[85,[-1]]],66],[[[86,[-1]],[20,[[34,[33]]]]],[[86,[-1]]],26],[[[95,[-1]],[20,[92]]],[[95,[-1]]],[]],[[93,[20,[92]]],93],[[[87,[-1]],[20,[92]]],[[87,[-1]]],6],[[94,[20,[92]]],94],[[93,11],93],[[94,11],94],[[[85,[-1]],[20,[7]]],[[85,[-1]]],66],[[[86,[-1]],[20,[7]]],[[86,[-1]]],26],[[[85,[-1]],[20,[[34,[7]]]]],[[85,[-1]]],66],[[[86,[-1]],[20,[[34,[7]]]]],[[86,[-1]]],26],[[[85,[-1]],[20,[3]]],[[85,[-1]]],66],[[[86,[-1]],[20,[3]]],[[86,[-1]]],26],[[[88,[-1]],12],[[13,[2]]],6],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,2],[7,2],[7,2],[[[96,[-1]],12],[[13,[2]]],6],[[[97,[-1]]],[[13,[12]]],66],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[97,[-1]],[20,[7]]],[[97,[-1]]],66],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[96,[-1]]],6],[-1,[[97,[-1]]],66],[[[97,[-1]],10],[[97,[-1]]],66],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1]],7],[[97,[-1]]],66],[[[97,[-1]],10],[[97,[-1]]],66],[[[96,[-1]],98],[[96,[-1]]],6],[[[97,[-1]],98],[[97,[-1]]],66],[[[97,[-1]],[20,[[34,[33]]]]],[[97,[-1]]],66],[[[97,[-1]],68],[[97,[-1]]],66],[[[97,[-1]],32],[[97,[-1]]],66],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[79,[[50,[49]]]],[7,-1,[]],[7,2],[-1,79,66],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[20,[[50,[49]]]]],[]],[-1,[[20,[75]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],[99,[[39,[100,54]]]],[99,101],[99,101],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[99,[[5,[100,54]]]],[99,99],[[-1,-2],2,[],[]],[99,102],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,2],[7,2],[[99,100],10],[[99,99],10],[99,[[50,[80]]]],[[[103,[-1]]],[[13,[12]]],66],[[99,14],[[8,[2,30]]]],[-1,-1,[]],[104,99],[105,99],[-1,-1,[]],[-1,[[13,[[103,[75]]]]],[[76,[11]]]],[102,[[50,[80]]]],[[[103,[-1]],[20,[7]]],[[103,[-1]]],66],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[99,[[2,[[34,[80,54]],[34,[[5,[100,54]],54]],[20,[106]]]]]],[99],[99,[[110,[[34,[[5,[107,54]],54]],108,109]]]],[99,7],[[[103,[-1]],10],[[103,[-1]]],66],[-1,[[103,[-1]]],66],[[102,[34,[[5,[100,54]],54]],[20,[106]]],99],[102,99],[[102,7],99],[[99,[20,[106]]],2],[[99,7,7],2],[[99,7,7],2],[[-1,7,7],-2,[],[]],[[-1,7,7],-2,[],[]],[[99,7,7],2],[[99,7,7],2],[[99,7,7],99],[[99,7,7],99],[99,[[5,[100,54]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[102,[34,[[5,[100,54]],54]],[20,[106]]],[[8,[99,83]]]],[-1,23,[]],[-1,23,[]],[99,[[20,[106]]]],[99,[[20,[106]]]],[99,[[50,[[5,[100,54]]]]]],[99,108],[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-1]],[20,[7]]],[[103,[-1]]],66],[[[103,[-1]],[20,[7]]],[[103,[-1]]],66],[[[103,[-1]],[20,[7]]],[[103,[-1]]],66],[[[103,[-1]],[20,[-2]]],[[103,[-1]]],66,[[76,[11]]]],[[[103,[-1]],10],[[103,[-1]]],66],[[[103,[-1]],68],[[103,[-1]]],66],[[[103,[-1]],32],[[103,[-1]]],66],[[99,[20,[106]]],99],[[99,[20,[106]]],[[5,[100,54]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[[111,[-1]],[20,[[39,[78]]]],[20,[[50,[7]]]]],[[13,[12]]],66],[[[111,[-1]],7],[[13,[112]]],66],[[113,7],[[13,[112]]]],[[[114,[-1]],32],[[13,[[115,[-1]]]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[117,117],[118,118],[119,119],[120,120],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],116],[[],120],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[116]]],9],[-1,[[8,[117]]],9],[-1,[[8,[118]]],9],[-1,[[8,[119]]],9],[-1,[[8,[120]]],9],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[[116,116],10],[[117,117],10],[[118,118],10],[[119,119],10],[[120,120],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[111,[-1]]],[[13,[12]]],66],[113,[[13,[12]]]],[[[114,[-1]],12],[[13,[44]]],6],[[[115,[-1]]],[[13,[44]]],6],[[116,14],15],[[117,14],15],[[118,14],15],[[119,14],15],[[120,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[35,[20,[36]],[20,[68]],[20,[[39,[121]]]]],[[13,[113]]]],[[[111,[-1]]],[[13,[122]]],66],[113,[[13,[[39,[121]]]]]],[[117,-1],2,31],[[118,-1],2,31],[[119,-1],2,31],[[120,-1],2,31],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[111,[-1]]],66],0,[-1,[[114,[-1]]],[6,6]],[[112,7],[[13,[[20,[[34,[12]]]]]]]],[[[111,[-1]]],[[13,[7]]],66],[113,[[13,[7]]]],0,[[[111,[-1]],116],[[111,[-1]]],66],[[[111,[-1]]],[[13,[68]]],66],[113,[[13,[68]]]],[[116,-1],8,22],[[117,-1],8,22],[[118,-1],8,22],[[119,-1],8,22],[[120,-1],8,22],[[[111,[-1]],10],[[111,[-1]]],66],[[[114,[-1]],10],[[114,[-1]]],6],[[[111,[-1]],10],[[111,[-1]]],66],[[113,10],113],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[49,[[13,[117]]]],[124,[[13,[118]]]],[125,[[13,[119]]]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[[111,[-1]],10],[[111,[-1]]],66],[[113,10],113],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1]],[20,[[34,[33]]]]],[[111,[-1]]],66],[[[114,[-1]],120],[[114,[-1]]],6],[[[114,[-1]],[20,[7]]],[[114,[-1]]],6],[[[111,[-1]],[20,[[34,[123]]]]],[[111,[-1]]],66],[[113,[20,[[34,[123]]]]],113],[[[111,[-1]],[20,[7]]],[[111,[-1]]],66],[[113,[20,[7]]],113],[[113,[20,[[39,[78]]]]],113],[[[111,[-1]],[20,[[34,[7]]]]],[[111,[-1]]],66],[[113,[20,[[34,[7]]]]],113],[[[111,[-1]],[20,[3]]],[[111,[-1]]],66],[[113,[20,[3]]],113],[[[114,[-1]],[20,[7]]],[[114,[-1]]],6],[[[114,[-1]],10],[[114,[-1]]],6],[[[115,[-1]],12],[[13,[2]]],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,2],[[[126,[-1]],12],[[13,[2]]],[127,91,128]],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[-1,-2,-3],[[126,[-1]]],[127,91,128],[[76,[11]]],61],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,-2,[],[]],[[[126,[-1]],10],[[126,[-1]]],[127,91,128]],0,[[129,-1],[],53],[[129,-1],[],[53,91]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,2],[-1,-1,[]],[[],129],[[],7],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,-2,[],[]],0,0,0,0,[-1,[[20,[130]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[131,[[50,[132]]]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[132]]],9],[-1,[[8,[131]]],9],[7,2],[7,2],[132,77],[[-1,12],[[13,[123]]],[]],[[132,14],15],[[131,14],15],[-1,-1,[]],[-1,-1,[]],[123,132],[132,[[20,[123]]]],[[131,35],[[13,[132]]]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[133,[20,[123]],[20,[123]],[20,[123]]],132],[[68,[34,[132]]],131],[132,[[20,[7]]]],[131,32],[[132,-1],8,22],[[131,-1],8,22],[[-1,131],[[13,[10]]],[]],[132,[[20,[123]]]],[132,[[20,[123]]]],[132,[[20,[123]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,[[13,[79]]],[26,66,18]],[[[20,[[50,[33]]]],32,[20,[[50,[123]]]],10],[[20,[[34,[7]]]]]],[16,11]],"c":[],"p":[[3,"Private",1338],[15,"tuple"],[3,"RowCount",0],[8,"SerWriter",0],[3,"Box",1339],[8,"Write",1340],[15,"usize"],[4,"Result",1341],[8,"Deserializer",1342],[15,"bool"],[3,"PathBuf",1343],[3,"DataFrame",1344],[6,"PolarsResult",1345],[3,"Formatter",1346],[6,"Result",1346],[3,"Path",1343],[8,"AsRef",1347],[8,"Sized",1348],[6,"ArrowChunk",1349],[4,"Option",1350],[6,"ArrowResult",829],[8,"Serializer",1351],[3,"TypeId",1352],[3,"AvroReader",56],[3,"Schema",1353],[8,"Read",1340],[8,"Seek",1340],[4,"AvroCompression",56],[3,"AvroWriter",56],[3,"Error",1346],[8,"Hasher",1354],[3,"Schema",1355],[3,"String",1356],[3,"Vec",1357],[15,"str"],[3,"CloudOptions",185],[3,"CloudLocation",123],[8,"ObjectStore",1358],[3,"Arc",1359],[3,"CloudWriter",123],[3,"Error",1360],[8,"Command",1361],[6,"Result",1360],[15,"u64"],[3,"Path",1362],[3,"CloudReader",123],[3,"Pin",1363],[3,"Context",1364],[15,"u8"],[15,"slice"],[4,"Poll",1365],[4,"SeekFrom",1340],[8,"Future",1366],[3,"Global",1367],[8,"FnOnce",1368],[8,"VarInt",1369],[4,"AmazonS3ConfigKey",185],[4,"AzureConfigKey",185],[4,"GoogleConfigKey",185],[4,"CloudType",185],[8,"IntoIterator",1370],[3,"CsvWriter",358],[3,"BatchedWriter",358],[3,"CsvReader",358],[3,"BatchedCsvReaderMmap",576],[8,"MmapBytesReader",886],[3,"BatchedCsvReaderRead",576],[6,"SchemaRef",1355],[3,"OwnedBatchedCsvReaderMmap",576],[3,"OwnedBatchedCsvReader",576],[4,"CsvEncoding",358],[4,"NullValues",358],[4,"QuoteStyle",358],[3,"SerializeOptions",358],[3,"File",1371],[8,"Into",1347],[4,"DataType",1372],[8,"PhysicalIoExpr",1280],[4,"ReaderBytes",886],[3,"Field",1373],[3,"RowGroupMetaData",1374],[3,"Statistics",639],[4,"Error",1375],[3,"MutableStatistics",1376],[3,"IpcReader",665],[3,"IpcStreamReader",665],[3,"IpcWriter",665],[3,"BatchedWriter",665],[8,"AsyncWrite",1377],[8,"Unpin",1348],[8,"Send",1348],[4,"IpcCompression",665],[3,"IpcStreamWriterOption",665],[3,"IpcWriterOption",665],[3,"IpcStreamWriter",665],[3,"JsonWriter",829],[3,"JsonReader",829],[4,"JsonFormat",829],[3,"StructArray",908],[8,"Array",1378],[8,"Any",1352],[4,"DataType",1379],[3,"JsonLineReader",908],[3,"GrowableStruct",1380],[3,"MutableStructArray",1381],[3,"Bitmap",1382],[8,"Scalar",1383],[3,"StructValueIter",1384],[3,"BitmapIter",1385],[4,"ZipValidity",1386],[3,"ParquetReader",986],[3,"BatchedParquetReader",986],[3,"ParquetAsyncReader",986],[3,"ParquetWriter",986],[3,"BatchedWriter",986],[4,"ParallelStrategy",986],[3,"GzipLevel",986],[3,"BrotliLevel",986],[3,"ZstdLevel",986],[4,"ParquetCompression",986],[3,"FileMetaData",1387],[6,"FileMetaDataRef",986],[3,"Series",1388],[15,"u32"],[15,"i32"],[3,"PartitionedWriter",1248],[8,"WriterFactory",0],[8,"Sync",1348],[3,"RuntimeManager",1264],[8,"StatsEvaluator",1280],[3,"BatchStats",1280],[3,"ColumnStats",1280],[3,"Field",1389],[8,"SerReader",0],[8,"ArrowReader",0]],"b":[[928,"impl-PartialEq%3C%26dyn+Array%3E-for-StructArray"],[929,"impl-PartialEq-for-StructArray"],[934,"impl-From%3CGrowableStruct%3C\'a%3E%3E-for-StructArray"],[935,"impl-From%3CMutableStructArray%3E-for-StructArray"],[954,"impl-StructArray"],[955,"impl-Array-for-StructArray"],[958,"impl-StructArray"],[959,"impl-Array-for-StructArray"],[971,"impl-StructArray"],[972,"impl-Array-for-StructArray"],[984,"impl-StructArray"],[985,"impl-Array-for-StructArray"]]},\
"polars_lazy":{"doc":"Lazy API of Polars","t":"AOAAAANNENNNNNNNNNNNDNNNNNINENNDENDDNNNNNNNNNNNNNNNDNNNNNDNNNNENNNEIDNNNNNNNEINGNNNNNNINNNNNNNNNNNNDNNNNDINNNNNNNNNNDNNNNNNNNNNNNENNNNNNNNNNNNNNINNDNNNNIINNNNNNNNDNNDNDNNNNNNDNNNNINNNDNNDNNEENLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFMMLLLFLLFLLLFLFLLLLLLLLLLLLFLFMLLLFFLALFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLKKLFLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLFLLFLFLLLFLLLLFFFFFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLALLKKLLKLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLFLFLLLLLLLFLLLLFLLLLLLLFLLLLLLLLFLLFLLLLLLFLLLFFLLFLLMMMFLLLFMMMLMLLLMALLMLLLLLLLLLLFLLMLLLLLLLLLFLLLLLALLFLLLFLLFLLMLLLLLFFLLLLLLLLLLLLLMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLMLALLLFLLLFLLLLLLLFLLFFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLDENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLFMFFFFFFLLFLLFFFFFFFFFFFFFFFFFMMLLLLFFFFFLMMLFFLFFFFFFMMMFMMMMFMFFMFFFFMMFFFFMMMLMLLLLMMRHHDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDMMMMMGIDDIDDDDGDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMMLMMLLLLLLKLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMLLMLLLLLLMLLKLLMMMMLLLLLLLLLMKLLKLLAMMLMMLLKLLMMLLLKLLMMMLLLLLLLLMLLLLLLLMMLLLLMLMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLKLLLLLLLLLLLLLLLLLFFAAADILLLLLKLLLLLLLLDIIDLLLLLLLLLLLLLLKLKKMKLLLLMLLLLLKKLLLLLLLLFNIDNNNNNNDNNNNDNDNNNNNNNNNNDNDEENIEENNNRDNNNNDINNNDDNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLKKMLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLMMMMLLLLLLLMMLMLMMMKLLLLLLLLLLLLLLMMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["dsl","fallible","frame","physical_plan","prelude","utils","Abs","Agg","AggExpr","AggGroups","Alias","All","AllHorizontal","And","AnonymousFunction","Any","AnyHorizontal","ApproxNUnique","ArgWhere","ArrayExpr","ArrayNameSpace","AsStruct","Atan2","BackwardFill","BinaryExpr","BinaryExpr","BinaryUdfOutputField","Boolean","BooleanFunction","Cast","Categorical","CategoricalNameSpace","CategoricalOrdering","Ceil","ChainedThen","ChainedWhen","Clip","Coalesce","Column","Columns","ConcatExpr","Correlation","Count","Count","Cumcount","Cummax","Cummin","Cumprod","Cumsum","Cut","DateOffset","DatetimeArgs","Diff","Divide","DropNans","Dtype","DtypeColumn","DurationArgs","Entropy","Eq","EqValidity","Exclude","Excluded","Exp","Explode","Explode","Expr","ExprEvalExtension","FieldsMapper","FillNull","Filter","First","Floor","FloorDivide","ForwardFill","Function","FunctionExpr","FunctionOutputField","Fused","GetOutput","GroupsToRows","Gt","GtEq","Hash","Implode","Interpolate","IntoListNameSpace","IsDuplicated","IsFinite","IsFirstDistinct","IsIn","IsInfinite","IsLastDistinct","IsNan","IsNotNan","IsNotNull","IsNull","IsUnique","Join","JoinOptions","KeepName","Last","Lexical","ListExpr","ListNameSpace","ListNameSpaceExtension","Literal","Log","Log1p","LowerBound","Lt","LtEq","Max","MaxHorizontal","Mean","Median","MetaNameSpace","Min","MinHorizontal","Minus","Modulus","Multiply","NUnique","Name","Not","NotEq","NotEqValidity","Nth","NullCount","Operator","Or","Over","PeakMax","PeakMin","Physical","Plus","Pow","QCut","Quantile","RLE","RLEID","Random","Range","RenameAlias","RenameAliasFn","Reverse","Rolling","RollingCovOptions","RollingSkew","Round","SearchSorted","Selector","SeriesBinaryUdf","SeriesUdf","SetSortedFlag","Shift","ShiftAndFill","ShrinkType","Sign","Slice","Sort","SortBy","SpecialEq","Std","StringExpr","StrptimeOptions","StructExpr","StructNameSpace","SubPlan","Sum","SumHorizontal","Take","TemporalExpr","Ternary","Then","ToPhysical","TopK","Trigonometry","TrueDivide","UdfSchema","Unique","UniqueCounts","UpperBound","UserDefinedFunction","ValueCounts","Var","When","Wildcard","Window","WindowMapping","WindowType","Xor","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_into_selector","_selector_add","_selector_and","_selector_sub","abs","add","agg_groups","alias","all","all","all","all_horizontal","allow_parallel","ambiguous","and","any","any","any_horizontal","append","apply","apply_binary","apply_children","apply_many","apply_many_private","apply_multiple","approx_n_unique","arange","arccos","arccosh","arcsin","arcsinh","arctan","arctan2","arctanh","arg_max","arg_max","arg_min","arg_min","arg_sort","arg_sort_by","arg_unique","arg_where","args","arr","as_any","as_ref","as_struct","avg","backward_fill","binary","binary","binary_expr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_k","cache","call","call","call_udf","call_udf","call_unchecked","cast","cast","cat","cat","cbrt","ceil","clip","clip_max","clip_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coalesce","col","cols","concat_expr","concat_list","concat_str","contains","cos","cosh","cot","count","count","count_matches","cov","cumcount","cumfold_exprs","cummax","cummin","cumprod","cumreduce_exprs","cumsum","cumulative_eval","cumulative_eval","cut","date_range","date_ranges","datetime","datetime_range","datetime_ranges","day","days","ddof","default","default","default","default","default","default","default","default","default","default","degrees","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","diff","diff","div","dot","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_nans","drop_nulls","drop_nulls","dt","dt","dtype_col","dtype_cols","duration","entropy","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_missing","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval","ewm_mean","ewm_std","ewm_var","exact","exclude","exclude_dtype","exp","explode","field_by_index","field_by_name","fill_nan","fill_null","filter","first","first","first","flatten","float_type","floor","floor_div","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold_exprs","force_parallel","format","format_str","forward_fill","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_type","fun","function_with_options","functions","get","get_categories","get_field","get_field","get_fields_lens","get_output","get_schema","gt","gt_eq","has_multiple_outputs","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","head","head","hour","hours","implode","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input_fields","int_range","int_ranges","interpolate","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_list_name_space","into_list_name_space","into_tree_formatter","is_duplicated","is_finite","is_first_distinct","is_in","is_infinite","is_last_distinct","is_nan","is_not_nan","is_not_null","is_not_null","is_null","is_null","is_regex_projection","is_simple_projection","is_unique","join","keep_name","kurtosis","last","last","last","len","list","lit","log","log1p","lower_bound","lt","lt_eq","map","map_alias","map_binary","map_children","map_datetime_dtype_timezone","map_dtype","map_dtype","map_dtypes","map_field","map_fields","map_list","map_list_multiple","map_many","map_many_private","map_multiple","map_numeric_to_float_dtype","map_python","map_to_float_dtype","map_to_list_inner_dtype","map_to_list_supertype","map_to_supertype","max","max","max","max","max_horizontal","mean","mean","mean","median","median","meta","microsecond","microseconds","milliseconds","min","min","min","min","min_horizontal","min_periods","minute","minutes","mode","month","mul","mutate","n_unique","name","names","nan_max","nan_min","nanoseconds","neq","neq_missing","nested_sum_type","new","new","new","new","new","nodes","nodes_mut","not","not","null_count","options","or","otherwise","otherwise","output_name","over","over_with_options","pct_change","peak_max","peak_min","pearson_corr","pi","pop","pow","prefix","product","python_udf","qcut","qcut_uniform","quantile","quantile","radians","rank","reduce_exprs","rem","rename_fields","repeat","repeat_by","reshape","return_type","reverse","reverse","rle","rle_id","rolling","rolling_corr","rolling_cov","rolling_map","rolling_map_float","rolling_max","rolling_mean","rolling_median","rolling_min","rolling_quantile","rolling_skew","rolling_std","rolling_sum","rolling_var","root_names","round","rows_left","rows_right","same_type","sample_frac","sample_n","search_sorted","second","seconds","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_difference","set_intersection","set_ordering","set_sorted_flag","set_symmetric_difference","shift","shift","shift_and_fill","shrink_dtype","shuffle","sign","sin","sinh","skew","slice","slice","sort","sort","sort_by","sort_with","spearman_rank_corr","sqrt","std","str","strict","strict_cast","string","struct_","sub","suffix","sum","sum","sum","sum","sum_horizontal","super_type","tail","tail","take","take","tan","tanh","ternary_expr","then","then","time_range","time_ranges","time_unit","time_unit","time_zone","to_dot","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical_type","to_string","to_string","to_string","to_string","to_struct","top_k","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map_dtype","try_map_dtypes","try_map_field","try_serialize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udf","undo_aliases","union","unique","unique","unique","unique_counts","unique_stable","unique_stable","unique_stable","upper_bound","value_counts","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weeks","when","when","when","window_size","with_ambiguous","with_day","with_days","with_dtype","with_fractional_seconds","with_hms","with_hms","with_hour","with_hours","with_microsecond","with_microseconds","with_milliseconds","with_minute","with_minutes","with_month","with_nanoseconds","with_opt_dtype","with_same_dtype","with_second","with_seconds","with_time_unit","with_time_zone","with_weeks","with_year","xor","year","expr","input","input","interpol","propagate_nans","propagate_nans","quantile","ignore_nulls","ignore_nulls","by","by","data_type","descending","expr","expr","expr","expr","expr","falsy","function","function","function","function","idx","input","input","input","input","left","length","offset","op","options","options","options","options","output_type","partition_by","predicate","right","strict","truthy","allow_duplicates","base","base","bias","breaks","ddof","decimals","has_max","has_min","include_breaks","include_breaks","labels","labels","left_closed","left_closed","limit","limit","method","method","normalize","parallel","periods","probs","reverse","reverse","reverse","reverse","reverse","seed","sort","super_type","window_size","BinaryNameSpace","borrow","borrow_mut","contains_literal","deref","deref_mut","drop","ends_with","from","init","into","starts_with","try_from","try_into","type_id","vzip","CategoricalNameSpace","CategoricalOrdering","Lexical","Physical","DateLikeNameSpace","base_utc_offset","borrow","borrow_mut","cast_time_unit","combine","convert_time_zone","date","datetime","day","deref","deref_mut","drop","dst_offset","from","hour","init","into","is_leap_year","iso_year","microsecond","millisecond","minute","month","month_end","month_start","nanosecond","offset_by","ordinal_day","quarter","replace_time_zone","round","second","strftime","time","timestamp","to_string","truncate","try_from","try_into","type_id","vzip","week","weekday","with_time_unit","year","DatetimeArgs","DurationArgs","UnionArgs","__clone_box","all","ambiguous","apply_binary","arange","arg_sort_by","arg_where","as_struct","avg","borrow","borrow_mut","cast","clone","clone_into","coalesce","col","collect_all","cols","concat","concat_expr","concat_lf_diagonal","concat_list","concat_str","cov","cumfold_exprs","cumreduce_exprs","date_range","date_ranges","datetime","datetime_range","datetime_ranges","day","days","default","deref","deref_mut","drop","dtype_col","dtype_cols","duration","fold_exprs","format_str","from","hour","hours","init","int_range","int_ranges","into","is_not_null","is_null","map_binary","max","mean","median","microsecond","microseconds","milliseconds","min","minute","minutes","month","nanoseconds","not","parallel","pearson_corr","quantile","rechunk","reduce_exprs","repeat","rolling_corr","rolling_cov","second","seconds","spearman_rank_corr","sum","time_range","time_ranges","time_unit","time_unit","time_zone","to_owned","to_supertypes","try_from","try_into","type_id","vzip","weeks","year","COUNT","CALL_DF_UDF_PYTHON","CALL_SERIES_UDF_PYTHON","PythonFunction","PythonUdfExpression","__clone_box","borrow","borrow","borrow_mut","borrow_mut","call_udf","call_udf","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","get_output","init","init","into","into","new","serialize","to_owned","try_from","try_from","try_into","try_into","try_serialize","type_id","type_id","vzip","vzip","StringNameSpace","borrow","borrow_mut","concat","contains","contains_literal","count_matches","deref","deref_mut","drop","ends_with","explode","extract","extract_all","extract_groups","from","from_radix","init","into","json_extract","len_bytes","len_chars","ljust","replace","replace_all","replace_n","rjust","slice","split","split_exact","split_exact_inclusive","split_inclusive","splitn","starts_with","strip_chars","strip_chars_end","strip_chars_start","strip_prefix","strip_suffix","strptime","to_date","to_datetime","to_decimal","to_lowercase","to_time","to_titlecase","to_uppercase","try_from","try_into","type_id","vzip","zfill","UserDefinedFunction","fun","input_fields","name","options","return_type","AllowedOptimizations","IntoLazy","JoinBuilder","LazyCsvReader","LazyFileListReader","LazyFrame","LazyGroupBy","LazyJsonLineReader","OptState","PathIterator","ScanArgsAnonymous","ScanArgsIpc","ScanArgsParquet","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_with_eager","agg","allow_parallel","allows_projection_pushdown","anonymous_scan","anti_join","apply","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_k","cache","cache","cache","cast","cast_all","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloud_options","cloud_options","cloud_options","collect","comm_subexpr_elim","comm_subexpr_elim","comm_subplan_elim","comm_subplan_elim","concat_impl","concat_impl","concat_impl","cross_join","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe_optimized_plan","describe_plan","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_columns","drop_nulls","eager","eager","explain","explode","fast_projection","fast_projection","fetch","file_caching","file_caching","fill_nan","fill_null","filter","finish","finish","finish","finish_no_glob","finish_no_glob","finish_no_glob","first","fmt","force_parallel","from","from","from","from","from","from","from","from","from","from","get_current_optimizations","group_by","group_by_dynamic","group_by_rolling","group_by_stable","has_header","head","hive_partitioning","how","infer_schema_length","init","init","init","init","init","init","init","init","init","inner_join","into","into","into","into","into","into","into","into","into","iter_paths","iter_paths","join","join_builder","known_schema","known_schema","last","lazy","left_join","left_on","limit","logical_plan","logical_plan","low_memory","low_memory","low_memory","map","map_python","max","mean","median","melt","memmap","merge_sorted","min","n_rows","n_rows","n_rows","n_rows","n_rows","n_rows","name","new","new","new","new_paths","new_paths","null_count","on","optimize","outer_join","parallel","path","path","path","paths","paths","paths","pivot","predicate_pushdown","predicate_pushdown","profile","projection_pushdown","projection_pushdown","quantile","raise_if_empty","rechunk","rechunk","rechunk","rechunk","rechunk","rename","reverse","right_on","row_count","row_count","row_count","row_count","row_count","row_count","scan","scan_from_python_function","scan_ipc","scan_ipc_files","scan_parquet","scan_parquet_files","schema","schema","schema","select","select_seq","semi_join","set_known_schema","set_known_schema","shift","shift_and_fill","simplify_expr","simplify_expr","sink_csv","sink_ipc","sink_parquet","sink_parquet_cloud","skip_rows","slice","slice_pushdown","slice_pushdown","sort","sort_by_exprs","std","streaming","streaming","suffix","sum","tail","tail","to_alp","to_alp_optimized","to_dot","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","top_k","truncate_ragged_lines","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_coercion","type_coercion","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique_stable","unnest","use_statistics","validate","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","with_batch_size","with_cache","with_column","with_columns","with_columns_seq","with_comm_subexpr_elim","with_comm_subplan_elim","with_comment_char","with_context","with_dtype_overwrite","with_encoding","with_end_of_line_char","with_ignore_errors","with_infer_schema_length","with_infer_schema_length","with_missing_is_null","with_n_rows","with_n_rows","with_null_values","with_optimizations","with_path","with_path","with_path","with_paths","with_paths","with_paths","with_predicate_pushdown","with_projection_pushdown","with_quote_char","with_rechunk","with_rechunk","with_rechunk","with_row_count","with_row_count","with_row_count","with_schema","with_schema","with_schema_modify","with_separator","with_simplify_expr","with_skip_rows","with_skip_rows_after_header","with_slice_pushdown","with_streaming","with_try_parse_dates","with_type_coercion","without_optimizations","pivot","pivot_stable","executors","expressions","planner","Dummy","Executor","borrow","borrow_mut","deref","deref_mut","drop","execute","execute","from","init","into","try_from","try_into","type_id","vzip","AggregationContext","PartitionedAggregation","PhysicalExpr","PhysicalIoHelper","as_expression","as_partitioned_aggregator","as_stats_evaluator","as_stats_evaluator","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","evaluate","evaluate","evaluate_on_groups","evaluate_partitioned","expr","finalize","fmt","fmt","from","from","has_window_function","init","init","into","into","is_literal","is_valid_aggregation","to_field","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","create_physical_plan","Aggregate","AnonymousScan","AnonymousScanOptions","Anti","AsOf","Binary","Boolean","Cache","Cross","CsvWriterOptions","DataFrameScan","Date","DateTime","Distinct","Duration","Duration","DynamicGroupOptions","Error","ExtContext","Float32","Float64","HStack","Inner","Int16","Int32","Int64","Int8","IpcWriterOptions","Join","JoinArgs","JoinType","JoinValidation","Left","Literal","LiteralValue","LogicalPlan","ManyToMany","ManyToOne","MapFunction","NULL","Null","Null","OneToMany","OneToOne","Outer","ParquetWriteOptions","PolarsTemporalGroupby","Projection","PythonScan","Range","RollingGroupOptions","RollingOptions","Scan","Selection","Semi","Series","Sink","Slice","Sort","Time","UInt16","UInt32","UInt64","UInt8","Union","Utf8","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_ms","add_ns","add_us","allows_predicate_pushdown","allows_projection_pushdown","allows_slice_pushdown","as_any","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by","center","check_sorted","check_sorted","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closed_window","closed_window","closed_window","cmp","compare","compression","compression","data_pagesize_limit","days","days_only","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dot","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","every","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_str","fn_params","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_datatype","group_by_dynamic","group_by_rolling","has_header","hash","hash","hash","how","include_boundaries","index_column","index_column","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_constant_duration","is_full_days","is_valid_join","is_zero","label","lit","lit","lit","maintain_order","maintain_order","maintain_order","min_periods","months","months_only","mul","nanoseconds","needs_checks","new","new","offset","offset","parse","parsed_int","partial_cmp","period","period","row_group_size","scan","schema","schema","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_options","skip_rows","slice","start_by","statistics","suffix","suffix","to_alp","to_anyvalue","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate_impl","truncate_ms","truncate_ns","truncate_us","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validation","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weeks","weeks_only","weights","window_size","data_type","high","low","aggs","apply","args","by_column","contexts","count","df","err","expr","exprs","file_info","file_options","function","id","input","input","input","input","input","input","input","input","input","input","input","input","input_left","input_right","inputs","keys","left_on","len","maintain_order","offset","options","options","options","options","options","options","options","output_schema","path","payload","predicate","predicate","projection","right_on","scan_type","schema","schema","schema","schema","schema","schema","selection"],"q":[[0,"polars_lazy"],[6,"polars_lazy::dsl"],[1161,"polars_lazy::dsl::AggExpr"],[1168,"polars_lazy::dsl::BooleanFunction"],[1170,"polars_lazy::dsl::Expr"],[1203,"polars_lazy::dsl::FunctionExpr"],[1235,"polars_lazy::dsl::binary"],[1251,"polars_lazy::dsl::cat"],[1255,"polars_lazy::dsl::dt"],[1301,"polars_lazy::dsl::functions"],[1393,"polars_lazy::dsl::names"],[1394,"polars_lazy::dsl::python_udf"],[1440,"polars_lazy::dsl::string"],[1492,"polars_lazy::dsl::udf"],[1498,"polars_lazy::frame"],[1885,"polars_lazy::frame::pivot"],[1887,"polars_lazy::physical_plan"],[1890,"polars_lazy::physical_plan::executors"],[1906,"polars_lazy::physical_plan::expressions"],[1950,"polars_lazy::physical_plan::planner"],[1951,"polars_lazy::prelude"],[2426,"polars_lazy::prelude::LiteralValue"],[2429,"polars_lazy::prelude::LogicalPlan"],[2485,"dyn_clone::sealed"],[2486,"polars_error"],[2487,"core::result"],[2488,"core::convert"],[2489,"core::convert"],[2490,"alloc::sync"],[2491,"core::ops::function"],[2492,"core::marker"],[2493,"core::marker"],[2494,"polars_core::chunked_array::ops"],[2495,"core::any"],[2496,"alloc::vec"],[2497,"core::option"],[2498,"alloc::string"],[2499,"polars_core::series"],[2500,"polars_core::datatypes::dtype"],[2501,"core::clone"],[2502,"polars_core::utils"],[2503,"polars_time::windows::group_by"],[2504,"polars_core::datatypes::time_unit"],[2505,"serde::de"],[2506,"polars_core::series::ops"],[2507,"core::marker"],[2508,"core::fmt"],[2509,"core::fmt"],[2510,"polars_plan::dsl::function_expr::range"],[2511,"polars_plan::dsl::function_expr::cat"],[2512,"polars_plan::dsl::function_expr::binary"],[2513,"polars_plan::dsl::function_expr::datetime"],[2514,"polars_plan::logical_plan::options"],[2515,"polars_core::schema"],[2516,"polars_plan::logical_plan"],[2517,"polars_core::datatypes::field"],[2518,"core::hash"],[2519,"polars_ops::chunked_array::interpolate"],[2520,"core::fmt"],[2521,"polars_arrow::kernels::rolling::no_nulls"],[2522,"polars_ops::series::ops::rank"],[2523,"polars_core::chunked_array::ops::rolling_window"],[2524,"core::marker"],[2525,"serde::ser"],[2526,"polars_core::series::series_trait"],[2527,"polars_ops::chunked_array::list::to_struct"],[2528,"core::any"],[2529,"polars_error"],[2530,"pyo3::types::any"],[2531,"pyo3::instance"],[2532,"polars_core::schema"],[2533,"polars_core::datatypes::aliases"],[2534,"polars_io::cloud::options"],[2535,"core::iter::traits::collect"],[2536,"polars_core::frame::explode"],[2537,"std::path"],[2538,"std::path"],[2539,"polars_utils::arena"],[2540,"polars_plan::logical_plan::aexpr"],[2541,"polars_utils::arena"],[2542,"polars_plan::logical_plan::anonymous_scan"],[2543,"pyo3::instance"],[2544,"polars_io::csv::read"],[2545,"polars_core::frame::group_by::proxy"],[2546,"core::fmt"],[2547,"chrono_tz::timezones"],[2548,"core::cmp"],[2549,"polars_plan::dot"],[2550,"ahash::random_state"],[2551,"hashbrown::map"],[2552,"alloc::borrow"],[2553,"polars_core::datatypes::any_value"]],"d":["Domain specific language for the Lazy API.","Helper to delay a failing method until the query plan is …","Lazy variant of a DataFrame.","","","","","","","","","","","","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::List</code>.","","","","","","","","","","","Specialized expressions for Categorical dtypes.","","","Utility struct for the <code>when-then-otherwise</code> expression.","Utility struct for the <code>when-then-otherwise</code> expression.","","","","","","","","Special case that does not need columns","","","","","","","","Arguments used by <code>datetime</code> in order to produce an <code>Expr</code> of …","","","","","","Arguments used by <code>duration</code> in order to produce an <code>Expr</code> of …","","","","Can be used in a select statement to exclude a column from …","","","","Explode the aggregated list and just do a hstack instead …","Expressions that can be used in various contexts. Queries …","","","","","","","","","","","","","","Map the group values to the position","","","","","","","","","","","","","","","","","","Join the groups as ‘List&lt;group_dtype&gt;’ to the row …","","Set root name as Alias","","Use the string value for sorting","","Specialized expressions for <code>Series</code> of <code>DataType::List</code>.","","","","","","","","","","","","Specialized expressions for Categorical dtypes.","","","","","","","","","","","Take the nth column in the <code>DataFrame</code>","","","","Explode the aggregated list and just do a hstack instead …","","","Use the physical categories for sorting","","","","","","","","","","","","","","","","","Expressions in this node should only be expanding e.g. …","A wrapper trait for any binary closure …","A wrapper trait for any closure …","","","","","","","","","Wrapper type that has special equality properties …","","","","","Specialized expressions for Struct dtypes.","","","","","","A ternary operation if true then “foo” else “bar”","Utility struct for the <code>when-then-otherwise</code> expression.","","","","","","","","","Represents a user-defined function","","","Utility struct for the <code>when-then-otherwise</code> expression.","","See postgres window functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert all values to their absolute/positive value.","","Get the group indexes of the group by operation.","Rename Column.","Selects all columns. Shorthand for <code>col(&quot;*&quot;)</code>.","","Returns whether all values in the column are <code>true</code>.","Create a new column with the the bitwise-and of the …","","","“and” operation.","","Returns whether any of the values in the column are <code>true</code>.","Create a new column with the the bitwise-or of the …","Append expressions. This is done by adding the chunks of …","Apply a function/closure over the groups. This should only …","Like <code>map_binary</code>, but used in a group_by-aggregation …","","Apply a function/closure over the groups with many …","","Apply a function/closure over the groups of multiple …","Get the approximate count of unique values.","Generate a range of integers.","Compute the inverse cosine of the given expression","Compute the inverse hyperbolic cosine of the given …","Compute the inverse sine of the given expression","Compute the inverse hyperbolic sine of the given expression","Compute the inverse tangent of the given expression","Compute the inverse tangent of the given expression, with …","Compute the inverse hyperbolic tangent of the given …","Return the index of the maximum value of every sublist","Get the index value that has the maximum value.","Return the index of the minimal value of every sublist","Get the index value that has the minimum value.","Get the index values that would sort this expression.","Find the indexes that would sort these series in order of …","Get the first index of unique values of this expression.","Get the indices where <code>condition</code> evaluates <code>true</code>.","","Get the <code>array::ArrayNameSpace</code>.","","","Take several expressions and collect them into a …","Find the mean of all the values in the column named <code>name</code>. …","Fill missing value with next non-null.","","","Compute <code>op(l, r)</code> (or equivalently <code>l op r</code>). <code>l</code> and <code>r</code> must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>k</code> smallest elements.","use a cache of unique, converted dates to apply the …","","creates a logical expression with a call of the UDF This …","","","creates a logical expression with a call of the UDF This …","Casts the column given by <code>Expr</code> to a different type.","Cast expression to another data type.","","Get the <code>CategoricalNameSpace</code>.","Compute the cube root of the given expression","Ceil underlying floating point array to the highest …","Clip underlying values to a set boundary.","Clip underlying values to a set boundary.","Clip underlying values to a set boundary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds the expressions from left to right keeping the first …","Create a Column Expression based on a column name.","Select multiple columns by name.","","Concat lists entries.","Horizontally concat string columns in linear time","Check if the list array contain an element","Compute the cosine of the given expression","Compute the hyperbolic cosine of the given expression","Compute the cotangent of the given expression","Count expression.","Count the values of the Series or Get counts of the group …","Count how often the value produced by <code>element</code> occurs.","Compute the covariance between two columns.","Cumulatively count values from 0 to len.","Accumulate over multiple columns horizontally / row wise.","Get an array with the cumulative max computed at every …","Get an array with the cumulative min computed at every …","Get an array with the cumulative product computed at every …","Accumulate over multiple columns horizontally / row wise.","Get an array with the cumulative sum computed at every …","Run an expression over a sliding window that increases <code>1</code> …","Run an expression over a sliding window that increases <code>1</code> …","Bin continuous values into discrete categories.","Create a date range from a <code>start</code> and <code>stop</code> expression.","Create a column of date ranges from a <code>start</code> and <code>stop</code> …","Construct a column of <code>Datetime</code> from the provided …","Create a datetime range from a <code>start</code> and <code>stop</code> expression.","Create a column of datetime ranges from a <code>start</code> and <code>stop</code> …","","","","","","","","","","","","","","Convert from radians to degrees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Diff every sublist.","Calculate the n-th discrete difference between values.","","Compute the dot/inner product between two expressions.","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop NaN values.","","Drop null values.","","","Select multiple columns by dtype.","Select multiple columns by dtype.","Construct a column of <code>Duration</code> from the provided …","Compute the entropy as <code>-sum(pk * log(pk)</code>. where <code>pk</code> are …","","Compare <code>Expr</code> with other <code>Expr</code> on equality.","","","","","","","","","","","","","Compare <code>Expr</code> with other <code>Expr</code> on equality where <code>None == None</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Run any <code>Expr</code> on these lists elements","Run any <code>Expr</code> on these lists elements","Calculate the exponentially-weighted moving average.","Calculate the exponentially-weighted moving standard …","Calculate the exponentially-weighted moving variance.","If polars may parse matches that not contain the whole …","Exclude a column from a wildcard/regex selection.","","Calculate the exponential of all elements in the input …","Explode the utf8/ list column.","","Retrieve one of the fields of this <code>StructChunked</code> as a new …","Replace the floating point <code>NaN</code> values by a value.","Replace the null values by a value.","Filter a single column.","First column in DataFrame.","Get first item of every sublist.","Get the first value in the group.","Alias for <code>explode</code>.","","Floor underlying floating point array to the lowest …","Floor divide <code>self</code> by <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","Accumulate over multiple columns horizontally / row wise.","","Formatting string","Format the results of an array of expressions using a …","Fill missing value with previous non-null.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The function implementation.","A function that cannot be expressed with <code>map</code> or <code>apply</code> and …","Functions","Get items in every sublist by index.","","","","","","","Check if <code>Expr</code> &gt; <code>Expr</code>.","Check if <code>Expr</code> &gt;= <code>Expr</code>.","Whether this expression expands to multiple expressions.","Compute the hash of every element.","","","","","","","","","","Get the head of every sublist","Get the first <code>n</code> elements of the Expr result.","","","Aggregate the group to a Series.","","","","","","","","","","","","","","","","","","","","","","","","","","","The function signature.","Generate a range of integers.","Generate a range of integers for each row of the input …","Fill null values using interpolation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Get a hold to an implementor of the <code>Display</code> trait that …","Get a mask of duplicated values.","Get mask of finite values if dtype is Float.","Get a mask of the first unique value.","Check if the values of the left expression are in the …","Get mask of infinite values if dtype is Float.","Get a mask of the last unique value.","Get mask of NaN values if dtype is Float.","Get inverse mask of NaN values if dtype is Float.","A column which is <code>false</code> wherever <code>expr</code> is null, <code>true</code> …","Run is_not_null operation on <code>Expr</code>.","A column which is <code>true</code> wherever <code>expr</code> is null, <code>false</code> …","Run is_null operation on <code>Expr</code>.","Whether this expression expands to multiple expressions …","A projection that only takes a column or a column + alias.","Get a mask of unique values.","Join all string items in a sublist and place a separator …","Keep the original root name","Compute the kurtosis (Fisher or Pearson).","Last column in DataFrame.","Get last item of every sublist.","Get the last value in the group.","Return the number of elements in each list.","","Create a Literal Expression from <code>L</code>. A literal expression …","Compute the logarithm to a given base.","Compute the natural logarithm of all elements plus one in …","Get minimal value that could be hold by this dtype.","Check if <code>Expr</code> &lt; <code>Expr</code>.","Check if <code>Expr</code> &lt;= <code>Expr</code>.","Apply a function/closure once the logical plan get …","Define an alias by mapping a function over the original …","Apply a closure on the two columns that are evaluated from …","","Set the timezone of a datetime dtype.","Map a single dtype.","","","","","Apply a function/closure once the logical plan get …","Apply a function/closure over multiple columns once the …","Apply a function/closure once the logical plan get …","","Apply a function/closure over multiple columns once the …","Map to a float supertype if numeric, else preserve","","Map to a float supertype.","Map the dtype to the dtype of the list elements.","Map the dtypes to the “supertype” of a list of lists.","Map the dtype to the “supertype” of all fields.","Find the maximum of all the values in the column named <code>name</code>…","Compute the maximum of the items in every subarray.","Compute the maximum of the items in every sublist.","Reduce groups to maximum value.","Create a new column with the the maximum value per row.","Find the mean of all the values in the column named <code>name</code>. …","Compute the mean of every sublist and return a <code>Series</code> of …","Reduce groups to the mean value.","Find the median of all the values in the column named <code>name</code>…","Reduce groups to the median value.","Get the <code>meta::MetaNameSpace</code>","","","","Find the minimum of all the values in the column named <code>name</code>…","Compute the minimum of the items in every subarray.","Compute the minimum of the items in every sublist.","Reduce groups to minimal value.","Create a new column with the the minimum value per row.","","","","Compute the mode(s) of this column. This is the most …","","","Expr::mutate().apply(fn())","Get the number of unique values in the groups.","name","","Reduce groups to maximum value.","Reduce groups to minimal value.","","Compare <code>Expr</code> with other <code>Expr</code> on non-equality.","Compare <code>Expr</code> with other <code>Expr</code> on non-equality where …","","","","Construct a new <code>DatetimeArgs</code> set to <code>year</code>, <code>month</code>, <code>day</code>","Create a new <code>DurationArgs</code> with all fields set to <code>lit(0)</code>. …","Create a new UserDefinedFunction","","","Negates a boolean column.","Negate <code>Expr</code>.","Get the null count of the column/group.","Options for the function.","“or” operation.","Define a default for the <code>when-then-otherwise</code> expression.","Define a default for the <code>when-then-otherwise</code> expression.","Get the output name of this expression.","Apply window function over a subgroup. This is similar to …","","Computes percentage change between values.","","","Compute the pearson correlation between two columns.","Constant Pi","Pop latest expression and return the input(s) of the …","Raise expression to the power <code>exponent</code>","Add a prefix to the root column name.","Get the product aggregation of an expression.","","Bin continuous values into discrete categories based on …","Bin continuous values into discrete categories using …","Find a specific quantile of all the values in the column …","Compute the quantile per group.","Convert from degrees to radians","Assign ranks to data, dealing with ties appropriately.","Analogous to <code>Iterator::reduce</code>.","","Rename the fields of the <code>StructChunked</code>.","Create a column of length <code>n</code> containing <code>n</code> copies of the …","Repeat the column <code>n</code> times, where <code>n</code> is determined by the …","","The function output type.","Reverse every sublist","Reverse column","Get the lengths of runs of identical values.","Similar to <code>rle</code>, but maps values to run IDs.","","","","Apply a custom function over a rolling/ moving window of …","Apply a custom function over a rolling/ moving window of …","Apply a rolling maximum.","Apply a rolling mean.","Apply a rolling median.","Apply a rolling minimum.","Apply a rolling quantile.","Apply a rolling skew.","Apply a rolling std-dev.","Apply a rolling sum.","Apply a rolling variance.","Get the root column names.","Round underlying floating point array to given decimal …","Proxy of the number of rows in both sides of the joins …","","","","","Find indices where elements should be inserted to maintain …","","","","","","","","","","","","","","","","","Return the SET DIFFERENCE between both list arrays.","Return the SET INTERSECTION between both list arrays.","","Set this <code>Series</code> as <code>sorted</code> so that downstream code can use …","Return the SET SYMMETRIC DIFFERENCE between both list …","Shift every sublist.","Shift the values in the array by some period. See the …","Shift the values in the array by some period and fill the …","Shrink numeric columns to the minimal required datatype …","","Compute the sign of the given expression","Compute the sine of the given expression","Compute the hyperbolic sine of the given expression","Compute the sample skewness of a data set.","Slice every sublist.","Slice the Series. <code>offset</code> may be negative.","Sort every sublist.","Sort in increasing order. See the eager implementation.","Sort this column by the ordering of another column. Can …","Sort with given options.","Compute the spearman rank correlation between two columns. …","Compute the square root of the given expression","Standard deviation of the values of the Series.","","If set then polars will return an error if any date …","Cast expression to another data type. Throws an error if …","","Get the <code>struct_::StructNameSpace</code>.","","Add a suffix to the root column name.","Sum all the values in the column named <code>name</code>. Shorthand for …","Compute the sum of the items in every subarray.","Compute the sum the items in every sublist.","Reduce groups to the sum of all the values.","Create a new column with the the sum of the values in each …","","Get the tail of every sublist","Get the last <code>n</code> elements of the Expr result.","Get items in every sublist by multiple indexes.","Take the values by idx.","Compute the tangent of the given expression","Compute the hyperbolic tangent of the given expression","","Add a condition to the <code>when-then-otherwise</code> expression.","","Generate a time range.","Create a column of time ranges from a <code>start</code> and <code>stop</code> …","","","","Get a dot language representation of the Expression.","Get Field result of the expression. The schema is the …","","","","","","","","","","","","","","","","","","","","","","Map to a physical type.","","","","","Convert this <code>List</code> to a <code>Series</code> of type <code>Struct</code>. The width …","Returns the <code>k</code> largest elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a single dtype with a potentially failing mapper …","Map all dtypes with a potentially failing mapper function.","Map a single field with a potentially failing mapper …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo any renaming operation like <code>alias</code>, <code>keep_name</code>.","Return the SET UNION between both list arrays.","Keep only the unique values in every sub-array.","Keep only the unique values in every sublist.","Get unique values of this expression.","Returns a count of the unique values in the order of …","Keep only the unique values in every sub-array.","Keep only the unique values in every sublist.","Get unique values of this expression, while maintaining …","Get maximal value that could be hold by this dtype.","Count all unique values and create a struct mapping value …","Variance of the values of the Series.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Start a <code>when-then-otherwise</code> expression.","Attach a statement to the corresponding condition.","Add another condition to the <code>when-then-otherwise</code> …","","","Set the day","Set the days","Set a dtype.","Set <code>milliseconds</code>, <code>microseconds</code>, and <code>nanoseconds</code>","Set <code>hour</code>, <code>minute</code>, and <code>second</code>","Set <code>hours</code>, <code>minutes</code>, and <code>seconds</code>","Set the hour","Set the hours","Set the microsecond","Set the microseconds","Set the milliseconds","Set the minute","Set the minutes","Set the month","Set the nanoseconds","","Field with the same dtype.","Set the second","Set the seconds","","","Set the weeks","Set the year","“xor” operation.","","","","","","","","","","","","","","","","","","","","","function to apply","Also has the input. i.e. avg(“foo”)","function to apply","","","function arguments","","","function arguments","","","length is not yet known so we accept negative offsets","","","","","","output dtype of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::Utf8</code>.","","","Check if a binary value contains a literal binary.","","","","Check if a binary value ends with the given sequence.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Check if a binary value starts with the given sequence.","","","","","Specialized expressions for Categorical dtypes.","","Use the string value for sorting","Use the physical categories for sorting","Specialized expressions for <code>Series</code> with dates/datetimes.","","","","Change the underlying <code>TimeUnit</code>. And update the data …","","Change the underlying <code>TimeZone</code> of the <code>Series</code>. This does …","Get the (local) date of a Date/Datetime","Get the (local) datetime of a Datetime","Get the month of a Date/Datetime","","","","","Returns the argument unchanged.","Get the hour of a Datetime/Time64","","Calls <code>U::from(self)</code>.","","Get the iso-year of a Date/Datetime. This may not …","Get the microsecond of a Time64 (scaled from nanosecs)","Get the millisecond of a Time64 (scaled from nanosecs)","Get the minute of a Datetime/Time64","Get the month of a Date/Datetime","","","Get the nanosecond part of a Time64","Offset this <code>Date/Datetime</code> by a given offset <code>Duration</code>. This …","Get the ordinal_day of a Date/Datetime","Extract quarter from underlying NaiveDateTime …","","","Get the second of a Datetime/Time64","Convert from Date/Time/Datetime into Utf8 with the given …","Get the (local) time of a Date/Datetime/Time","","Convert from Date/Time/Datetime into Utf8 with the given …","","","","","","Extract the week from the underlying Date representation. …","Extract the ISO week day from the underlying Date …","Change the underlying <code>TimeUnit</code> of the <code>Series</code>. This does …","Get the year of a Date/Datetime","Arguments used by <code>datetime</code> in order to produce an <code>Expr</code> of …","Arguments used by <code>duration</code> in order to produce an <code>Expr</code> of …","","","Selects all columns. Shorthand for <code>col(&quot;*&quot;)</code>.","","Like <code>map_binary</code>, but used in a group_by-aggregation …","Generate a range of integers.","Find the indexes that would sort these series in order of …","Get the indices where <code>condition</code> evaluates <code>true</code>.","Take several expressions and collect them into a …","Find the mean of all the values in the column named <code>name</code>. …","","","Casts the column given by <code>Expr</code> to a different type.","","","Folds the expressions from left to right keeping the first …","Create a Column Expression based on a column name.","Collect all <code>LazyFrame</code> computations.","Select multiple columns by name.","Concat multiple <code>LazyFrame</code>s vertically.","","Concat LazyFrames diagonally. Calls <code>concat</code> internally.","Concat lists entries.","Horizontally concat string columns in linear time","Compute the covariance between two columns.","Accumulate over multiple columns horizontally / row wise.","Accumulate over multiple columns horizontally / row wise.","Create a date range from a <code>start</code> and <code>stop</code> expression.","Create a column of date ranges from a <code>start</code> and <code>stop</code> …","Construct a column of <code>Datetime</code> from the provided …","Create a datetime range from a <code>start</code> and <code>stop</code> expression.","Create a column of datetime ranges from a <code>start</code> and <code>stop</code> …","","","","","","","Select multiple columns by dtype.","Select multiple columns by dtype.","Construct a column of <code>Duration</code> from the provided …","Accumulate over multiple columns horizontally / row wise.","Format the results of an array of expressions using a …","Returns the argument unchanged.","","","","Generate a range of integers.","Generate a range of integers for each row of the input …","Calls <code>U::from(self)</code>.","A column which is <code>false</code> wherever <code>expr</code> is null, <code>true</code> …","A column which is <code>true</code> wherever <code>expr</code> is null, <code>false</code> …","Apply a closure on the two columns that are evaluated from …","Find the maximum of all the values in the column named <code>name</code>…","Find the mean of all the values in the column named <code>name</code>. …","Find the median of all the values in the column named <code>name</code>…","","","","Find the minimum of all the values in the column named <code>name</code>…","","","","","Negates a boolean column.","","Compute the pearson correlation between two columns.","Find a specific quantile of all the values in the column …","","Analogous to <code>Iterator::reduce</code>.","Create a column of length <code>n</code> containing <code>n</code> copies of the …","","","","","Compute the spearman rank correlation between two columns. …","Sum all the values in the column named <code>name</code>. Shorthand for …","Generate a time range.","Create a column of time ranges from a <code>start</code> and <code>stop</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Specialized expressions for <code>Series</code> of <code>DataType::Utf8</code>.","","","Concat the values into a string array.","Check if this column of strings contains a Regex. If <code>strict</code>…","Check if a string value contains a literal substring.","Count all successive non-overlapping regex matches.","","","","Check if a string value ends with the <code>sub</code> string.","","Extract a regex pattern from the a string value. If …","Extract each successive non-overlapping match in an …","","Returns the argument unchanged.","Parse string in base radix into decimal.","","Calls <code>U::from(self)</code>.","","Return the length of each string as the number of bytes.","Return the length of each string as the number of …","Return the string left justified in a string of length …","Replace values that match a regex <code>pat</code> with a <code>value</code>.","Replace all values that match a regex <code>pat</code> with a <code>value</code>.","Replace values that match a regex <code>pat</code> with a <code>value</code>.","Return the string right justified in a string of length …","Slice the string values.","Split the string by a substring. The resulting dtype is …","Split exactly <code>n</code> times by a given substring. The resulting …","Split exactly <code>n</code> times by a given substring and keep the …","Split the string by a substring and keep the substring. …","Split by a given substring, returning exactly <code>n</code> items. If …","Check if a string value starts with the <code>sub</code> string.","Remove leading and trailing characters, or whitespace if …","Remove trailing characters, or whitespace if matches is …","Remove leading characters, or whitespace if matches is …","Remove prefix.","Remove suffix.","Convert a Utf8 column into a Date/Datetime/Time column.","Convert a Utf8 column into a Date column.","Convert a Utf8 column into a Datetime column.","Convert a Utf8 column into a Decimal column.","Convert all characters to lowercase.","Convert a Utf8 column into a Time column.","Convert all characters to titlecase.","Convert all characters to uppercase.","","","","","Return a copy of the string left filled with ASCII ‘0’ …","Represents a user-defined function","The function implementation.","The function signature.","name","Options for the function.","The function output type.","AllowedOptimizations","","","","Reads LazyFrame from a filesystem or a cloud storage. …","Lazy abstraction over an eager <code>DataFrame</code>. It really is an …","Utility struct for lazy group_by operation.","","State of the allowed optimizations","","","","","","","","","","","","","","Group by and aggregate.","Allow parallel table evaluation.","","","Left anti join this query with another lazy query.","Apply a function over the groups as a new DataFrame.","","","","","","","","","","","","","","","","","","","","","Caches the result into a new LazyFrame.","","","Cast named frame columns, resulting in a new LazyFrame …","Cast all frame columns to the given dtype, resulting in a …","","","","","","","","","","","","","","","","","CloudOptions used to list files.","CloudOptions used to list files.","","Execute all the lazy operations and collect them into a …","","","","","Recommended concatenation of LazyFrames from many input …","Recommended concatenation of LazyFrames from many input …","","Creates the cartesian product from both frames, preserving …","","","","","","","","","","","","","","","","","","","","","","","","Return a String describing the optimized logical plan.","Return a String describing the naive (un-optimized) …","","","","","","","","","","Removes columns from the DataFrame. Note that it’s …","Drop rows containing None.","","","Return a String describing the logical plan.","Apply explode operation. See eager explode.","","","Fetch is like a collect operation, but it overwrites the …","","","Fill NaN values in the DataFrame with an expression.","Fill None values in the DataFrame with an expression.","Filter by some predicate expression.","Finish builder","Get the final LazyFrame.","Get the final LazyFrame.","Get the final LazyFrame. This method assumes, that path is …","","","Get the first row.","","Force parallel table evaluation.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get current optimizations.","Performs a “group-by” on a <code>LazyFrame</code>, producing a …","Group based on a time value (or index value of type Int32, …","Create rolling groups based on a time column.","Similar to <code>group_by</code>, but order of the DataFrame is …","Set whether the CSV file has headers","Return first n rows of each group","","Select the join type.","","","","","","","","","","","Inner join this query with another lazy query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get list of files referenced by this reader.","Get list of files referenced by this reader.","Generic function to join two LazyFrames.","Consume <code>self</code> and return a <code>JoinBuilder</code> to customize a join …","Set a schema on first glob pattern, so that others don’t …","Set a schema on first glob pattern, so that others don’t …","Get the last row.","","Left join this query with another lazy query.","The expressions you want to join the left table on.","Limit the DataFrame to the first <code>n</code> rows.","","","Reduce memory usage in expensive of performance","Reduce memory usage in expensive of performance","","Apply a function/closure once the logical plan get …","","Aggregate all the columns as their maximum values.","Aggregate all the columns as their mean values.","Aggregate all the columns as their median values.","Melt the DataFrame from wide to long format.","","","Aggregate all the columns as their minimum values.","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","","","","","Create the <code>JoinBuilder</code> with the provided <code>LazyFrame</code> as the …","","","","","Aggregate all the columns as the sum of their null value …","The expressions you want to join both tables on.","","Outer join this query with another lazy query.","","Path of the scanned file. It can be potentially a glob …","","","","","","Polars lazy does not implement a pivot because it is …","","","Profile a LazyFrame.","","","Aggregate all the columns as their quantile values.","Raise an error if CSV is empty (otherwise return an empty …","Rechunk the memory to contiguous chunks when parsing is …","","","","","Rename columns in the DataFrame.","Reverse the <code>DataFrame</code> from top to bottom.","The expressions you want to join the right table on.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","","","","","","Create a LazyFrame directly from a ipc scan.","","Create a LazyFrame directly from a parquet scan.","Create a LazyFrame directly from a parquet scan.","Get a handle to the schema — a map from column names to …","","","Select (and optionally rename, with <code>alias</code>) columns from …","","Left semi join this query with another lazy query.","","","Shift the values by a given period and fill the parts that …","Shift the values by a given period and fill the parts that …","","","Stream a query result into an csv file. This is useful if …","Stream a query result into an ipc/arrow file. This is …","Stream a query result into a parquet file. This is useful …","Stream a query result into a parquet file on an …","","Slice the DataFrame using an offset (starting row) and a …","","","Add a sort operation to the logical plan.","Add a sort operation to the logical plan.","Aggregate all the columns as their standard deviation …","","","Suffix to add duplicate column names in join. Defaults to …","Aggregate all the columns as their sum values.","Get the last <code>n</code> rows.","Return last n rows of each group","","","Get a dot language representation of the LogicalPlan.","","","","","","","","","","Truncate lines that are longer than the schema.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop non-unique rows without maintaining the order of kept …","Drop non-unique rows and maintain the order of kept rows.","Unnest the given <code>Struct</code> columns: the fields of the <code>Struct</code> …","","","Aggregate all the columns as their variance values.","","","","","","","","","","The right table in the join.","","Cache the DataFrame after reading.","Add a column, given as an expression, to a DataFrame.","Add multiple columns, given as expressions, to a DataFrame.","Add multiple columns to a DataFrame, but evaluate them …","Toggle common subexpression elimination optimization on or …","Toggle common subplan elimination optimization on or off","Set the comment character. Lines starting with this …","","Overwrite the schema with the dtypes in this given Schema. …","Set  <code>CsvEncoding</code>","Set the <code>char</code> used as end of line. The default is <code>b&#39;\\\\n&#39;</code>.","Continue with next batch when a ParserError is encountered.","Set the number of rows to use when inferring the csv …","Set the number of rows to use when inferring the json …","Treat missing fields as null.","Try to stop parsing when <code>n</code> rows are parsed. During …","Try to stop parsing when <code>n</code> rows are parsed. During …","Set values that will be interpreted as missing/ null.","Set allowed optimizations.","Set path of the scanned file. Support glob patterns.","","","Set paths of the scanned files. Doesn’t glob patterns.","","","Toggle predicate pushdown optimization.","Toggle projection pushdown optimization.","Set the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If …","Rechunk the memory to contiguous chunks when parsing is …","Rechunk the memory to contiguous chunks when parsing is …","Rechunk the memory to contiguous chunks when parsing is …","Add a new column at index 0 that counts the rows.","Add a <code>row_count</code> column.","Add a <code>row_count</code> column.","Set the CSV file’s schema","Set the JSON file’s schema","Modify a schema before we run the lazy scanning.","Set the CSV file’s column separator as a byte character","Toggle expression simplification optimization on or off.","Skip the first <code>n</code> rows during parsing. The header will be …","Skip this number of rows after the header location.","Toggle slice pushdown optimization.","Allow (partial) streaming engine.","Automatically try to parse dates/datetimes and time. If …","Toggle type coercion optimization.","Turn off all optimizations.","","","","","","","Executors will evaluate physical expressions and collect …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Take a DataFrame and evaluate the expressions. Implement …","Wrapper struct that allow us to use a PhysicalExpr in …","","Convert to a partitioned aggregator.","Can take &amp;dyn Statistics and determine of a file should be …","","","","","","","","","","","","Take a DataFrame and evaluate the expression.","","Some expression that are not aggregations can be done per …","This is called in partitioned aggregation. Partitioned …","","Called to merge all the partitioned results in a final …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Get the output field of this expr","","","","","","","","","","Groupby aggregation","","","","","A raw binary array","A binary true or false.","Cache the input at this point in the LP","","","In memory DataFrame","","","Remove duplicates from the table","","","","Catches errors and throws them later","This allows expressions to access other tables","A 32-bit floating point number.","A 64-bit floating point number.","Adding columns to the table without a Join","","A 16-bit integer number.","A 32-bit integer number.","A 64-bit integer number.","An 8-bit integer number.","","Join operation","","","","","","","","No unique checks","Check if join keys are unique in right dataset.","A (User Defined) Function","","The literal Null","","Check if join keys are unique in left dataset.","Check if join keys are unique in both left and right …","","","","Column selection","","","","","","Filter on a boolean mask","","","","Slice the table","Sort the table","","An unsigned 16-bit integer number.","An unsigned 32-bit integer number.","An unsigned 64-bit integer number.","An unsigned 8-bit integer number.","","A UTF8 encoded string type.","","","","","","","","","","","","","","","","","specify if the scan provider should allow predicate …","specify if the scan provider should allow projection …","specify if the scan provider should allow slice pushdowns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the rolling aggregates with a window defined by a …","Set the labels at the center of the window.","In cases sortedness cannot be checked by the sorted flag, …","In cases sortedness cannot be checked by the sorted flag, …","","","","","","","","","","","","","","","","","","","","","","","","","","","The closed window of that time window if given","","","","","Data page compression","Data page compression","if <code>None</code> will be 1024^2 bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Start a window at this interval.","","","","","","","","","","","","","","","","","Optional parameters for the rolling function","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the <code>DataType</code> of the value","","","","","","","","Add the boundaries to the dataframe.","Time or index column.","Time or index column.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether the duration consists of full days.","","<code>true</code> if zero duration.","Truncate the time column values to the window.","Literal expression.","","","maintain the order the data was processed","maintain the order the data was processed","","Amount of elements in the window that should be filled …","","","","Returns the nanoseconds from the <code>Duration</code> without the …","","Create a new integer size <code>Duration</code>","","Offset window boundaries.","","Parse a string into a <code>Duration</code>","","","Window duration.","Window duration.","If <code>None</code> will be all written to a single row group.","Creates a dataframe from the supplied function &amp; scan …","function to supply the schema. Allows for an optional …","","","","","","","","","","","","","","","","","","Compute and write column statistics.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An optional slice with the same length as the window that …","The length of the window.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,22,4,0,27,4,45,45,32,4,45,45,22,22,22,0,22,22,22,4,22,0,22,0,4,22,0,0,22,0,0,22,22,4,4,22,22,27,4,22,22,22,22,22,22,22,0,22,32,22,43,4,0,22,32,32,4,0,22,4,52,0,0,0,22,4,27,22,32,22,4,0,0,22,0,52,32,32,22,27,22,0,45,45,45,45,45,45,45,45,45,45,45,52,0,4,27,38,22,0,0,4,22,22,22,32,32,27,22,27,27,0,27,22,32,32,32,27,43,45,32,32,4,22,0,32,51,22,22,38,32,22,22,27,22,22,22,22,4,0,22,51,0,22,22,22,4,0,0,22,22,22,22,22,4,4,4,0,27,22,0,22,0,4,27,22,4,22,4,0,22,22,22,32,0,22,22,22,0,22,27,0,4,4,0,0,32,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,3,3,3,3,4,4,4,4,0,8,4,0,50,46,4,8,4,0,4,4,0,4,4,4,0,4,0,4,4,4,4,4,4,4,8,4,8,4,4,0,4,0,50,4,63,27,0,0,4,0,4,0,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,4,49,71,34,63,59,34,0,4,0,4,4,4,4,4,4,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,0,0,0,0,0,0,8,4,4,4,0,4,8,0,4,0,4,4,4,0,4,173,173,4,0,0,0,0,0,46,47,48,4,16,16,16,46,47,49,50,51,52,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,16,45,22,46,47,48,49,50,51,52,34,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,27,4,43,32,16,16,16,45,22,48,49,50,51,52,8,4,4,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,4,8,4,0,4,0,0,0,4,27,4,4,43,32,16,16,45,22,48,49,50,51,52,4,4,4,4,4,43,43,43,43,32,32,32,32,45,45,45,45,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,174,174,4,4,4,49,4,4,4,4,68,68,4,4,4,0,8,4,4,16,4,4,63,59,71,72,38,4,4,43,32,32,16,45,45,22,22,46,47,48,49,50,51,52,34,0,50,49,0,4,37,25,89,8,3,68,38,39,40,41,42,27,4,4,4,4,4,4,4,4,4,4,4,4,4,4,43,32,16,16,16,16,16,16,16,16,45,22,22,22,22,22,46,47,48,49,50,51,51,52,34,16,34,4,0,8,37,60,13,89,63,72,4,4,3,4,4,43,32,45,22,48,49,51,52,8,4,46,47,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,34,0,0,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,4,175,8,3,4,4,4,4,4,4,4,4,0,4,0,4,3,3,4,8,4,4,0,8,4,8,4,0,4,4,4,4,4,4,4,0,4,89,89,16,16,16,16,4,0,4,4,0,89,4,89,89,89,89,0,25,8,4,0,0,8,4,0,4,4,46,47,47,0,25,8,4,0,48,46,47,4,46,4,4,4,34,0,4,4,47,4,4,89,89,16,46,47,34,4,4,0,4,4,34,4,40,42,3,4,4,4,4,4,0,4,3,4,4,4,0,4,4,0,4,4,4,0,4,68,0,4,4,34,8,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,3,4,50,50,16,4,4,4,46,47,27,4,43,32,16,16,16,45,22,48,49,50,51,52,8,8,37,4,8,8,4,4,4,4,4,4,4,4,8,4,8,4,4,4,0,4,4,4,49,4,0,4,4,4,0,25,8,4,0,16,8,4,8,4,4,4,0,39,41,0,0,46,47,46,4,4,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,4,89,4,32,45,22,8,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,89,89,89,63,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,0,3,8,25,8,4,4,25,8,4,4,4,4,37,25,89,8,3,68,38,39,40,41,42,27,4,43,32,16,45,22,46,47,48,49,50,51,52,34,47,0,40,42,48,46,46,47,89,47,46,47,46,47,46,47,47,46,47,46,47,89,89,46,47,46,46,47,46,4,46,176,177,178,176,177,178,176,179,180,181,182,183,181,183,184,185,181,186,187,188,189,190,186,185,188,182,191,190,192,191,191,192,184,188,189,190,190,189,187,192,183,187,193,194,195,196,197,198,199,200,200,197,193,197,193,197,193,201,202,198,203,194,204,205,193,206,207,208,209,210,203,204,211,196,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,38,38,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,108,0,46,0,0,0,0,0,0,108,108,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,108,108,108,108,0,0,0,0,0,108,46,47,108,0,0,108,0,0,0,0,0,0,46,47,47,0,46,47,46,47,0,108,0,0,108,0,0,0,0,46,47,0,0,0,0,46,47,46,108,108,108,108,108,108,47,46,0,0,0,0,0,113,94,113,94,113,94,113,113,113,94,113,94,113,113,94,113,113,113,113,113,113,113,94,113,113,94,94,113,94,113,94,113,113,94,113,94,113,94,94,113,94,113,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,34,34,34,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,112,117,121,125,126,119,127,128,112,117,118,119,112,112,117,119,118,112,117,121,125,126,119,127,128,118,112,117,121,125,126,119,127,128,112,112,126,127,112,112,112,117,121,125,126,119,127,128,112,117,121,125,126,119,127,128,212,212,127,112,135,128,135,128,212,212,125,112,112,121,126,127,128,118,112,117,121,125,126,119,127,128,118,112,117,121,125,126,119,127,128,112,112,118,112,117,121,125,126,119,127,128,112,112,135,128,112,112,135,128,112,135,128,112,112,112,118,212,212,212,125,119,112,128,118,118,112,112,117,121,125,126,119,127,128,112,112,112,112,112,125,117,127,118,121,118,112,117,121,125,126,119,127,128,112,118,112,117,121,125,126,119,127,128,212,212,112,112,212,212,112,213,112,118,112,112,117,125,119,127,112,112,112,112,112,112,126,112,112,212,125,119,121,126,127,121,118,125,119,125,119,112,118,112,112,127,212,125,119,212,125,119,0,135,128,112,135,128,112,125,212,125,119,126,127,112,112,118,212,125,119,121,126,127,119,112,112,112,112,112,112,119,121,112,112,112,212,212,112,112,135,128,112,112,112,112,121,112,135,128,112,112,112,135,128,118,112,112,117,112,112,112,112,117,121,125,126,119,127,128,112,125,118,112,117,121,125,126,119,127,128,118,112,117,121,125,126,119,127,128,135,128,118,112,117,121,125,126,119,127,128,112,112,112,127,118,112,118,112,117,121,125,126,119,127,128,118,119,125,112,112,112,112,112,125,112,125,125,125,125,125,119,125,125,119,125,112,212,125,119,212,125,119,112,112,125,212,125,119,112,125,119,125,119,125,125,112,125,125,112,112,125,112,112,0,0,0,0,0,0,0,153,153,153,153,153,161,153,153,153,153,153,153,153,153,0,0,0,0,159,159,159,156,156,158,156,158,156,158,156,158,156,158,159,156,159,154,156,154,159,158,156,158,156,156,158,156,158,159,159,159,156,158,156,158,156,158,156,158,0,62,0,0,132,132,164,164,62,132,0,62,164,164,62,0,164,0,62,62,164,164,62,132,164,164,164,164,0,62,0,0,0,132,0,0,0,150,150,62,0,0,164,150,150,132,0,0,62,62,164,0,0,62,62,132,164,62,62,62,164,164,164,164,164,62,164,101,131,98,56,134,132,150,164,148,147,146,165,62,56,56,56,120,120,120,120,146,101,131,98,56,134,170,132,150,164,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,101,101,131,98,101,131,98,56,134,132,150,164,148,147,146,165,62,101,131,98,56,134,132,150,164,148,147,146,165,62,101,131,98,56,56,148,147,148,56,56,101,131,98,150,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,62,131,98,56,134,132,150,164,148,147,146,165,62,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,131,98,56,134,132,150,164,148,147,146,165,131,131,131,131,98,98,98,98,56,56,56,56,134,134,134,134,132,132,132,132,150,150,150,150,148,148,148,148,147,147,147,147,146,146,146,146,165,165,165,165,131,131,98,56,120,134,132,132,150,150,164,148,147,146,165,62,165,101,101,131,98,56,134,134,170,132,150,164,148,147,146,165,62,164,214,214,146,98,56,164,134,131,131,98,101,131,98,56,134,170,132,150,164,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,56,56,150,56,131,93,170,164,148,147,146,101,56,56,56,56,150,56,134,131,98,56,56,56,131,98,148,120,120,62,131,98,56,134,132,150,164,148,147,146,165,62,146,165,134,131,148,134,134,62,164,101,131,98,56,134,132,150,164,148,147,146,165,62,132,150,56,56,56,56,101,131,98,56,134,170,132,150,164,164,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,101,131,98,56,134,170,132,150,164,148,147,146,165,62,134,101,131,98,56,134,170,132,150,164,148,147,146,165,62,56,56,101,101,215,215,215,216,216,217,217,218,219,220,221,222,223,224,224,225,219,226,219,222,216,223,227,217,228,225,218,229,221,230,230,231,216,230,228,216,228,232,222,216,230,223,227,231,220,224,229,226,224,220,230,224,220,222,216,230,223,218,220],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[3,4],[[3,4],[[6,[4,5]]]],[[3,4],[[6,[4,5]]]],[[3,4],[[6,[4,5]]]],[4,4],[[4,4]],[4,4],[[4,7],4],[[],4],[8,4],[[4,9],4],[-1,4,[[11,[[10,[4]]]]]],0,0,[[4,-1],4,[[12,[4]]]],[8,4],[[4,9],4],[-1,4,[[11,[[10,[4]]]]]],[[4,-1,9],4,[[12,[4]]]],[[4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,20],[[6,[21,5]]]],[[4,-1,[10,[4]],[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,22,[10,[4]],9,9],4],[[-1,-2,[16,[[15,[13,14]]]],9],4,[17,18,19],[[11,[[10,[4]]]]]],[4,4],[[4,4,23],4],[4,4],[4,4],[4,4],[4,4],[4,4],[[4,4],4],[4,4],[8,4],[4,4],[8,4],[4,4],[[4,24],4],[[-1,[10,[9]]],4,[[11,[[10,[4]]]]]],[4,4],[-1,4,[[12,[4]]]],0,[4,25],[-1,26,[]],[27,4],[[[28,[4,14]]],4],[7,4],[[4,[30,[29]]],4],0,[4,31],[[4,32,4],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,4],4],0,[[-1,7],[[6,[33,5]]],[]],[[34,[28,[4,14]]],[[6,[4,5]]]],[[-1,[10,[35]]],[[6,[[30,[35]],5]]],[]],[[-1,35,35],[[6,[35,5]]],[]],[[34,[28,[4,14]]],4],[[4,36],4],[[4,36],4],0,[4,37],[4,4],[4,4],[[4,4,4],4],[[4,4],4],[[4,4],4],[38,38],[39,39],[40,40],[41,41],[42,42],[27,27],[4,4],[43,43],[32,32],[[[16,[-1]]],[[16,[-1]]],44],[45,45],[22,22],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[34,34],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[10,[4]]],4],[7,4],[-1,4,[[53,[33]]]],[[-2,9],[[6,[4,5]]],[[12,[4]],44],[[11,[[10,[-1]]]]]],[-2,[[6,[4,5]]],[[12,[4]],44],[[11,[[10,[-1]]]]]],[[-1,7],4,[[11,[[10,[4]]]]]],[[8,-1],4,[[12,[4]]]],[4,4],[4,4],[4,4],[[],4],[4,4],[[8,-1],4,[[12,[4]]]],[[4,4],4],[[4,9],4],[[4,-1,-2,9],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[4,9],4],[[4,9],4],[[4,9],4],[[-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[4,9],4],[[-1,4,54,9],4,[]],[[-1,4,54,9],4,[]],[[4,[28,[55,14]],[30,[[28,[33,14]]]],9,9],4],[[4,4,56,57,[30,[58]],[30,[33]]],4],[[4,4,56,57,[30,[58]],[30,[33]]],4],[46,4],[[4,4,56,57,[30,[58]],[30,[33]]],4],[[4,4,56,57,[30,[58]],[30,[33]]],4],0,0,0,[[],4],[[],[[16,[[15,[59,14]]]]]],[[],[[16,[[15,[60,14]]]]]],[[],[[16,[[15,[13,14]]]]]],[[],46],[[],47],[[],49],[[],50],[[],51],[[],52],[4,4],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[[[16,[-1]]],[],[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[-1,[[6,[27]]],61],[-1,[[6,[4]]],61],[-1,[[6,[43]]],61],[-1,[[6,[32]]],61],[-1,[[6,[[16,[[15,[62,14]]]]]]],61],[-1,[[6,[[16,[[15,[63,14]]]]]]],61],[-1,[[6,[[16,[35]]]]],61],[-1,[[6,[45]]],61],[-1,[[6,[22]]],61],[-1,[[6,[48]]],61],[-1,[[6,[49]]],61],[-1,[[6,[50]]],61],[-1,[[6,[51]]],61],[-1,[[6,[52]]],61],[[8,23,64],4],[[4,23,64],4],[[4,4]],[[4,-1],4,[[12,[4]]]],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[4,4],[8,4],[4,4],0,[4,65],[36,4],[-1,4,[[11,[[10,[36]]]]]],[47,4],[[4,55,9],4],[[27,27],9],[[4,-1],4,[[12,[4]]]],[[4,4],9],[[43,43],9],[[32,32],9],[[[16,[35]],[16,[35]]],9],[[[16,[[15,[-1,14]]]],[16,[[15,[-1,14]]]]],9,66],[[45,45],9],[[22,22],9],[[48,48],9],[[49,49],9],[[50,50],9],[[51,51],9],[[52,52],9],[[4,-1],4,[[12,[4]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,4,9],4,[]],[[-1,4,9],4,[]],[[4,67],4],[[4,67],4],[[4,67],4],0,[[4,-1],4,[[53,[33]]]],[[4,-1],4,[[11,[[10,[36]]]]]],[4,4],[4,4],[[68,23],4],[[68,7],4],[[4,-1],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[[],4],[8,4],[4,4],[4,4],[[],[[16,[[15,[13,14]]]]]],[4,4],[[4,4],4],[[63,69],[[6,[2,70]]]],[[59,69],[[6,[2,70]]]],[[71,69],[[6,[2,70]]]],[[72,69],[[6,[2,70]]]],[[38,69],[[6,[2,70]]]],[[4,69],[[6,[2,70]]]],[[4,69],[[6,[2,70]]]],[[43,69],[[6,[2,70]]]],[[32,69],[[6,[2,70]]]],[[32,69],[[6,[2,70]]]],[[[16,[-1]],69],[[6,[2,70]]],[]],[[45,69],[[6,[2,70]]]],[[45,69],[[6,[2,70]]]],[[22,69],[[6,[2,70]]]],[[22,69],[[6,[2,70]]]],[[46,69],[[6,[2,70]]]],[[47,69],[[6,[2,70]]]],[[48,69],[[6,[2,70]]]],[[49,69],[[6,[2,70]]]],[[50,69],[[6,[2,70]]]],[[51,69],[[6,[2,70]]]],[[52,69],[[6,[2,70]]]],[[34,69],[[6,[2,70]]]],[[4,-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],0,0,[[7,-1],[[6,[4,5]]],[[11,[[10,[4]]]]]],[[4,[30,[29]]],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[27,4],[-1,-1,[]],[73,4],[74,4],[75,4],[9,4],[29,4],[76,4],[77,4],[78,4],[23,4],[55,4],[7,4],[79,4],[-1,-1,[]],[-1,-1,[]],[80,[[16,[[15,[63,14]]]]]],[81,[[16,[[15,[63,14]]]]]],[22,[[16,[[15,[63,14]]]]]],[82,[[16,[[15,[63,14]]]]]],[45,[[16,[[15,[63,14]]]]]],[83,[[16,[[15,[63,14]]]]]],[-1,-1,[]],[84,[[16,[[15,[63,14]]]]]],[-1,-1,[]],[82,22],[83,22],[80,22],[45,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[52,51],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,[[16,[[15,[13,14]]]]]],0,[[4,-1,[16,[[15,[13,14]]]],85],4,[17,18,19]],0,[[8,4],4],[37,4],[[-1,86,87,88,88],[[30,[88]]],[]],[[-1,86,87,[10,[88]]],88,[]],[89,54],[-1,[[30,[[16,[[15,[13,14]]]]]]],[]],[[-1,86],[[6,[[15,[86,14]],5]]],[]],[[4,-1],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[3,9],[[4,29,29,29,29],4],[[4,-1],2,90],[[43,-1],2,90],[[32,-1],2,90],[[45,-1],2,90],[[22,-1],2,90],[[48,-1],2,90],[[49,-1],2,90],[[51,-1],2,90],[[52,-1],2,90],[[8,4],4],[[4,[30,[54]]],4],0,0,[4,4],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,[[4,4,23],4],[[4,4,23],4],[[4,91],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4],[-1,8,[]],[8,8],[3,[[6,[[0,[92]],5]]]],[4,4],[4,4],[4,4],[[4,-1],4,[[12,[4]]]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[3,9],[3,9],[4,4],[[8,4],4],[4,4],[[4,9,9],4],[[],4],[8,4],[4,4],[8,4],[4,8],[-1,4,93],[[4,55],4],[4,4],[4,4],[[4,-1],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[[4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,-1],4,[17,18,19]],[[4,4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,20],[[6,[4,5]]]],[[89,[30,[33]]],[[6,[88,5]]]],[[89,-1],[[6,[88,5]]],17],[-1,[[16,[[15,[13,14]]]]],[17,18,19]],[-1,[[16,[[15,[13,14]]]]],[17,18,19]],[-1,[[16,[[15,[13,14]]]]],[17,18,19]],[-1,[[16,[[15,[13,14]]]]],[17,18,19]],[[4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[-1,-2,[16,[[15,[13,14]]]]],4,[17,18,19],[[11,[[10,[4]]]]]],[[4,-1,[10,[4]],[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,22,[10,[4]],9,9],4],[[-1,-2,[16,[[15,[13,14]]]]],4,[17,18,19],[[11,[[10,[4]]]]]],[89,[[6,[88,5]]]],[[4,94,9],4],[89,[[6,[88,5]]]],[89,[[6,[88,5]]]],[89,[[6,[88,5]]]],[89,[[6,[88,5]]]],[7,4],[25,4],[8,4],[4,4],[-1,4,[[11,[[10,[4]]]]]],[7,4],[8,4],[4,4],[7,4],[4,4],[4,3],0,0,0,[7,4],[25,4],[8,4],[4,4],[-1,4,[[11,[[10,[4]]]]]],0,0,0,[4,4],0,[[4,4]],[4,95],[4,4],0,0,[4,4],[4,4],0,[[4,-1],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[89,[[6,[88,5]]]],[[[10,[88]]],89],[-1,[[16,[-1]]],[]],[[4,4,4],46],[[],47],[[7,[28,[88,14]],[16,[[15,[13,14]]]],-1],34,63],[[4,[28,[4,14]]],2],[[4,[28,[4,14]]],2],[4,4],[4,4],[4,4],0,[[4,-1],4,[[12,[4]]]],[[40,-1],4,[[12,[4]]]],[[42,-1],4,[[12,[4]]]],[3,[[6,[[15,[7,14]],5]]]],[[4,-2],4,[[12,[4]],44],[[11,[[10,[-1]]]]]],[[4,-2,52],4,[[12,[4]],44],[[11,[[10,[-1]]]]]],[[4,23],4],[4,4],[4,4],[[4,4,73],4],[[],4],[3,[[28,[4,14]]]],[[4,-1],4,[[12,[4]]]],[[4,7],4],[4,4],0,[[4,[28,[55,14]],[30,[[28,[33,14]]]],9,9,9],4],[[4,54,[30,[[28,[33,14]]]],9,9,9],4],[[7,4,96],4],[[4,4,96],4],[4,4],[[4,97,[30,[29]]],4],[[-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[4,4]],[[68,[28,[33,14]]],4],[[-1,4],4,[[12,[4]]]],[[4,-1],4,[[12,[4]]]],[[4,[10,[23]]],4],0,[8,4],[4,4],[4,4],[4,4],[[4,98],4],[[4,4,48],4],[[4,4,48],4],[[4,[15,[17,14]],[16,[[15,[13,14]]]],99],4],[[4,54,-1],4,[20,18,19,100]],[[4,101],4],[[4,101],4],[[4,101],4],[[4,101],4],[[4,101],4],[[4,54,9],4],[[4,101],4],[[4,101],4],[[4,101],4],[3,[[28,[[15,[7,14]],14]]]],[[4,78],4],0,0,[[],[[16,[[15,[13,14]]]]]],[[4,55,9,9,[30,[29]]],4],[[4,4,9,9,[30,[29]]],4],[[4,-1,102],4,[[12,[4]]]],0,0,[[27,-1],6,103],[[4,-1],6,103],[[43,-1],6,103],[[32,-1],6,103],[[[16,[35]],-1],6,103],[[[16,[[15,[62,14]]]],-1],6,103],[[[16,[[15,[63,14]]]],-1],6,103],[[45,-1],6,103],[[22,-1],6,103],[[48,-1],6,103],[[49,-1],6,103],[[50,-1],6,103],[[51,-1],6,103],[[52,-1],6,103],[[8,-1],4,[[12,[4]]]],[[8,-1],4,[[12,[4]]]],[[37,38],4],[[4,104],4],[[8,-1],4,[[12,[4]]]],[[8,4],4],[[4,23],4],[[4,23,-1],4,[[12,[4]]]],[4,4],[[4,[30,[29]]],4],[4,4],[4,4],[4,4],[[4,9],4],[[8,4,4],4],[[4,-1,-2],4,[[12,[4]]],[[12,[4]]]],[[8,24],4],[[4,9],4],[[4,-2,-3],4,[[12,[4]],44],[[11,[[10,[-1]]]]],[[11,[[10,[9]]]]]],[[4,24],4],[[4,4,73,9],4],[4,4],[[4,73],4],[4,105],0,[[4,36],4],0,[4,68],[[4,4]],[[4,7],4],[7,4],[25,4],[8,4],[4,4],[-1,4,[[11,[[10,[4]]]]]],[[],[[16,[[15,[13,14]]]]]],[[8,4],4],[[4,[30,[54]]],4],[[8,4,9],4],[[4,-1],4,[[12,[4]]]],[4,4],[4,4],[[4,4,4],4],[[39,-1],40,[[12,[4]]]],[[41,-1],42,[[12,[4]]]],[[4,4,56,57],4],[[4,4,56,57],4],0,0,0,[4,[[6,[33,5]]]],[[4,86,87],[[6,[88,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[89,[[6,[88,5]]]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[8,106,[30,[[15,[17,14]]]],54],4],[[4,4],4],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[89,-1],[[6,[88,5]]],17],[[89,-1],[[6,[88,5]]],17],[[89,-1],[[6,[88,5]]],17],[[-1,[28,[73,14]]],[[6,[2,5]]],[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],0,[3,4],[[8,-1],4,[[12,[4]]]],[25,4],[8,4],[4,4],[4,4],[25,4],[8,4],[4,4],[4,4],[[4,9,9],4],[[4,73],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,39,[[12,[4]]]],[[40,-1],41,[[12,[4]]]],[[42,-1],41,[[12,[4]]]],0,[[46,4],46],[[46,4],46],[[47,4],47],[[89,36],[[6,[88,5]]]],[[47,4,4,4],47],[[46,4,4,4],46],[[47,4,4,4],47],[[46,4],46],[[47,4],47],[[46,4],46],[[47,4],47],[[47,4],47],[[46,4],46],[[47,4],47],[[46,4],46],[[47,4],47],[[89,[30,[36]]],[[6,[88,5]]]],[89,[[6,[88,5]]]],[[46,4],46],[[47,4],47],[[46,58],46],[[46,[30,[33]]],46],[[47,4],47],[[46,4],46],[[4,-1],4,[[12,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[31,4],4],[54,-1,[]],[54,-1,[]],[54,2],[[31,4],4],[-1,-1,[]],[[],54],[-1,-2,[],[]],[[31,4],4],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,-2,[],[]],0,0,0,0,0,[65,4],[-1,-2,[],[]],[-1,-2,[],[]],[[65,58],4],[[65,4,58],4],[[65,33],4],[65,4],[65,4],[65,4],[54,-1,[]],[54,-1,[]],[54,2],[65,4],[-1,-1,[]],[65,4],[[],54],[-1,-2,[],[]],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[[65,4],4],[65,4],[65,4],[[65,[30,[33]],4],4],[[65,-1,-1,4],4,[[11,[7]]]],[65,4],[[65,7],4],[65,4],[[65,58],4],[[65,7],4],[[65,4,33,4],4],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,-2,[],[]],[65,4],[65,4],[[65,58],4],[65,4],0,0,0,[[-1,1],2,[]],[[],4],0,[[4,4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[[4,4,23],4],[[-1,[10,[9]]],4,[[11,[[10,[4]]]]]],[-1,4,[[12,[4]]]],[[[28,[4,14]]],4],[7,4],[-1,-2,[],[]],[-1,-2,[],[]],[[4,36],4],[108,108],[[-1,-2],2,[],[]],[[[10,[4]]],4],[7,4],[-1,[[110,[[28,[109]]]]],111],[-1,4,[[53,[33]]]],[[-1,108],[[110,[112]]],[[11,[[10,[112]]]]]],[[-2,9],[[6,[4,5]]],[[12,[4]],44],[[11,[[10,[-1]]]]]],[[-1,108],[[110,[112]]],[[11,[[10,[112]]]]]],[-2,[[6,[4,5]]],[[12,[4]],44],[[11,[[10,[-1]]]]]],[[-1,7],4,[[11,[[10,[4]]]]]],[[4,4],4],[[4,-1,-2,9],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[4,4,56,57,[30,[58]],[30,[33]]],4],[[4,4,56,57,[30,[58]],[30,[33]]],4],[46,4],[[4,4,56,57,[30,[58]],[30,[33]]],4],[[4,4,56,57,[30,[58]],[30,[33]]],4],0,0,[[],108],[54,-1,[]],[54,-1,[]],[54,2],[36,4],[-1,4,[[11,[[10,[36]]]]]],[47,4],[[4,-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[7,-1],[[6,[4,5]]],[[11,[[10,[4]]]]]],[-1,-1,[]],0,0,[[],54],[[4,4,23],4],[[4,4,23],4],[-1,-2,[],[]],[4,4],[4,4],[[4,4,-1,[16,[[15,[13,14]]]]],4,[17,18,19]],[7,4],[7,4],[7,4],0,0,0,[7,4],0,0,0,0,[4,4],0,[[4,4,73],4],[[7,4,96],4],0,[[-1,-2],4,[17,18,19,44],[[11,[[10,[4]]]]]],[[-1,4],4,[[12,[4]]]],[[4,4,48],4],[[4,4,48],4],0,0,[[4,4,73,9],4],[7,4],[[4,4,56,57],4],[[4,4,56,57],4],0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[94,[10,[35]]],[[6,[[30,[35]],5]]]],[[113,109],[[6,[109,5]]]],[113,113],[[-1,-2],2,[],[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[-1,[[6,[113]]],61],[54,2],[54,2],[[113,113],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[113,69],[[6,[2,70]]]],[-1,-1,[]],[[[115,[114]]],113],[-1,-1,[]],[94,[[30,[[16,[[15,[13,14]]]]]]]],[[],54],[[],54],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[114]],[30,[36]]],94],[[113,-1],6,103],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[94,[28,[73,14]]],[[6,[2,5]]]],[-1,107,[]],[-1,107,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[105,7],4],[[105,4,9],4],[[105,4],4],[[105,4,9],4],[54,-1,[]],[54,-1,[]],[54,2],[[105,4],4],[105,4],[[105,7,54],4],[[105,4],4],[[105,7],[[6,[4,5]]]],[-1,-1,[]],[[105,78,9],4],[[],54],[-1,-2,[],[]],[[105,[30,[36]],[30,[54]]],4],[105,4],[105,4],[[105,54,116],4],[[105,4,4,9],4],[[105,4,4,9],4],[[105,4,4,9,23],4],[[105,54,116],4],[[105,23,[30,[29]]],4],[[105,4],4],[[105,4,54],4],[[105,4,54],4],[[105,4],4],[[105,4,54],4],[[105,4],4],[[105,4],4],[[105,4],4],[[105,4],4],[[105,4],4],[[105,4],4],[[105,36,49,4],4],[[105,49],4],[[105,[30,[58]],[30,[33]],49,4],4],[[105,54],4],[105,4],[[105,49],4],[105,4],[105,4],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,-2,[],[]],[[105,54],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[112,9],112],[[117,-1],112,[[11,[[10,[4]]]]]],[[118,9],118],[119,9],[[[15,[120]],121],[[110,[112]]]],[[112,112,-1,-1],112,[[12,[4]]]],[[117,-1,122],112,[17,18,19]],[119,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[112,123,-1,-2,9,9],112,[[11,[[10,[4]]]]],[[11,[[10,[9]]]]]],[112,112],0,0,[[112,[124,[7,36]],9],112],[[112,36,9],112],[112,112],[117,117],[121,121],[125,125],[126,126],[119,119],[127,127],[128,128],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[30,[129]]],[]],[-1,[[30,[129]]],[]],0,[112,[[110,[109]]]],0,0,0,0,[[-1,[28,[112]]],[[110,[112]]],[]],[[-1,[28,[112]]],[[110,[112]]],[]],[[125,[28,[112]]],[[110,[112]]]],[[112,112],112],[[],112],[[],121],[[],126],[[],127],[[],128],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[112,[[110,[33]]]],[112,33],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[[112,-1],112,130],[[112,[30,[[28,[4]]]]],112],0,0,[[112,9],[[110,[33]]]],[[112,-2],112,[[12,[4]],44],[[11,[[10,[-1]]]]]],0,0,[[112,54],[[110,[109]]]],0,0,[[112,-1],112,[[12,[4]]]],[[112,-1],112,[[12,[4]]]],[[112,4],112],[118,112],[-1,[[110,[112]]],[]],[-1,[[110,[112]]],[]],[-1,[[110,[112]]],[]],[125,[[110,[112]]]],[119,[[110,[112]]]],[112,112],[[128,69],[[6,[2,70]]]],[[118,9],118],[-1,-1,[]],[62,112],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[112,128],[[112,-2],117,[[12,[4]],44],[[11,[[10,[-1]]]]]],[[112,4,-1,131],117,[[11,[[10,[4]]]]]],[[112,4,-1,98],117,[[11,[[10,[4]]]]]],[[112,-2],117,[[12,[4]],44],[[11,[[10,[-1]]]]]],[[125,9],125],[[117,[30,[54]]],112],0,[[118,132],118],0,[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[112,112,-1,-1],112,[[12,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[110,[[30,[133]]]]],[]],[-1,[[110,[[30,[133]]]]],[]],[[112,112,-1,-1,134],112,[[11,[[10,[4]]]]]],[112,118],[-1,[[30,[122]]],[]],[-1,[[30,[122]]],[]],[112,112],[-1,112,[]],[[112,112,-1,-1],112,[[12,[4]]]],[[118,-1],118,[[11,[[10,[4]]]]]],[[112,123],112],0,0,[[125,9],125],[[119,9],119],0,[[112,-1,135,[30,[[15,[72]]]],[30,[7]]],112,[17,18,19]],[[112,113,135,[30,[122]],9],112],[112,112],[112,112],[112,112],[[112,136],112],0,[[112,112,7],[[110,[112]]]],[112,112],[-1,[[30,[54]]],[]],[125,[[30,[54]]]],[119,[[30,[54]]]],0,0,0,0,[112,118],[-1,125,[[11,[137]]]],[-1,119,[[11,[137]]]],[[[28,[138]]],125],[[[28,[138]]],119],[112,112],[[118,-1],118,[[11,[[10,[4]]]]]],[[112,[140,[139]],[140,[141]]],[[110,[142]]]],[[112,112,-1,-1],112,[[12,[4]]]],0,[-1,137,[]],[125,137],[119,137],[-1,[[10,[138]]],[]],[125,[[10,[138]]]],[119,[[10,[138]]]],0,0,0,[112,[[110,[[2,[109,109]]]]]],0,0,[[112,4,96],112],[[125,9],125],[-1,9,[]],[125,9],[119,9],0,0,[[112,-1,-2],112,130,130],[112,112],[[118,-1],118,[[11,[[10,[4]]]]]],[-1,[[30,[143]]],[]],[125,[[30,[143]]]],[119,[[30,[143]]]],0,0,0,[[119,144],[[110,[109]]]],[[86,145,9],112],[[-1,126],[[110,[112]]],[[11,[137]]]],[[[28,[138]],126],[[110,[112]]]],[[-1,127],[[110,[112]]],[[11,[137]]]],[[[28,[138]],127],[[110,[112]]]],[112,[[110,[122]]]],[[119,[30,[54]]],[[110,[122]]]],0,[[112,-1],112,[[11,[[10,[4]]]]]],[[112,-1],112,[[11,[[10,[4]]]]]],[[112,112,-1,-1],112,[[12,[4]]]],[[-1,122],2,[]],[[-1,122],2,[]],[[112,23],112],[[112,23,-1],112,[[12,[4]]]],0,0,[[112,138,146],[[110,[2]]]],[[112,138,147],[[110,[2]]]],[[112,138,148],[[110,[2]]]],[[112,33,[30,[129]],148],[[110,[2]]]],0,[[112,23,123],112],0,0,[[112,7,24],112],[[112,-1,-2,9,9],112,[[11,[[10,[4]]]]],[[11,[[10,[9]]]]]],[[112,73],112],0,0,[[118,-1],118,[[11,[7]]]],[112,112],[[112,123],112],[[117,[30,[54]]],112],[112,[[110,[[2,[142,[140,[139]],[140,[141]]]]]]]],[112,[[110,[[2,[142,[140,[139]],[140,[141]]]]]]]],[[112,9],[[110,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[112,123,-1,-2,9,9],112,[[11,[[10,[4]]]]],[[11,[[10,[9]]]]]],[[125,9],125],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,0,[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[[112,[30,[[28,[33]]]],149],112],[[112,[30,[[28,[33]]]],149],112],[[112,-1],112,130],0,[[118,150],118],[[112,73],112],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[118,112],118],[[119,[30,[54]]],119],[[125,9],125],[[112,4],112],[[112,-1],112,[[11,[[10,[4]]]]]],[[112,-1],112,[[11,[[10,[4]]]]]],[[112,9],112],[[112,9],112],[[125,[30,[73]]],125],[[112,-1],112,[[11,[[10,[112]]]]]],[[125,[30,[86]]],125],[[125,151],125],[[125,73],125],[[125,9],125],[[125,[30,[54]]],125],[[119,[30,[54]]],119],[[125,9],125],[[125,[30,[54]]],125],[[119,[30,[54]]],119],[[125,[30,[152]]],125],[[112,128],112],[[-1,138],-1,[]],[[125,138],125],[[119,138],119],[[-1,[28,[138]]],-1,[]],[[125,[28,[138]]],125],[[119,[28,[138]]],119],[[112,9],112],[[112,9],112],[[125,[30,[73]]],125],[[-1,9],-1,[]],[[125,9],125],[[119,9],119],[[112,7,[30,[123]]],112],[[125,[30,[143]]],125],[[119,[30,[143]]],119],[[125,[30,[122]]],125],[[119,[30,[122]]],119],[[125,-1],[[110,[125]]],17],[[125,73],125],[[112,9],112],[[125,54],125],[[125,54],125],[[112,9],112],[[112,9],112],[[125,9],125],[[112,9],112],[112,112],[[109,-1,-2,-3,9,[30,[4]],[30,[7]]],[[110,[109]]],130,130,130],[[109,-1,-2,-3,9,[30,[4]],[30,[7]]],[[110,[109]]],130,130,130],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[54,-1,[]],[54,-1,[]],[54,2],0,0,[-1,-1,[]],[[],54],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,-2,[],[]],0,0,0,0,[-1,[[30,[4]]],[]],[-1,[[30,[154]]],[]],[-1,[[30,[155]]],[]],[156,[[30,[155]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,2],[54,2],0,[[156,109],[[110,[35]]]],0,0,0,0,[[159,69],160],[[158,69],160],[-1,-1,[]],[-1,-1,[]],0,[[],54],[[],54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,9,[]],[[-1,86],[[110,[88]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,107,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[142,[140,[139]],[140,[141]]],[[110,[[162,[161]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[56,23,[30,[163]]],[[6,[23,5]]]],[[56,23,[30,[163]]],[[6,[23,5]]]],[[56,23,[30,[163]]],[[6,[23,5]]]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,26,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[101,101],[131,131],[98,98],[56,56],[134,134],[132,132],[150,150],[164,164],[148,148],[147,147],[146,146],[165,165],[62,62],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,0,[[56,56],166],[[-1,-2],166,[],[]],0,0,0,[56,23],[56,9],[[],101],[[],131],[[],98],[[],150],[[],148],[[],147],[[],146],[[],165],[[],62],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[54,-1,[]],[62,33],[-1,[[6,[131]]],61],[-1,[[6,[98]]],61],[-1,[[6,[56]]],61],[-1,[[6,[134]]],61],[-1,[[6,[132]]],61],[-1,[[6,[150]]],61],[-1,[[6,[164]]],61],[-1,[[6,[148]]],61],[-1,[[6,[147]]],61],[-1,[[6,[146]]],61],[-1,[[6,[165]]],61],[-1,[[6,[62]]],61],[[62,33,[2,[54,54]],167,[169,[33,33,168,14]]],[[6,[2,70]]]],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[[131,131],9],[[98,98],9],[[56,56],9],[[134,134],9],[[132,132],9],[[150,150],9],[[164,164],9],[[148,148],9],[[147,147],9],[[146,146],9],[[165,165],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[131,69],[[6,[2,70]]]],[[98,69],[[6,[2,70]]]],[[56,69],[[6,[2,70]]]],[[120,69],[[6,[2,70]]]],[[134,69],[[6,[2,70]]]],[[132,69],[[6,[2,70]]]],[[132,69],[[6,[2,70]]]],[[150,69],[[6,[2,70]]]],[[150,69],[[6,[2,70]]]],[[164,69],[[6,[2,70]]]],[[148,69],[[6,[2,70]]]],[[147,69],[[6,[2,70]]]],[[146,69],[[6,[2,70]]]],[[165,69],[[6,[2,70]]]],[[62,69],[[6,[2,70]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[132,134],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[164,36],[[-1,[28,[35,14]],131],[[6,[[2,[35,[28,[35,14]],157]],5]]],[]],[[-1,[28,[35,14]],98],[[6,[[2,[35,[28,[35,14]],157]],5]]],[]],0,[[98,-1],2,90],[[56,-1],2,90],[[164,-1],2,90],0,0,0,0,[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,9],[56,9],[[150,132,54],[[6,[2,5]]]],[56,9],0,[-1,4,[]],[170,4],[164,4],0,0,0,0,[56,23],[56,9],[[56,23],56],[56,23],[150,9],[23,56],[132,134],0,0,[7,56],0,[[56,56],[[30,[166]]]],0,0,0,[[-1,144],[[6,[109,5]]],[]],[[-1,[30,[54]]],[[6,[[15,[86,14]],5]]],[]],[62,[[6,[[171,[[15,[86,14]]]],5]]]],[[131,-1],6,103],[[98,-1],6,103],[[56,-1],6,103],[[134,-1],6,103],[[132,-1],6,103],[[150,-1],6,103],[[164,-1],6,103],[[148,-1],6,103],[[147,-1],6,103],[[146,-1],6,103],[[165,-1],6,103],[[62,-1],6,103],0,0,0,0,0,[134,7],0,[62,[[6,[[2,[142,[140,[139]],[140,[141]]]],5]]]],[164,[[30,[172]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,33,[]],[-1,33,[]],[[56,23,[30,[163]],-1,-2,-3,7],[[6,[23,5]]],17,17,17],[[56,23,[30,[163]],7],[[6,[23,5]]]],[[56,23,[30,[163]],7],[[6,[23,5]]]],[[56,23,[30,[163]],7],[[6,[23,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[172,[[6,[164,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],[-1,107,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,23],[56,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Private",2485],[15,"tuple"],[3,"MetaNameSpace",6],[4,"Expr",6],[4,"PolarsError",2486],[4,"Result",2487],[15,"str"],[3,"ListNameSpace",6],[15,"bool"],[15,"slice"],[8,"AsRef",2488],[8,"Into",2488],[8,"FunctionOutputField",6],[3,"Global",2489],[3,"Arc",2490],[3,"SpecialEq",6],[8,"Fn",2491],[8,"Send",2492],[8,"Sync",2492],[8,"FnMut",2491],[4,"VisitRecursion",2493],[4,"FunctionExpr",6],[15,"i64"],[3,"SortOptions",2494],[3,"ArrayNameSpace",6],[8,"Any",2495],[4,"AggExpr",6],[3,"Vec",2496],[15,"u64"],[4,"Option",2497],[3,"BinaryNameSpace",1235],[4,"Operator",6],[3,"String",2498],[3,"UserDefinedFunction",6],[3,"Series",2499],[4,"DataType",2500],[3,"CategoricalNameSpace",6],[4,"CategoricalOrdering",6],[3,"When",6],[3,"Then",6],[3,"ChainedWhen",6],[3,"ChainedThen",6],[4,"Excluded",6],[8,"Clone",2501],[4,"BooleanFunction",6],[3,"DatetimeArgs",6],[3,"DurationArgs",6],[3,"RollingCovOptions",6],[3,"StrptimeOptions",6],[3,"JoinOptions",6],[4,"WindowType",6],[4,"WindowMapping",6],[8,"IntoVec",2502],[15,"usize"],[15,"f64"],[3,"Duration",1951],[4,"ClosedWindow",2503],[4,"TimeUnit",2504],[8,"SeriesBinaryUdf",6],[8,"BinaryUdfOutputField",6],[8,"Deserializer",2505],[4,"LogicalPlan",1951],[8,"SeriesUdf",6],[4,"NullBehavior",2506],[3,"DateLikeNameSpace",1255],[8,"Sized",2492],[3,"EWMOptions",2507],[3,"StructNameSpace",6],[3,"Formatter",2508],[3,"Error",2508],[8,"RenameAliasFn",6],[8,"UdfSchema",6],[15,"u8"],[15,"u16"],[15,"i32"],[15,"f32"],[15,"i16"],[15,"u32"],[15,"i8"],[4,"StringFunction",2509],[4,"RangeFunction",2510],[4,"CategoricalFunction",2511],[4,"BinaryFunction",2512],[4,"TemporalFunction",2513],[3,"FunctionOptions",2514],[3,"Schema",2515],[4,"Context",2516],[3,"Field",2517],[3,"FieldsMapper",6],[8,"Hasher",2518],[4,"InterpolationMethod",2519],[8,"Display",2508],[8,"Literal",1951],[3,"PythonUdfExpression",1394],[3,"ExprMut",2520],[4,"QuantileInterpolOptions",2521],[3,"RankOptions",2522],[3,"RollingGroupOptions",1951],[3,"RollingOptionsFixedWindow",2523],[8,"Copy",2492],[3,"RollingOptions",1951],[4,"SearchSortedSide",2524],[8,"Serializer",2525],[4,"IsSorted",2526],[3,"StringNameSpace",1440],[4,"ListToStructWidthStrategy",2527],[3,"TypeId",2495],[3,"UnionArgs",1301],[3,"DataFrame",2528],[6,"PolarsResult",2486],[8,"IntoParallelIterator",2529],[3,"LazyFrame",1498],[3,"PythonFunction",1394],[3,"PyAny",2530],[3,"Py",2531],[15,"char"],[3,"LazyGroupBy",1498],[3,"JoinBuilder",1498],[3,"LazyJsonLineReader",1498],[8,"AnonymousScan",1951],[3,"ScanArgsAnonymous",1498],[6,"SchemaRef",2515],[6,"IdxSize",2532],[6,"PlHashMap",2533],[3,"LazyCsvReader",1498],[3,"ScanArgsIpc",1498],[3,"ScanArgsParquet",1498],[3,"OptState",1498],[3,"CloudOptions",2534],[8,"IntoIterator",2535],[3,"DynamicGroupOptions",1951],[4,"JoinType",1951],[6,"PathIterator",1498],[3,"JoinArgs",1951],[6,"AllowedOptimizations",1498],[3,"MeltArgs",2536],[3,"Path",2537],[3,"PathBuf",2537],[4,"ALogicalPlan",2538],[3,"Arena",2539],[4,"AExpr",2540],[3,"Node",2539],[3,"RowCount",2541],[3,"AnonymousScanArgs",2542],[6,"PyObject",2531],[3,"CsvWriterOptions",1951],[3,"IpcWriterOptions",1951],[3,"ParquetWriteOptions",1951],[4,"UniqueKeepStrategy",2528],[4,"JoinValidation",1951],[4,"CsvEncoding",2543],[4,"NullValues",2543],[3,"Dummy",1890],[8,"PartitionedAggregation",1906],[8,"StatsEvaluator",2544],[3,"PhysicalIoHelper",1906],[4,"GroupsProxy",2545],[3,"AggregationContext",1906],[8,"PhysicalExpr",1906],[6,"Result",2508],[8,"Executor",1890],[3,"Box",2546],[4,"Tz",2547],[4,"LiteralValue",1951],[3,"AnonymousScanOptions",1951],[4,"Ordering",2548],[3,"DotNode",2549],[3,"RandomState",2550],[3,"HashMap",2551],[3,"Null",1951],[4,"Cow",2552],[4,"AnyValue",2553],[8,"ExprEvalExtension",6],[8,"ListNameSpaceExtension",6],[8,"IntoListNameSpace",6],[13,"Quantile",1161],[13,"Min",1161],[13,"Max",1161],[13,"Any",1168],[13,"All",1168],[13,"SortBy",1170],[13,"Filter",1170],[13,"Cast",1170],[13,"Sort",1170],[13,"Take",1170],[13,"RenameAlias",1170],[13,"Ternary",1170],[13,"Function",1170],[13,"Window",1170],[13,"AnonymousFunction",1170],[13,"Slice",1170],[13,"BinaryExpr",1170],[13,"QCut",1203],[13,"Entropy",1203],[13,"Log",1203],[13,"RollingSkew",1203],[13,"Cut",1203],[13,"Correlation",1203],[13,"Round",1203],[13,"Clip",1203],[13,"BackwardFill",1203],[13,"ForwardFill",1203],[13,"Random",1203],[13,"ValueCounts",1203],[13,"ShiftAndFill",1203],[13,"Cumcount",1203],[13,"Cumsum",1203],[13,"Cumprod",1203],[13,"Cummin",1203],[13,"Cummax",1203],[13,"FillNull",1203],[8,"LazyFileListReader",1498],[8,"IntoLazy",1498],[8,"PolarsTemporalGroupby",1951],[13,"Range",2426],[13,"Aggregate",2429],[13,"Sort",2429],[13,"ExtContext",2429],[13,"Cache",2429],[13,"DataFrameScan",2429],[13,"Error",2429],[13,"Projection",2429],[13,"HStack",2429],[13,"Scan",2429],[13,"MapFunction",2429],[13,"Selection",2429],[13,"Distinct",2429],[13,"Slice",2429],[13,"Sink",2429],[13,"Join",2429],[13,"Union",2429],[13,"PythonScan",2429]],"b":[[405,"impl-Default-for-SpecialEq%3CArc%3Cdyn+SeriesBinaryUdf%3E%3E"],[406,"impl-Default-for-SpecialEq%3CArc%3Cdyn+BinaryUdfOutputField%3E%3E"],[407,"impl-Default-for-SpecialEq%3CArc%3Cdyn+FunctionOutputField%3E%3E"],[472,"impl-Deserialize%3C\'a%3E-for-SpecialEq%3CArc%3CLogicalPlan%3E%3E"],[473,"impl-Deserialize%3C\'a%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[474,"impl-Deserialize%3C\'a%3E-for-SpecialEq%3CSeries%3E"],[522,"impl-Expr"],[523,"impl-PartialEq-for-Expr"],[526,"impl-PartialEq-for-SpecialEq%3CSeries%3E"],[527,"impl-PartialEq-for-SpecialEq%3CArc%3CT%3E%3E"],[599,"impl-Display-for-Expr"],[600,"impl-Debug-for-Expr"],[602,"impl-Debug-for-Operator"],[603,"impl-Display-for-Operator"],[605,"impl-Debug-for-BooleanFunction"],[606,"impl-Display-for-BooleanFunction"],[607,"impl-Debug-for-FunctionExpr"],[608,"impl-Display-for-FunctionExpr"],[634,"impl-From%3CAggExpr%3E-for-Expr"],[636,"impl-From%3Cu8%3E-for-Expr"],[637,"impl-From%3Cu16%3E-for-Expr"],[638,"impl-From%3Ci32%3E-for-Expr"],[639,"impl-From%3Cbool%3E-for-Expr"],[640,"impl-From%3Cu64%3E-for-Expr"],[641,"impl-From%3Cf32%3E-for-Expr"],[642,"impl-From%3Ci16%3E-for-Expr"],[643,"impl-From%3Cu32%3E-for-Expr"],[644,"impl-From%3Ci64%3E-for-Expr"],[645,"impl-From%3Cf64%3E-for-Expr"],[646,"impl-From%3C%26str%3E-for-Expr"],[647,"impl-From%3Ci8%3E-for-Expr"],[650,"impl-From%3CStringFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[651,"impl-From%3CRangeFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[652,"impl-From%3CFunctionExpr%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[653,"impl-From%3CCategoricalFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[654,"impl-From%3CBooleanFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[655,"impl-From%3CBinaryFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[657,"impl-From%3CTemporalFunction%3E-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[659,"impl-From%3CCategoricalFunction%3E-for-FunctionExpr"],[660,"impl-From%3CBinaryFunction%3E-for-FunctionExpr"],[661,"impl-From%3CStringFunction%3E-for-FunctionExpr"],[662,"impl-From%3CBooleanFunction%3E-for-FunctionExpr"],[687,"impl-Expr"],[688,"impl-Hash-for-Expr"],[919,"impl-Serialize-for-SpecialEq%3CSeries%3E"],[920,"impl-Serialize-for-SpecialEq%3CArc%3CLogicalPlan%3E%3E"],[921,"impl-Serialize-for-SpecialEq%3CArc%3Cdyn+SeriesUdf%3E%3E"],[2228,"impl-Debug-for-JoinType"],[2229,"impl-Display-for-JoinType"],[2230,"impl-Debug-for-JoinValidation"],[2231,"impl-Display-for-JoinValidation"]]},\
"polars_ops":{"doc":"","t":"AAAIIIIKKLLLLLLLLAAKLLLLIKIIKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIAKGGNIINGDIEENGNNNNNILLLLLCLLFLLLLFLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLFMLMLLLLLLLLLLLLLLMICCIIFFKKKFFFLLFLL","n":["chunked_array","frame","prelude","AsBinary","AsUtf8","BinaryNameSpaceImpl","ChunkedSet","as_binary","as_utf8","contains","contains","contains_chunked","contains_chunked","ends_with","ends_with","ends_with_chunked","ends_with_chunked","gather_skip_nulls","list","set_at_idx2","starts_with","starts_with","starts_with_chunked","starts_with_chunked","ChunkGatherSkipNulls","gather_skip_nulls","AsList","ListNameSpaceImpl","as_list","join_literal","join_literal","join_many","join_many","lst_arg_max","lst_arg_max","lst_arg_min","lst_arg_min","lst_concat","lst_concat","lst_get","lst_get","lst_join","lst_join","lst_lengths","lst_lengths","lst_max","lst_max","lst_mean","lst_mean","lst_min","lst_min","lst_reverse","lst_reverse","lst_shift","lst_shift","lst_slice","lst_slice","lst_sort","lst_sort","lst_sum","lst_sum","lst_unique","lst_unique","lst_unique_stable","lst_unique_stable","same_type","same_type","DataFrameOps","IntoDf","join","to_df","ChunkJoinIds","ChunkJoinOptIds","Cross","CrossJoin","DataFrameJoinOps","Inner","InnerJoinIds","JoinArgs","JoinDispatch","JoinType","JoinValidation","Left","LeftJoinIds","ManyToMany","ManyToOne","OneToMany","OneToOne","Outer","SeriesJoin","__clone_box","__clone_box","__clone_box","_create_left_df_from_slice","_create_left_df_from_slice","_finish_join","_finish_left_join","_finish_left_join","_join_suffix_name","_left_join_from_series","_left_join_from_series","_outer_join_from_series","_outer_join_from_series","_sort_or_hash_inner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cross_join","cross_join","cross_join_dfs","cross_join_dfs","default","default_join_ids","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash_join_inner","hash_join_inner","hash_join_outer","hash_join_outer","how","init","init","init","inner_join","into","into","into","is_valid_join","join","left_join","needs_checks","new","outer_join","private_left_join_multiple_keys","slice","suffix","suffix","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validation","ArgAgg","DataFrameJoinOps","DataFrameOps","SeriesMethods","SeriesSealed","all_horizontal","any_horizontal","arg_max","arg_min","as_series","clip","clip_max","clip_min","is_sorted","is_sorted","sum_horizontal","value_counts","value_counts"],"q":[[0,"polars_ops"],[3,"polars_ops::chunked_array"],[24,"polars_ops::chunked_array::gather_skip_nulls"],[26,"polars_ops::chunked_array::list"],[67,"polars_ops::frame"],[71,"polars_ops::frame::join"],[189,"polars_ops::prelude"],[207,"polars_core::datatypes"],[208,"polars_core::datatypes"],[209,"polars_core::series"],[210,"polars_error"],[211,"core::iter::traits::collect"],[212,"polars_core::datatypes"],[213,"polars_core::chunked_array::ops"],[214,"polars_core::frame"],[215,"dyn_clone::sealed"],[216,"alloc::string"],[217,"core::option"],[218,"core::fmt"],[219,"core::fmt"],[220,"polars_core::datatypes::aliases"],[221,"core::any"]],"d":["","","","","","","","","","Check if binary contains given literal","Check if binary contains given literal","","","Check if strings ends with a substring","Check if strings ends with a substring","","","","","","Check if strings starts with a substring","Check if strings starts with a substring","","","","","","","","","","","","","","","","","","Get the value by index in the sublists. So index <code>0</code> would …","Get the value by index in the sublists. So index <code>0</code> would …","In case the inner dtype <code>DataType::Utf8</code>, the individual …","In case the inner dtype <code>DataType::Utf8</code>, the individual …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","No unique checks","Check if join keys are unique in right dataset.","Check if join keys are unique in left dataset.","Check if join keys are unique in both left and right …","","","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","Creates the cartesian product from both frames, preserves …","Creates the cartesian product from both frames, preserves …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Perform an inner join on two DataFrames.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Generic join method. Can be used to join on multiple …","Perform a left join on two DataFrames","","","Perform an outer join on two DataFrames","","","","","","","","","","","","","","","","","","","","Argmin/ Argmax","","","","","","","Get the index of the maximal value","Get the index of the minimal value","","Clamp underlying values to the <code>min</code> and <code>max</code> values.","Clamp underlying values to the <code>max</code> value.","Clamp underlying values to the <code>min</code> value.","","","","Create a <code>DataFrame</code> with the unique <code>values</code> of this <code>Series</code> …","Create a <code>DataFrame</code> with the unique <code>values</code> of this <code>Series</code> …"],"i":[0,0,0,0,0,0,0,34,35,36,36,36,36,36,36,36,36,0,0,37,36,36,36,36,0,38,0,0,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,0,25,0,0,25,0,0,0,0,0,25,0,23,23,23,23,25,0,21,25,23,42,42,0,42,42,0,42,42,42,42,0,21,25,23,21,25,23,21,25,23,21,25,23,43,43,43,43,23,0,21,25,23,21,25,23,21,25,23,21,25,23,21,21,21,25,25,25,23,23,23,21,25,25,23,23,21,21,25,23,44,44,44,44,21,21,25,23,45,21,25,23,23,45,45,23,21,45,0,21,21,21,21,25,23,25,23,21,25,23,21,25,23,21,25,23,21,0,0,0,0,0,0,0,46,46,47,0,0,0,48,48,0,48,48],"f":[0,0,0,0,0,0,0,[-1,1,[]],[-1,2,[]],[[-1,[4,[3]]],5,[]],[[-1,[4,[3]]],5,[]],[[-1,1],5,[]],[[-1,1],5,[]],[[-1,[4,[3]]],5,[]],[[-1,[4,[3]]],5,[]],[[-1,1],5,[]],[[-1,1],5,[]],0,0,[[-1,[4,[6]],-2],[[8,[7]]],[],9],[[-1,[4,[3]]],5,[]],[[-1,[4,[3]]],5,[]],[[-1,1],5,[]],[[-1,1],5,[]],0,[[-1,-2],[[8,[-1]]],[],[]],0,0,[-1,10,[]],[[-1,11],[[8,[2]]],[]],[[-1,11],[[8,[2]]],[]],[[-1,2],[[8,[2]]],[]],[[-1,2],[[8,[2]]],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[-1,[4,[7]]],[[8,[10]]],[]],[[-1,[4,[7]]],[[8,[10]]],[]],[[-1,13],[[8,[7]]],[]],[[-1,13],[[8,[7]]],[]],[[-1,2],[[8,[2]]],[]],[[-1,2],[[8,[2]]],[]],[-1,12,[]],[-1,12,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,10,[]],[-1,10,[]],[[-1,7],[[8,[10]]],[]],[[-1,7],[[8,[10]]],[]],[[-1,13,14],10,[]],[[-1,13,14],10,[]],[[-1,15],10,[]],[[-1,15],10,[]],[-1,7,[]],[-1,7,[]],[-1,[[8,[10]]],[]],[-1,[[8,[10]]],[]],[-1,[[8,[10]]],[]],[-1,[[8,[10]]],[]],[[-1,10],10,[]],[[-1,10],10,[]],0,0,0,[-1,16,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,17],18,[]],[[-1,17],18,[]],[[-1,17],18,[]],[[-1,[4,[6]],19,19],16,[]],[[-1,[4,[6]],19,19],16,[]],0,[[-1,20,16,21],[[8,[16]]],[]],[[-1,20,16,21],[[8,[16]]],[]],[[11,11],22],[[-1,16,7,7,21,19],[[8,[16]]],[]],[[-1,16,7,7,21,19],[[8,[16]]],[]],[[-1,16,7,7,21],[[8,[16]]],[]],[[-1,16,7,7,21],[[8,[16]]],[]],[[7,7,19,23],[[8,[[18,[24,19]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[25,25],[23,23],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,16,[26,[11]],[26,[[18,[13,14]]]]],[[8,[16]]],[]],[[-1,16,[26,[11]],[26,[[18,[13,14]]]]],[[8,[16]]],[]],[[-1,16,[26,[[18,[13,14]]]],19],[[8,[[18,[16,16]]]]],[]],[[-1,16,[26,[[18,[13,14]]]],19],[[8,[[18,[16,16]]]]],[]],[[],23],[[],27],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,18],[14,18],[14,18],[[21,21],19],[[25,25],19],[[23,23],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[21,28],29],[[25,28],29],[[25,28],29],[[23,28],29],[[23,28],29],[-1,-1,[]],[25,21],[-1,-1,[]],[-1,-1,[]],[[-1,7,23],[[8,[[18,[24,19]]]]],[]],[[-1,7,23],[[8,[[18,[24,19]]]]],[]],[[-1,7,23],[[8,[[30,[[18,[[26,[6]],[26,[6]]]]]]]]],[]],[[-1,7,23],[[8,[[30,[[18,[[26,[6]],[26,[6]]]]]]]]],[]],0,[[],14],[[],14],[[],14],[[-1,16,-2,-2],[[8,[16]]],[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,25,14],[[8,[18]]]],[[-1,16,-2,-2,21],[[8,[16]]],[],9],[[-1,16,-2,-2],[[8,[16]]],[],9],[23,19],[25,21],[[-1,16,-2,-2],[[8,[16]]],[],9],[[16,16,[26,[[4,[31]]]],[26,[[4,[31]]]]],20],0,[21,11],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,22,[]],[-1,22,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,0,0,0,0,0,[[[4,[7]]],[[8,[7]]]],[[[4,[7]]],[[8,[7]]]],[-1,[[26,[14]]],[]],[-1,[[26,[14]]],[]],[-1,7,[]],[[7,7,7],[[8,[7]]]],[[7,7],[[8,[7]]]],[[7,7],[[8,[7]]]],[[-1,15],[[8,[19]]],[]],[[-1,15],[[8,[19]]],[]],[[[4,[7]]],[[8,[7]]]],[[-1,19,19],[[8,[16]]],[]],[[-1,19,19],[[8,[16]]],[]]],"c":[],"p":[[6,"BinaryChunked",207],[6,"Utf8Chunked",207],[15,"u8"],[15,"slice"],[6,"BooleanChunked",207],[6,"IdxSize",208],[3,"Series",209],[6,"PolarsResult",210],[8,"IntoIterator",211],[6,"ListChunked",207],[15,"str"],[6,"IdxCa",212],[15,"i64"],[15,"usize"],[3,"SortOptions",213],[3,"DataFrame",214],[3,"Private",215],[15,"tuple"],[15,"bool"],[6,"LeftJoinIds",71],[3,"JoinArgs",71],[3,"String",216],[4,"JoinValidation",71],[6,"InnerJoinIds",71],[4,"JoinType",71],[4,"Option",217],[6,"ChunkJoinOptIds",71],[3,"Formatter",218],[6,"Result",218],[3,"Vec",219],[6,"ChunkId",212],[4,"Result",220],[3,"TypeId",221],[8,"AsBinary",3],[8,"AsUtf8",3],[8,"BinaryNameSpaceImpl",3],[8,"ChunkedSet",3],[8,"ChunkGatherSkipNulls",24],[8,"AsList",26],[8,"ListNameSpaceImpl",26],[8,"IntoDf",67],[8,"JoinDispatch",71],[8,"CrossJoin",71],[8,"SeriesJoin",71],[8,"DataFrameJoinOps",71],[8,"ArgAgg",189],[8,"SeriesSealed",189],[8,"SeriesMethods",189]],"b":[[144,"impl-Display-for-JoinType"],[145,"impl-Debug-for-JoinType"],[146,"impl-Debug-for-JoinValidation"],[147,"impl-Display-for-JoinValidation"]]},\
"polars_sql":{"doc":"Polars SQL This crate provides a SQL interface for Polars …","t":"DLLLLLLLLLLLALLLLALLLLLFLLLLLLLNENDDILLMMMLLLLLLMMLMLLLLMKLLLLLLLLLLLLLLLLLLMLLLKLLLLLMLLLLMKLLLLLLLLLLLLLLLFF","n":["SQLContext","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","execute","from","function_registry","get_table_map","get_tables","init","into","keywords","new","new_from_table_map","register","registry","registry_mut","sql_expr","to_owned","try_from","try_into","type_id","unregister","vzip","with_function_registry","Aggregation","Context","Default","DefaultFunctionRegistry","FunctionOptions","FunctionRegistry","__clone_box","__clone_box","allow_group_aware","allow_rename","auto_explode","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_to_supertypes","changes_length","check_lengths","check_lengths","clone","clone","clone_into","clone_into","collect_groups","contains","contains","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt_str","from","from","from","get_udf","get_udf","hash","init","init","init","input_wildcard_expansion","into","into","into","is_groups_sensitive","pass_name_to_apply","register","register","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","all_functions","all_keywords"],"q":[[0,"polars_sql"],[31,"polars_sql::function_registry"],[108,"polars_sql::keywords"],[110,"dyn_clone::sealed"],[111,"polars_lazy::frame"],[112,"polars_error"],[113,"alloc::string"],[114,"polars_core::datatypes::aliases"],[115,"alloc::vec"],[116,"alloc::sync"],[117,"polars_plan::dsl::expr"],[118,"core::convert"],[119,"core::result"],[120,"core::any"],[121,"core::fmt"],[122,"core::fmt"],[123,"core::option"],[124,"core::hash"]],"d":["The SQLContext is the main entry point for executing SQL …","","","","","","","","","","Execute a SQL query, returning a <code>LazyFrame</code>.","Returns the argument unchanged.","This module defines the function registry and user defined …","Get internal table map. For internal use only.","Get the names of all registered tables, in sorted order.","","Calls <code>U::from(self)</code>.","Keywords that are supported by Polars SQL","Create a new SQLContext.","Create a new SQLContext from a table map. For internal use …","Register a <code>LazyFrame</code> as a table in the SQLContext.","Get the function registry of the SQLContext","Get a mutable reference to the function registry of the …","parse a SQL expression to a polars expression","","","","","Unregister a <code>LazyFrame</code> table from the <code>SQLContext</code>.","","add a function registry to the SQLContext the registry …","Any operation that is done on groups","","Any operation that is done while projection/ selection of …","A default registry that does not support registering or …","","A registry that holds user defined functions.","","","","","automatically explode on unit length it ran as final …","","","","","","","","","","","","","","","Collect groups to a list and apply the function over the …","Check if a function is registered.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Call a user defined function.","","","","","","There can be two ways of expanding wildcards:","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Any function that is sensitive to the number of elements …","","Register a function.","","","","","","","","","","","","","","","","Get a list of all function names that are supported by …","Get all keywords that are supported by Polars SQL"],"i":[0,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,3,3,3,3,0,3,3,3,3,3,3,3,19,0,19,0,0,0,17,19,17,17,17,20,17,19,20,17,19,17,17,17,17,17,19,17,19,17,11,20,17,20,17,19,20,17,19,20,17,19,17,17,17,17,17,17,19,17,20,17,19,11,20,17,20,17,19,17,20,17,19,17,17,11,20,17,19,20,17,19,20,17,19,20,17,19,20,17,19,0,0],"f":[0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],2,[],[]],[[],3],[4,-1,[]],[4,-1,[]],[4,2],[[3,5],[[7,[6]]]],[-1,-1,[]],0,[3,[[9,[8,6]]]],[3,[[10,[8]]]],[[],4],[-1,-2,[],[]],0,[[],3],[[[9,[8,6]]],3],[[3,5,6],2],[3,[[12,[11]]]],[3,11],[-1,[[7,[13]]],[[14,[5]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[[3,5],2],[-1,-2,[],[]],[[3,[12,[11]]],3],0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[17,18],0,[17,17],[19,19],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[-1,5],18,[]],[[20,5],18],[[],17],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,2],[4,2],[4,2],[[17,17],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[17,21],[[15,[2,22]]]],[[19,21],[[15,[2,22]]]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,5],[[7,[[24,[23]]]]],[]],[[20,5],[[7,[[24,[23]]]]]],[[17,-1],2,25],[[],4],[[],4],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,18],0,[[-1,5,23],[[7,[2]]],[]],[[20,5,23],[[7,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[5]]]],[[],[[10,[5]]]]],"c":[],"p":[[3,"Private",110],[15,"tuple"],[3,"SQLContext",0],[15,"usize"],[15,"str"],[3,"LazyFrame",111],[6,"PolarsResult",112],[3,"String",113],[6,"PlHashMap",114],[3,"Vec",115],[8,"FunctionRegistry",31],[3,"Arc",116],[4,"Expr",117],[8,"AsRef",118],[4,"Result",119],[3,"TypeId",120],[3,"FunctionOptions",31],[15,"bool"],[4,"Context",31],[3,"DefaultFunctionRegistry",31],[3,"Formatter",121],[3,"Error",121],[3,"UserDefinedFunction",122],[4,"Option",123],[8,"Hasher",124]],"b":[]},\
"polars_time":{"doc":"","t":"NEDNNIIIIINDAFFKKMMAKAFKKKCFAINNNNNEILKLLLLLLLLLLLLLLALLLLLLLDQIILLLLLLLLLFLLMLKMLLKLLNDDENNDNENNNNNNNENCNNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKLLLLLLLLLLLLLLLL","n":["Both","ClosedWindow","Duration","Left","None","PolarsMonthEnd","PolarsMonthStart","PolarsRound","PolarsTruncate","PolarsUpsample","Right","Window","chunkedarray","date_range","in_nanoseconds_window","month_end","month_start","offset","parsed_int","prelude","round","series","time_range","truncate","upsample","upsample_stable","Utf8Methods","unix_time","utf8","AsUtf8","DateDMY","DateYMD","DatetimeDMY","DatetimeYMD","DatetimeYMDZ","Pattern","Utf8Methods","__clone_box","as_utf8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash","infer","init","into","is_inferable","to_owned","try_from","try_into","type_id","DatetimeInfer","Error","StrpTimeParser","TryFromWithUnit","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","infer_pattern_single","init","into","logical_type","parse","parse_bytes","pattern","to_owned","try_from","try_from_with_unit","try_into","type_id","Both","Bounds","BoundsIter","ClosedWindow","DataPoint","DataPoint","Duration","Friday","Label","Left","Left","Monday","None","Right","Right","Saturday","StartBy","Sunday","TemporalMethods","Thursday","Tuesday","Wednesday","Window","WindowBound","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_ms","add_ns","add_us","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","date_range","days","days_only","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_earliest_bounds_ms","get_earliest_bounds_ns","get_earliest_bounds_us","get_overlapping_bounds_iter","group_by_values","group_by_windows","hash","hash","hash","hash","in_nanoseconds_window","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","is_constant_duration","is_full_days","is_zero","months","months_only","mul","nanoseconds","new","new","next","offset","parse","parsed_int","partial_cmp","round_ms","round_ns","round_us","time_range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate_impl","truncate_ms","truncate_ms","truncate_no_offset_ms","truncate_no_offset_ns","truncate_no_offset_us","truncate_ns","truncate_ns","truncate_us","truncate_us","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weekday","weeks","weeks_only","AsSeries","TemporalMethods","as_series","day","hour","is_leap_year","iso_year","minute","month","nanosecond","ordinal_day","ordinal_year","quarter","second","strftime","to_string","week","weekday","year"],"q":[[0,"polars_time"],[26,"polars_time::chunkedarray"],[29,"polars_time::chunkedarray::utf8"],[61,"polars_time::chunkedarray::utf8::infer"],[86,"polars_time::prelude"],[284,"polars_time::series"],[303,"chrono::naive::datetime"],[304,"polars_core::datatypes::time_unit"],[305,"polars_core::datatypes::dtype"],[306,"core::option"],[307,"polars_core::chunked_array::logical::datetime"],[308,"polars_error"],[309,"polars_arrow::time_zone"],[310,"core::marker"],[311,"polars_core::datatypes"],[312,"chrono::naive::time"],[313,"polars_core::chunked_array::logical::time"],[314,"polars_core::frame"],[315,"alloc::string"],[316,"polars_core::utils"],[317,"dyn_clone::sealed"],[318,"core::fmt"],[319,"core::fmt"],[320,"core::result"],[321,"core::any"],[322,"core::clone"],[323,"polars_core::datatypes"],[324,"polars_core::frame::group_by::proxy"],[325,"alloc::vec"],[326,"core::ops::function"],[327,"polars_core::series"],[328,"polars_core::datatypes"]],"d":["","","","","","","","","","","","Represents a window in time","Traits and utilities for temporal data.","Create a <code>DatetimeChunked</code> from a given <code>start</code> and <code>end</code> date …","","","","","","","","","Create a <code>TimeChunked</code> from a given <code>start</code> and <code>end</code> date and a …","","Upsample a <code>DataFrame</code> at a regular frequency.","Upsample a DataFrame at a regular frequency.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","only useful if periods are weekly","","","","","","","","","","","Represents a window in time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>DatetimeChunked</code> from a given <code>start</code> and <code>end</code> date …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","returns the bounds for the earliest window bounds that …","","","Different from <code>group_by_windows</code>, where define window …","Based on the given <code>Window</code>, which has an","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether the duration consists of full days.","<code>true</code> if zero duration.","","","","Returns the nanoseconds from the <code>Duration</code> without the …","Create a new integer size <code>Duration</code>","","","","Parse a string into a <code>Duration</code>","","","Round the given ms timestamp by the window boundary.","Round the given ns timestamp by the window boundary.","Round the given us timestamp by the window boundary.","Create a <code>TimeChunked</code> from a given <code>start</code> and <code>end</code> date and a …","","","","","","","","","","","","","","Truncate the given ns timestamp by the window boundary.","","Truncate the given us timestamp by the window boundary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract day from underlying NaiveDateTime representation. …","Extract hour from underlying NaiveDateTime representation. …","Extract year from underlying NaiveDateTime representation. …","","Extract minute from underlying NaiveDateTime …","Extract month from underlying NaiveDateTime representation.","Returns the number of nanoseconds since the whole non-leap …","Returns the day of year starting from 1.","Extract ordinal year from underlying NaiveDateTime …","Extract quarter from underlying NaiveDateTime …","Extract second from underlying NaiveDateTime …","Convert from Time into Utf8 with the given format. See …","Convert Time into Utf8 with the given format. See chrono …","Returns the ISO week number starting from 1. The return …","Returns the ISO weekday number where monday = 1 and sunday …","Extract year from underlying NaiveDateTime representation. …"],"i":[4,0,0,4,4,0,0,0,0,0,4,0,0,0,0,48,49,37,3,0,50,0,0,51,52,52,0,0,0,0,21,21,21,21,21,0,0,21,53,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,21,0,54,0,0,28,28,28,28,28,28,28,28,28,0,28,28,28,28,55,28,28,28,54,28,28,4,0,0,0,35,36,0,36,0,4,35,36,4,4,35,36,0,36,0,36,36,36,0,36,34,3,4,35,36,37,3,3,3,39,34,3,4,35,36,37,39,34,3,4,35,36,37,34,3,4,35,36,37,34,3,4,35,36,37,3,3,0,3,3,36,39,34,3,4,35,36,37,39,34,3,4,35,36,37,39,34,3,4,35,36,37,3,4,35,36,3,3,3,4,4,4,35,35,35,36,36,36,34,3,4,35,36,39,34,3,4,35,36,37,37,37,37,37,0,0,3,4,35,36,0,39,34,3,4,35,36,37,39,34,3,4,35,36,37,39,3,3,3,3,3,3,3,3,37,39,37,3,3,3,37,37,37,0,34,3,4,35,36,37,3,3,37,37,37,37,3,37,3,37,39,34,3,4,35,36,37,39,34,3,4,35,36,37,39,34,3,4,35,36,37,36,3,3,0,0,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,3,4,5,[7,[6]]],[[9,[8]]]],[2,10],[[-1,[7,[11]]],[[9,[-1]]],12],[[-1,[7,[11]]],[[9,[-1]]],12],0,0,0,[[-1,3,3,[7,[11]],13],[[9,[-1]]],12],0,[[1,14,14,3,4],[[9,[15]]]],[[-1,[7,[11]],13,1,13],[[9,[-1]]],12],[[-1,-2,1,3,3],[[9,[16]]],[],[[18,[17]]]],[[-1,-2,1,3,3],[[9,[16]]],[],[[18,[17]]]],0,[[],2],0,0,0,0,0,0,0,0,0,[[-1,19],20,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[[-1,-2],20,[],[]],[22,-1,[]],[22,-1,[]],[22,20],[[21,21],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[21,23],24],[-1,-1,[]],[[21,-1],20,25],0,[[],22],[-1,-2,[],[]],[[21,1],10],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],0,0,0,0,[[-1,19],20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]]],[[28,[-1]]],[29,30]],[[-1,-2],20,[],[]],[22,-1,[]],[22,-1,[]],[22,20],[-1,-1,[]],[1,[[7,[21]]]],[[],22],[-1,-2,[],[]],0,[[[28,[-1]],1],7,30],[[-1,[32,[31]],[7,[5]]],[[7,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[[-1,[7,[5]]],[[9,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,19],20,[]],[[-1,19],20,[]],[[-1,19],20,[]],[[-1,19],20,[]],[[-1,19],20,[]],[[-1,19],20,[]],[[3,33,[7,[11]]],[[9,[33]]]],[[3,33,[7,[11]]],[[9,[33]]]],[[3,33,[7,[11]]],[[9,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[3,3],[4,4],[35,35],[36,36],[37,37],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[3,3],38],[[-1,-2],38,[],[]],[[1,2,2,3,4,5,[7,[6]]],[[9,[8]]]],[3,33],[3,10],[[],36],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,20],[22,20],[22,20],[22,20],[22,20],[22,20],[22,20],[[3,3],10],[[4,4],10],[[35,35],10],[[36,36],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[34,23],24],[[3,23],24],[[4,23],24],[[35,23],24],[[36,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[37,33,[7,[11]]],[[9,[34]]]],[[37,33,[7,[11]]],[[9,[34]]]],[[37,33,[7,[11]]],[[9,[34]]]],[[37,34,5,[7,[11]],36],[[9,[39]]]],[[3,3,[32,[33]],4,5,[7,[11]]],[[9,[40]]]],[[37,[32,[33]],4,5,[7,[6]],10,10,36],[[20,[40,[41,[33]],[41,[33]]]]]],[[3,-1],20,25],[[4,-1],20,25],[[35,-1],20,25],[[36,-1],20,25],[2,10],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,10],[3,10],[3,10],[3,33],[3,10],[[3,33],3],[3,33],[33,3],[[3,3,3],37],[39,7],0,[1,3],0,[[3,3],[[7,[38]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[[1,14,14,3,4],[[9,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,33,[7,[11]],-1,-2,-3,1],[[9,[33]]],42,42,42],[[3,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]]],[[9,[33]]]],[[37,33,[7,[11]]],[[9,[33]]]],[[37,33,[7,[11]]],[[9,[33]]]],[[3,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[[3,33,[7,[11]],1],[[9,[33]]]],[[37,33,[7,[11]],1],[[9,[33]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[36,[[7,[43]]]],[3,33],[3,10],0,0,[-1,44,[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[46]]],[]],[-1,[[9,[47]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[47]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[[-1,1],[[9,[44]]],[]],[[-1,1],[[9,[44]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[45]]],[]],[-1,[[9,[47]]],[]]],"c":[],"p":[[15,"str"],[3,"NaiveDateTime",303],[3,"Duration",86],[4,"ClosedWindow",86],[4,"TimeUnit",304],[6,"TimeZone",305],[4,"Option",306],[6,"DatetimeChunked",307],[6,"PolarsResult",308],[15,"bool"],[4,"Tz",309],[8,"Sized",310],[6,"Utf8Chunked",311],[3,"NaiveTime",312],[6,"TimeChunked",313],[3,"DataFrame",314],[3,"String",315],[8,"IntoVec",316],[3,"Private",317],[15,"tuple"],[4,"Pattern",29],[15,"usize"],[3,"Formatter",318],[6,"Result",318],[8,"Hasher",319],[4,"Result",320],[3,"TypeId",321],[3,"DatetimeInfer",61],[8,"Clone",322],[8,"PolarsNumericType",311],[15,"u8"],[15,"slice"],[15,"i64"],[3,"Bounds",86],[4,"Label",86],[4,"StartBy",86],[3,"Window",86],[4,"Ordering",323],[3,"BoundsIter",86],[6,"GroupsSlice",324],[3,"Vec",325],[8,"Fn",326],[15,"u32"],[3,"Series",327],[6,"UInt32Chunked",311],[6,"BooleanChunked",311],[6,"Int32Chunked",311],[8,"PolarsMonthEnd",0],[8,"PolarsMonthStart",0],[8,"PolarsRound",0],[8,"PolarsTruncate",0],[8,"PolarsUpsample",0],[8,"AsUtf8",29],[8,"TryFromWithUnit",61],[8,"StrpTimeParser",61],[8,"AsSeries",284],[8,"TemporalMethods",284]],"b":[]},\
"polars_utils":{"doc":"","t":"GAAAAAAFAOFFAAAAOACAAAAOAAGGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLFFILLLLFIIIIKKKKKKFDLLLLLLLLLLLLLLLLLLLLLLHDLLLLLLLLLLLLIKIIIIKKKKK","n":["IdxSize","aliases","arena","atomic","cache","cell","contention_pool","flatten","fmt","format_smartstring","get_hash","hash_to_partition","index","io","iter","macros","matches_any_order","mem","open_file","slice","sort","sync","sys","unreachable_unchecked_release","unwrap","vec","PlHashMap","PlHashSet","Arena","Node","__clone_box","__clone_box","add","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","fmt","from","from","get","get_mut","get_node","get_unchecked","hash","init","init","into","into","is_empty","len","new","partial_cmp","pop","replace","replace_with","swap","take","to_owned","to_owned","try_from","try_from","try_into","try_into","try_replace_with","type_id","type_id","with_capacity","SyncCounter","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","from","init","into","manual_drop","new","to_owned","try_from","try_into","type_id","CachedFunc","FastFixedCache","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eval","from","from","get","get_mut","get_or_insert_with","init","init","insert","into","into","new","new","to_owned","try_from","try_from","try_get_or_insert_with","try_into","try_into","type_id","type_id","SyncUnsafeCell","borrow","borrow_mut","default","deref","deref_mut","drop","from","from","from","get","get_mut","init","into","into_inner","new","raw_get","try_from","try_into","type_id","LowContentionPool","borrow","borrow_mut","deref","deref_mut","drop","from","get","init","into","new","set","try_from","try_into","type_id","check_bounds","open_file","EnumerateIdxTrait","enumerate_idx","enumerate_idx","enumerate_u32","enumerate_u32","to_mutable_slice","Extrema","GetSaferUnchecked","Slice2Uninit","SortedSlice","as_uninit","get_unchecked_release","get_unchecked_release_mut","is_sorted_ascending","max_value","min_value","perfect_sort","SyncPtr","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deref_unchecked","drop","fmt","from","from_const","get","init","into","is_null","new","new_null","to_owned","try_from","try_into","type_id","MEMINFO","MemInfo","borrow","borrow_mut","deref","deref_mut","drop","free","from","init","into","try_from","try_into","type_id","UnwrapUncheckedRelease","unwrap_unchecked_release","CapacityByFactor","IntoRawParts","PushUnchecked","ResizeFaster","fill_or_alloc","into_raw_parts","push_unchecked","raw_parts","with_capacity_by_factor"],"q":[[0,"polars_utils"],[26,"polars_utils::aliases"],[28,"polars_utils::arena"],[85,"polars_utils::atomic"],[106,"polars_utils::cache"],[143,"polars_utils::cell"],[163,"polars_utils::contention_pool"],[178,"polars_utils::index"],[179,"polars_utils::io"],[180,"polars_utils::iter"],[185,"polars_utils::mem"],[186,"polars_utils::slice"],[196,"polars_utils::sort"],[197,"polars_utils::sync"],[220,"polars_utils::sys"],[234,"polars_utils::unwrap"],[236,"polars_utils::vec"],[245,"core::option"],[246,"alloc::vec"],[247,"core::clone"],[248,"core::convert"],[249,"core::hash"],[250,"core::hash"],[251,"core::cmp"],[252,"core::fmt"],[253,"core::fmt"],[254,"core::ops::function"],[255,"core::result"],[256,"core::ops::function"],[257,"core::cmp"],[258,"core::marker"],[259,"alloc::borrow"],[260,"polars_error"],[261,"std::fs"],[262,"std::path"],[263,"core::mem::maybe_uninit"],[264,"core::slice::index"],[265,"rayon_core::thread_pool"],[266,"core::fmt"]],"d":["","","","","","Copy pasted from std::cell::SyncUnsafeCell can be removed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Safety","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A utility to create a sharable counter This does not …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Safety","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>UnsafeCell</code>, but <code>Sync</code>.","","","Creates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.","","","","Creates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","","Gets a mutable pointer to the wrapped value.","Returns a mutable reference to the underlying data.","","Calls <code>U::from(self)</code>.","Unwraps the value.","Constructs a new instance of <code>SyncUnsafeCell</code> which will …","Gets a mutable pointer to the wrapped value.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Safety","","","","","","Safety","Safety","","","","This is a perfect sort particularly useful for an arg_sort …","Utility that allows use to send pointers to another thread.","","","","","","","","Safety","","","Returns the argument unchanged.","Safety","","","Calls <code>U::from(self)</code>.","","Safety","","","","","","","Startup system is expensive, so we do it once","","","","","","This call is quite expensive, cache the results.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Safety","","","","Fill current allocation if if &gt; 0 otherwise realloc","","","Will push an item and not check if there is enough capacity","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,12,12,13,12,13,12,12,13,12,13,12,13,13,12,13,12,13,12,13,12,13,13,13,13,13,12,12,12,12,12,13,13,12,13,12,12,12,12,13,12,12,12,12,12,13,12,13,12,13,12,12,13,12,12,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,25,27,25,27,25,25,25,25,27,25,27,25,27,25,27,27,25,25,25,25,27,25,25,27,25,27,25,25,27,25,25,27,25,27,25,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,47,47,47,47,0,0,0,0,0,48,49,49,50,51,51,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,45,45,45,45,45,45,45,45,45,45,45,45,0,52,0,0,0,0,53,54,55,54,56],"f":[0,0,0,0,0,0,0,[[[1,[-2]],[3,[2]]],[[4,[-1]]],5,[[6,[[1,[-1]]]]]],0,0,[[-1,-2],7,8,9],[[7,2],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,10],11,[]],[[-1,10],11,[]],[[[12,[-1]],-1],13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],11,[]],[13,13],[[[12,[-1]]],[[12,[-1]]],5],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[13,13],14],[[],13],[[],[[12,[-1]]],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,11],[2,11],[[13,13],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[13,16],17],[-1,-1,[]],[-1,-1,[]],[[[12,[-1]],13],-1,[]],[[[12,[-1]],13],-1,[]],[[[12,[-1]],-1],[[3,[13]]],[]],[[[12,[-1]],13],-1,[]],[[13,-1],11,18],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],15,[]],[[[12,[-1]]],2,[]],[[],[[12,[-1]]],[]],[[13,13],[[3,[14]]]],[[[12,[-1]]],[[3,[-1]]],[]],[[[12,[-1]],13,-1],11,[]],[[[12,[-1]],13,-2],11,19,20],[[[12,[-1]],13,13],11,[]],[[[12,[-1]],13],-1,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[[12,[-1]],13,-2],[[21,[11,0]]],19,22],[-1,23,[]],[-1,23,[]],[2,[[12,[-1]]],[]],0,[[-1,10],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],11,[],[]],[[],24],[2,-1,[]],[24],[24],[2,-1,[]],[2,11],[-1,-1,[]],[[],2],[-1,-2,[],[]],[24,11],[2,24],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],0,0,[[-1,10],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2]]],[[25,[-1,-2]]],5,5],[[-1,-2],11,[],[]],[[],[[25,[-1,-2]]],[8,26],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,11],[2,11],[[[27,[-1,-2,-3]],-1,15],-2,[8,26,5],28,22],[-1,-1,[]],[-1,-1,[]],[[[25,[-2,-3]],-1],[[3,[-3]]],[8,26,29],[[30,[-1]],8,26],[]],[[[25,[-2,-3]],-1],[[3,[-3]]],[8,26,29],[[30,[-1]],8,26],[]],[[[25,[-2,-3]],-1,-4],-3,[8,26,31,29],[[30,[-1]],8,26],[],20],[[],2],[[],2],[[[25,[-1,-2]],-1,-2],-2,[8,26],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[27,[-2,-3,-1]]],22,[8,26,5],28],[2,[[25,[-1,-2]]],[8,26],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[[25,[-2,-3]],-1,-4],[[21,[-3,-5]]],[8,26,31,29],[[30,[-1]],8,26],[],20,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[32,[-1]]],19],[2,-1,[]],[2,-1,[]],[2,11],[-1,[[32,[-1]]],[]],[-1,-1,[]],[33,-1,[]],[[[32,[-1]]],[],29],[[[32,[-1]]],-1,29],[[],2],[-1,-2,[],[]],[[[32,[-1]]],-1,[]],[-1,[[32,[-1]]],[]],[[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[2,11],[-1,-1,[]],[[[34,[-1]]],-1,19],[[],2],[-1,-2,[],[]],[2,[[34,[-1]]],19],[[[34,[-1]],-1],11,19],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],[[[1,[35]],35],[[36,[11]]]],[-1,[[36,[37]]],[[6,[38]]]],0,[-1,[[0,[-1,35]]],29],[-1,[[0,[-1,35]]],29],[-1,[[0,[-1,39]]],29],[-1,[[0,[-1,39]]],29],[[[1,[-1]]],[[1,[-1]]],28],0,0,0,0,[-1,[[1,[[40,[-2]]]]],[],[]],[[-1,-3],[],[],[],[[41,[[1,[-2]]]]]],[[-1,-3],[],[],[],[[41,[[1,[-2]]]]]],[-1,15,[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[42,[1,[[11,[35,35]]]],[4,[35]]],11],0,[[-1,10],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],5],[[-1,-2],11,[],[]],[2,-1,[]],[2,-1,[]],[[[43,[-1]]],-1,[]],[2,11],[[[43,[-1]],16],17,44],[-1,-1,[]],[[],[[43,[-1]]],[]],[[[43,[-1]]],[],[]],[[],2],[-1,-2,[],[]],[[[43,[-1]]],15,[]],[[],[[43,[-1]]],[]],[[],[[43,[-1]]],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[2,11],[45,7],[-1,-1,[]],[[],2],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,23,[]],0,[-1,-2,[],[]],0,0,0,0,[[-1,2,-2],11,[],[]],[-1,[[11,[2,2]]],[]],[[-1,-2],11,[],[]],[-1,[[11,[2,2]]],[]],[[2,46],-1,[]]],"c":[],"p":[[15,"slice"],[15,"usize"],[4,"Option",245],[3,"Vec",246],[8,"Clone",247],[8,"AsRef",248],[15,"u64"],[8,"Hash",249],[8,"BuildHasher",249],[3,"Private",250],[15,"tuple"],[3,"Arena",28],[3,"Node",28],[4,"Ordering",251],[15,"bool"],[3,"Formatter",252],[6,"Result",252],[8,"Hasher",249],[8,"Default",253],[8,"FnOnce",254],[4,"Result",255],[8,"FnMut",254],[3,"TypeId",256],[3,"SyncCounter",85],[3,"FastFixedCache",106],[8,"Eq",251],[3,"CachedFunc",106],[8,"Copy",257],[8,"Sized",257],[8,"Borrow",258],[8,"ToOwned",259],[3,"SyncUnsafeCell",143],[15,"never"],[3,"LowContentionPool",163],[6,"IdxSize",0],[6,"PolarsResult",260],[3,"File",261],[3,"Path",262],[15,"u32"],[19,"MaybeUninit",263],[8,"SliceIndex",264],[3,"ThreadPool",265],[3,"SyncPtr",197],[8,"Debug",252],[3,"MemInfo",220],[15,"f64"],[8,"EnumerateIdxTrait",180],[8,"Slice2Uninit",186],[8,"GetSaferUnchecked",186],[8,"SortedSlice",186],[8,"Extrema",186],[8,"UnwrapUncheckedRelease",234],[8,"ResizeFaster",236],[8,"IntoRawParts",236],[8,"PushUnchecked",236],[8,"CapacityByFactor",236]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
